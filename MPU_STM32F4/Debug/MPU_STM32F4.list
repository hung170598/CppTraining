
MPU_STM32F4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002dc  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08000470  08000470  00001470  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000488  08000488  00001490  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000488  08000488  00001490  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000488  08000490  00001490  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000488  08000488  00001488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800048c  0800048c  0000148c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001490  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000490  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000490  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00001490  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000d0f  00000000  00000000  000014c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000352  00000000  00000000  000021cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000a8  00000000  00000000  00002528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000006b  00000000  00000000  000025d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002014  00000000  00000000  0000263b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001278  00000000  00000000  0000464f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000847e  00000000  00000000  000058c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0000dd45  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000164  00000000  00000000  0000dd88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  0000deec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000458 	.word	0x08000458

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000458 	.word	0x08000458

080001d4 <NVIC_EnableIRQ>:

/**
 * @brief Enables the interrupt specified by the IRQ number.
 */
void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b085      	sub	sp, #20
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	71fb      	strb	r3, [r7, #7]
	/* Determine which ISER IRQn is at regIndex */
	uint32_t regIndex = (uint32_t)IRQn / 32;
 80001de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e2:	095b      	lsrs	r3, r3, #5
 80001e4:	60fb      	str	r3, [r7, #12]

	/* Determine which bit it is in */
	uint32_t bitPos = (uint32_t)IRQn % 32;
 80001e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001ea:	f003 031f 	and.w	r3, r3, #31
 80001ee:	60bb      	str	r3, [r7, #8]

	/* Write 1 to the corresponding bit in the NVIC_ISERx register */
	NVIC->ISER[regIndex] |= (1UL << bitPos);
 80001f0:	4a09      	ldr	r2, [pc, #36]	@ (8000218 <NVIC_EnableIRQ+0x44>)
 80001f2:	68fb      	ldr	r3, [r7, #12]
 80001f4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001f8:	2101      	movs	r1, #1
 80001fa:	68bb      	ldr	r3, [r7, #8]
 80001fc:	fa01 f303 	lsl.w	r3, r1, r3
 8000200:	4905      	ldr	r1, [pc, #20]	@ (8000218 <NVIC_EnableIRQ+0x44>)
 8000202:	431a      	orrs	r2, r3
 8000204:	68fb      	ldr	r3, [r7, #12]
 8000206:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800020a:	bf00      	nop
 800020c:	3714      	adds	r7, #20
 800020e:	46bd      	mov	sp, r7
 8000210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000214:	4770      	bx	lr
 8000216:	bf00      	nop
 8000218:	e000e100 	.word	0xe000e100

0800021c <MPU_Init>:
 ************************* Codes
 ******************************************************************************/

/* Initialize and configure the Memory Protection Unit (MPU) */
void MPU_Init(MPU_Config_t* config)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b086      	sub	sp, #24
 8000220:	af00      	add	r7, sp, #0
 8000222:	6078      	str	r0, [r7, #4]
	//Disable MPU
	MPU->CTRL &= ~ MPU_CTRL_ENABLE_Msk;
 8000224:	4b39      	ldr	r3, [pc, #228]	@ (800030c <MPU_Init+0xf0>)
 8000226:	685b      	ldr	r3, [r3, #4]
 8000228:	4a38      	ldr	r2, [pc, #224]	@ (800030c <MPU_Init+0xf0>)
 800022a:	f023 0301 	bic.w	r3, r3, #1
 800022e:	6053      	str	r3, [r2, #4]
	//Config Region
	for(uint8_t i = 0; i < config->RegionCount; i ++)
 8000230:	2300      	movs	r3, #0
 8000232:	75fb      	strb	r3, [r7, #23]
 8000234:	e035      	b.n	80002a2 <MPU_Init+0x86>
	{
		MPU_RegionConfig_t* region = &config->Regions[i];
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	6859      	ldr	r1, [r3, #4]
 800023a:	7dfa      	ldrb	r2, [r7, #23]
 800023c:	4613      	mov	r3, r2
 800023e:	005b      	lsls	r3, r3, #1
 8000240:	4413      	add	r3, r2
 8000242:	009b      	lsls	r3, r3, #2
 8000244:	440b      	add	r3, r1
 8000246:	60fb      	str	r3, [r7, #12]
		MPU->RNR = region->RegionNumber;
 8000248:	68fb      	ldr	r3, [r7, #12]
 800024a:	781a      	ldrb	r2, [r3, #0]
 800024c:	4b2f      	ldr	r3, [pc, #188]	@ (800030c <MPU_Init+0xf0>)
 800024e:	609a      	str	r2, [r3, #8]
		MPU->RBAR = region->StartAddress;
 8000250:	4a2e      	ldr	r2, [pc, #184]	@ (800030c <MPU_Init+0xf0>)
 8000252:	68fb      	ldr	r3, [r7, #12]
 8000254:	685b      	ldr	r3, [r3, #4]
 8000256:	60d3      	str	r3, [r2, #12]
		MPU->RASR = (region->Size << MPU_RASR_SIZE_Pos) |
 8000258:	68fb      	ldr	r3, [r7, #12]
 800025a:	7a1b      	ldrb	r3, [r3, #8]
 800025c:	005a      	lsls	r2, r3, #1
					(region->AccessRight << MPU_RASR_AP_Pos) |
 800025e:	68fb      	ldr	r3, [r7, #12]
 8000260:	7a9b      	ldrb	r3, [r3, #10]
 8000262:	061b      	lsls	r3, r3, #24
		MPU->RASR = (region->Size << MPU_RASR_SIZE_Pos) |
 8000264:	431a      	orrs	r2, r3
					(region->MemoryType == MPU_MEM_STRONG_ORDER ? (0x2 << MPU_RASR_TEX_Pos) :
 8000266:	68fb      	ldr	r3, [r7, #12]
 8000268:	7a5b      	ldrb	r3, [r3, #9]
 800026a:	2b00      	cmp	r3, #0
 800026c:	d009      	beq.n	8000282 <MPU_Init+0x66>
					region->MemoryType == MPU_MEM_NORMAL_CACHEABLE ? (0x1 << MPU_RASR_TEX_Pos) | MPU_RASR_C_Msk :
 800026e:	68fb      	ldr	r3, [r7, #12]
 8000270:	7a5b      	ldrb	r3, [r3, #9]
 8000272:	2b01      	cmp	r3, #1
 8000274:	d102      	bne.n	800027c <MPU_Init+0x60>
 8000276:	f44f 2310 	mov.w	r3, #589824	@ 0x90000
 800027a:	e004      	b.n	8000286 <MPU_Init+0x6a>
 800027c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8000280:	e001      	b.n	8000286 <MPU_Init+0x6a>
					(region->MemoryType == MPU_MEM_STRONG_ORDER ? (0x2 << MPU_RASR_TEX_Pos) :
 8000282:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
					(region->AccessRight << MPU_RASR_AP_Pos) |
 8000286:	4313      	orrs	r3, r2
					 (0x1 << MPU_RASR_TEX_Pos)) |
					(region->Enable ? MPU_RASR_ENABLE_Msk : 0);
 8000288:	68fa      	ldr	r2, [r7, #12]
 800028a:	7ad2      	ldrb	r2, [r2, #11]
 800028c:	2a00      	cmp	r2, #0
 800028e:	bf14      	ite	ne
 8000290:	2201      	movne	r2, #1
 8000292:	2200      	moveq	r2, #0
 8000294:	b2d2      	uxtb	r2, r2
					 (0x1 << MPU_RASR_TEX_Pos)) |
 8000296:	431a      	orrs	r2, r3
		MPU->RASR = (region->Size << MPU_RASR_SIZE_Pos) |
 8000298:	4b1c      	ldr	r3, [pc, #112]	@ (800030c <MPU_Init+0xf0>)
 800029a:	611a      	str	r2, [r3, #16]
	for(uint8_t i = 0; i < config->RegionCount; i ++)
 800029c:	7dfb      	ldrb	r3, [r7, #23]
 800029e:	3301      	adds	r3, #1
 80002a0:	75fb      	strb	r3, [r7, #23]
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	7a1b      	ldrb	r3, [r3, #8]
 80002a6:	7dfa      	ldrb	r2, [r7, #23]
 80002a8:	429a      	cmp	r2, r3
 80002aa:	d3c4      	bcc.n	8000236 <MPU_Init+0x1a>
	}
	uint32_t ctrl = 0;
 80002ac:	2300      	movs	r3, #0
 80002ae:	613b      	str	r3, [r7, #16]
	if(config->EnableDefaultMem) ctrl |= MPU_CTRL_PRIVDEFENA_Msk;
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	781b      	ldrb	r3, [r3, #0]
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d003      	beq.n	80002c0 <MPU_Init+0xa4>
 80002b8:	693b      	ldr	r3, [r7, #16]
 80002ba:	f043 0304 	orr.w	r3, r3, #4
 80002be:	613b      	str	r3, [r7, #16]
	if(config->EnableInException) ctrl |= MPU_CTRL_HFNMIENA_Msk;
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	785b      	ldrb	r3, [r3, #1]
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d003      	beq.n	80002d0 <MPU_Init+0xb4>
 80002c8:	693b      	ldr	r3, [r7, #16]
 80002ca:	f043 0302 	orr.w	r3, r3, #2
 80002ce:	613b      	str	r3, [r7, #16]

	ctrl |= MPU_CTRL_ENABLE_Msk;
 80002d0:	693b      	ldr	r3, [r7, #16]
 80002d2:	f043 0301 	orr.w	r3, r3, #1
 80002d6:	613b      	str	r3, [r7, #16]
	MPU->CTRL = ctrl;
 80002d8:	4a0c      	ldr	r2, [pc, #48]	@ (800030c <MPU_Init+0xf0>)
 80002da:	693b      	ldr	r3, [r7, #16]
 80002dc:	6053      	str	r3, [r2, #4]

	//Kich hoat MemManage Handler neu can
	if(config->EnableMemManage)
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	789b      	ldrb	r3, [r3, #2]
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d009      	beq.n	80002fa <MPU_Init+0xde>
	{
		//Kich hoat MemManage Handler
		SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80002e6:	4b0a      	ldr	r3, [pc, #40]	@ (8000310 <MPU_Init+0xf4>)
 80002e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80002ea:	4a09      	ldr	r2, [pc, #36]	@ (8000310 <MPU_Init+0xf4>)
 80002ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80002f0:	6253      	str	r3, [r2, #36]	@ 0x24
		//Enable Interrupt ccho MemManage
		NVIC_EnableIRQ(MemoryManagement_IRQn);
 80002f2:	f06f 000b 	mvn.w	r0, #11
 80002f6:	f7ff ff6d 	bl	80001d4 <NVIC_EnableIRQ>
	}

	//Dong bo hoa
	__DSB();
 80002fa:	f3bf 8f4f 	dsb	sy
	__ISB();
 80002fe:	f3bf 8f6f 	isb	sy

}
 8000302:	bf00      	nop
 8000304:	3718      	adds	r7, #24
 8000306:	46bd      	mov	sp, r7
 8000308:	bd80      	pop	{r7, pc}
 800030a:	bf00      	nop
 800030c:	e000ed90 	.word	0xe000ed90
 8000310:	e000ed00 	.word	0xe000ed00

08000314 <MPU_GetErrorDetails>:
}


/* Retrieve details about a memory management fault. */
void MPU_GetErrorDetails(uint32_t* faultAddr, uint8_t* faultStatus)
{
 8000314:	b480      	push	{r7}
 8000316:	b083      	sub	sp, #12
 8000318:	af00      	add	r7, sp, #0
 800031a:	6078      	str	r0, [r7, #4]
 800031c:	6039      	str	r1, [r7, #0]
	*faultAddr = SCB->MMFAR;	//Dia chi gay loi
 800031e:	4b07      	ldr	r3, [pc, #28]	@ (800033c <MPU_GetErrorDetails+0x28>)
 8000320:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	601a      	str	r2, [r3, #0]
	*faultStatus = SCB->CFSR & 0xFF;	//Trang thai loi (MMFSR)
 8000326:	4b05      	ldr	r3, [pc, #20]	@ (800033c <MPU_GetErrorDetails+0x28>)
 8000328:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800032a:	b2da      	uxtb	r2, r3
 800032c:	683b      	ldr	r3, [r7, #0]
 800032e:	701a      	strb	r2, [r3, #0]
}
 8000330:	bf00      	nop
 8000332:	370c      	adds	r7, #12
 8000334:	46bd      	mov	sp, r7
 8000336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033a:	4770      	bx	lr
 800033c:	e000ed00 	.word	0xe000ed00

08000340 <MemManage_Handler>:
 ******************  Includes
 ******************************************************************************/
#include <stdint.h>
#include "MPU_Driver.h"

void MemManage_Handler(void){
 8000340:	b580      	push	{r7, lr}
 8000342:	b082      	sub	sp, #8
 8000344:	af00      	add	r7, sp, #0
	uint32_t faultAddr;
	uint8_t faultStatus;
	MPU_GetErrorDetails(&faultAddr, &faultStatus);
 8000346:	1cfa      	adds	r2, r7, #3
 8000348:	1d3b      	adds	r3, r7, #4
 800034a:	4611      	mov	r1, r2
 800034c:	4618      	mov	r0, r3
 800034e:	f7ff ffe1 	bl	8000314 <MPU_GetErrorDetails>
	while(1);	//Debug loi
 8000352:	bf00      	nop
 8000354:	e7fd      	b.n	8000352 <MemManage_Handler+0x12>
	...

08000358 <main>:

/*******************************************************************************
 ************************** Main
 ******************************************************************************/
int main(void)
{
 8000358:	b5b0      	push	{r4, r5, r7, lr}
 800035a:	b08c      	sub	sp, #48	@ 0x30
 800035c:	af00      	add	r7, sp, #0
	volatile uint8_t count = 0;
 800035e:	2300      	movs	r3, #0
 8000360:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

	//Config 2 Region
	MPU_RegionConfig_t region[] = {
 8000364:	4b12      	ldr	r3, [pc, #72]	@ (80003b0 <main+0x58>)
 8000366:	f107 0410 	add.w	r4, r7, #16
 800036a:	461d      	mov	r5, r3
 800036c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800036e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000370:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000374:	e884 0003 	stmia.w	r4, {r0, r1}
			{0, 0x00000000, 31, MPU_MEM_STRONG_ORDER, MPU_ACCESS_FULL, 1}, 			//Region 0: Background
			{1, 0x20005000, 9, MPU_MEM_NORMAL_NONCACHE, MPU_ACCESS_READ_ONLY, 1}	//Region 1: Test
	};
	MPU_Config_t mpuConfig = {
 8000378:	2301      	movs	r3, #1
 800037a:	713b      	strb	r3, [r7, #4]
 800037c:	2300      	movs	r3, #0
 800037e:	717b      	strb	r3, [r7, #5]
 8000380:	2301      	movs	r3, #1
 8000382:	71bb      	strb	r3, [r7, #6]
 8000384:	f107 0310 	add.w	r3, r7, #16
 8000388:	60bb      	str	r3, [r7, #8]
 800038a:	2302      	movs	r3, #2
 800038c:	733b      	strb	r3, [r7, #12]
			MPU_ENABLE_DEFAULT_MEM, MPU_DISABLE_IN_EXCEPTION, 1, region, 2
	};

	//Init MPU
	MPU_Init(&mpuConfig);
 800038e:	1d3b      	adds	r3, r7, #4
 8000390:	4618      	mov	r0, r3
 8000392:	f7ff ff43 	bl	800021c <MPU_Init>

	//Test write into Region 1 (Read Only)
	volatile uint32_t* test_addr = (uint32_t*)0x20005000;
 8000396:	4b07      	ldr	r3, [pc, #28]	@ (80003b4 <main+0x5c>)
 8000398:	62fb      	str	r3, [r7, #44]	@ 0x2c
	*test_addr = 0x12345678; 		//Gay ra MemFault
 800039a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800039c:	4a06      	ldr	r2, [pc, #24]	@ (80003b8 <main+0x60>)
 800039e:	601a      	str	r2, [r3, #0]

	/*If have no fault, jump to while(1)*/
	while(1)
	{
		count ++;
 80003a0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80003a4:	b2db      	uxtb	r3, r3
 80003a6:	3301      	adds	r3, #1
 80003a8:	b2db      	uxtb	r3, r3
 80003aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80003ae:	e7f7      	b.n	80003a0 <main+0x48>
 80003b0:	08000470 	.word	0x08000470
 80003b4:	20005000 	.word	0x20005000
 80003b8:	12345678 	.word	0x12345678

080003bc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003bc:	480d      	ldr	r0, [pc, #52]	@ (80003f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003be:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003c0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003c4:	480c      	ldr	r0, [pc, #48]	@ (80003f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80003c6:	490d      	ldr	r1, [pc, #52]	@ (80003fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80003c8:	4a0d      	ldr	r2, [pc, #52]	@ (8000400 <LoopForever+0xe>)
  movs r3, #0
 80003ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003cc:	e002      	b.n	80003d4 <LoopCopyDataInit>

080003ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003d2:	3304      	adds	r3, #4

080003d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003d8:	d3f9      	bcc.n	80003ce <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003da:	4a0a      	ldr	r2, [pc, #40]	@ (8000404 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003dc:	4c0a      	ldr	r4, [pc, #40]	@ (8000408 <LoopForever+0x16>)
  movs r3, #0
 80003de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003e0:	e001      	b.n	80003e6 <LoopFillZerobss>

080003e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003e4:	3204      	adds	r2, #4

080003e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003e8:	d3fb      	bcc.n	80003e2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003ea:	f000 f811 	bl	8000410 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003ee:	f7ff ffb3 	bl	8000358 <main>

080003f2 <LoopForever>:

LoopForever:
  b LoopForever
 80003f2:	e7fe      	b.n	80003f2 <LoopForever>
  ldr   r0, =_estack
 80003f4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80003f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003fc:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000400:	08000490 	.word	0x08000490
  ldr r2, =_sbss
 8000404:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000408:	2000001c 	.word	0x2000001c

0800040c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800040c:	e7fe      	b.n	800040c <ADC_IRQHandler>
	...

08000410 <__libc_init_array>:
 8000410:	b570      	push	{r4, r5, r6, lr}
 8000412:	4d0d      	ldr	r5, [pc, #52]	@ (8000448 <__libc_init_array+0x38>)
 8000414:	4c0d      	ldr	r4, [pc, #52]	@ (800044c <__libc_init_array+0x3c>)
 8000416:	1b64      	subs	r4, r4, r5
 8000418:	10a4      	asrs	r4, r4, #2
 800041a:	2600      	movs	r6, #0
 800041c:	42a6      	cmp	r6, r4
 800041e:	d109      	bne.n	8000434 <__libc_init_array+0x24>
 8000420:	4d0b      	ldr	r5, [pc, #44]	@ (8000450 <__libc_init_array+0x40>)
 8000422:	4c0c      	ldr	r4, [pc, #48]	@ (8000454 <__libc_init_array+0x44>)
 8000424:	f000 f818 	bl	8000458 <_init>
 8000428:	1b64      	subs	r4, r4, r5
 800042a:	10a4      	asrs	r4, r4, #2
 800042c:	2600      	movs	r6, #0
 800042e:	42a6      	cmp	r6, r4
 8000430:	d105      	bne.n	800043e <__libc_init_array+0x2e>
 8000432:	bd70      	pop	{r4, r5, r6, pc}
 8000434:	f855 3b04 	ldr.w	r3, [r5], #4
 8000438:	4798      	blx	r3
 800043a:	3601      	adds	r6, #1
 800043c:	e7ee      	b.n	800041c <__libc_init_array+0xc>
 800043e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000442:	4798      	blx	r3
 8000444:	3601      	adds	r6, #1
 8000446:	e7f2      	b.n	800042e <__libc_init_array+0x1e>
 8000448:	08000488 	.word	0x08000488
 800044c:	08000488 	.word	0x08000488
 8000450:	08000488 	.word	0x08000488
 8000454:	0800048c 	.word	0x0800048c

08000458 <_init>:
 8000458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800045a:	bf00      	nop
 800045c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800045e:	bc08      	pop	{r3}
 8000460:	469e      	mov	lr, r3
 8000462:	4770      	bx	lr

08000464 <_fini>:
 8000464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000466:	bf00      	nop
 8000468:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800046a:	bc08      	pop	{r3}
 800046c:	469e      	mov	lr, r3
 800046e:	4770      	bx	lr
