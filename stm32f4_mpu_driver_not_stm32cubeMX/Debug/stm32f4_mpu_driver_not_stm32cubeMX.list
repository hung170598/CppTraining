
stm32f4_mpu_driver_not_stm32cubeMX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000470  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08000604  08000604  00001604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800062c  0800062c  00002004  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800062c  0800062c  00002004  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800062c  0800062c  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800062c  0800062c  0000162c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000630  08000630  00001630  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08000634  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000004  08000638  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000638  00002020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000db2  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000337  00000000  00000000  00002de6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000c8  00000000  00000000  00003120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000008b  00000000  00000000  000031e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000cbf  00000000  00000000  00003273  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000ab5  00000000  00000000  00003f32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00008edd  00000000  00000000  000049e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0000d8c4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000244  00000000  00000000  0000d908  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0000db4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000004 	.word	0x20000004
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080005ec 	.word	0x080005ec

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000008 	.word	0x20000008
 80001d0:	080005ec 	.word	0x080005ec

080001d4 <main>:

	        2,
	        MPU_ModuleConfig_0_RegionConfig
	};

int main(void) {
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0
	// Initialize MPU
	MPU_Init(&MPU_Config_0);
 80001da:	4807      	ldr	r0, [pc, #28]	@ (80001f8 <main+0x24>)
 80001dc:	f000 f84d 	bl	800027a <MPU_Init>

	// Test error: write into Region 1 (Read Only)
	volatile uint32_t* test_addr = (uint32_t*)0x40000000;
 80001e0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80001e4:	607b      	str	r3, [r7, #4]
	*test_addr = 0xDEADBEEF; // Get MemFault
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	4a04      	ldr	r2, [pc, #16]	@ (80001fc <main+0x28>)
 80001ea:	601a      	str	r2, [r3, #0]
 80001ec:	2300      	movs	r3, #0
}
 80001ee:	4618      	mov	r0, r3
 80001f0:	3708      	adds	r7, #8
 80001f2:	46bd      	mov	sp, r7
 80001f4:	bd80      	pop	{r7, pc}
 80001f6:	bf00      	nop
 80001f8:	08000624 	.word	0x08000624
 80001fc:	deadbeef 	.word	0xdeadbeef

08000200 <MemManage_Handler>:

void MemManage_Handler(void){
 8000200:	b480      	push	{r7}
 8000202:	af00      	add	r7, sp, #0
	a = 2;
 8000204:	4b02      	ldr	r3, [pc, #8]	@ (8000210 <MemManage_Handler+0x10>)
 8000206:	2202      	movs	r2, #2
 8000208:	601a      	str	r2, [r3, #0]
	while (1); // Debug error
 800020a:	bf00      	nop
 800020c:	e7fd      	b.n	800020a <MemManage_Handler+0xa>
 800020e:	bf00      	nop
 8000210:	20000000 	.word	0x20000000

08000214 <HardFault_Handler>:
//	t_bMpu_ErrorDetected = MPU_GetErrorDetails(&t_Mpu_FaultDetails);
}

void HardFault_Handler(void){
 8000214:	b480      	push	{r7}
 8000216:	af00      	add	r7, sp, #0
	a = 3;
 8000218:	4b02      	ldr	r3, [pc, #8]	@ (8000224 <HardFault_Handler+0x10>)
 800021a:	2203      	movs	r2, #3
 800021c:	601a      	str	r2, [r3, #0]
	while (1); // Debug error
 800021e:	bf00      	nop
 8000220:	e7fd      	b.n	800021e <HardFault_Handler+0xa>
 8000222:	bf00      	nop
 8000224:	20000000 	.word	0x20000000

08000228 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000228:	480d      	ldr	r0, [pc, #52]	@ (8000260 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800022a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800022c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000230:	480c      	ldr	r0, [pc, #48]	@ (8000264 <LoopForever+0x6>)
  ldr r1, =_edata
 8000232:	490d      	ldr	r1, [pc, #52]	@ (8000268 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000234:	4a0d      	ldr	r2, [pc, #52]	@ (800026c <LoopForever+0xe>)
  movs r3, #0
 8000236:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000238:	e002      	b.n	8000240 <LoopCopyDataInit>

0800023a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800023a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800023c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800023e:	3304      	adds	r3, #4

08000240 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000240:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000242:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000244:	d3f9      	bcc.n	800023a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000246:	4a0a      	ldr	r2, [pc, #40]	@ (8000270 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000248:	4c0a      	ldr	r4, [pc, #40]	@ (8000274 <LoopForever+0x16>)
  movs r3, #0
 800024a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800024c:	e001      	b.n	8000252 <LoopFillZerobss>

0800024e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800024e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000250:	3204      	adds	r2, #4

08000252 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000252:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000254:	d3fb      	bcc.n	800024e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000256:	f000 f9a5 	bl	80005a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800025a:	f7ff ffbb 	bl	80001d4 <main>

0800025e <LoopForever>:

LoopForever:
  b LoopForever
 800025e:	e7fe      	b.n	800025e <LoopForever>
  ldr   r0, =_estack
 8000260:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000264:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000268:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 800026c:	08000634 	.word	0x08000634
  ldr r2, =_sbss
 8000270:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000274:	20000020 	.word	0x20000020

08000278 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000278:	e7fe      	b.n	8000278 <ADC_IRQHandler>

0800027a <MPU_Init>:
static void MPU_SetMemoryType(uint32 * pRegionAttr, MPU_MemoryType eType);
static void MPU_ComputeAccessRights(uint32 * pRegionAttr, MPU_AccessRightsType eAccessRights);


void MPU_Init(const MPU_ConfigType * pConfig)
{
 800027a:	b580      	push	{r7, lr}
 800027c:	b086      	sub	sp, #24
 800027e:	af00      	add	r7, sp, #0
 8000280:	6078      	str	r0, [r7, #4]
    uint8 region;
    const MPU_RegionConfigType * regionCfg;
    MPU_Type * base = MPU;
 8000282:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8000286:	613b      	str	r3, [r7, #16]

    /* Reset the peripheral to the default settings */
    MPU_Deinit();
 8000288:	f000 f8af 	bl	80003ea <MPU_Deinit>

    /* Configure MPU general settings */
    if (pConfig->bDefaultMapEn == TRUE)
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	781b      	ldrb	r3, [r3, #0]
 8000290:	2b01      	cmp	r3, #1
 8000292:	d108      	bne.n	80002a6 <MPU_Init+0x2c>
    {
        base->CTRL |= MPU_CTRL_PRIVDEFENA_MASK;
 8000294:	693b      	ldr	r3, [r7, #16]
 8000296:	f8d3 3d94 	ldr.w	r3, [r3, #3476]	@ 0xd94
 800029a:	f043 0204 	orr.w	r2, r3, #4
 800029e:	693b      	ldr	r3, [r7, #16]
 80002a0:	f8c3 2d94 	str.w	r2, [r3, #3476]	@ 0xd94
 80002a4:	e007      	b.n	80002b6 <MPU_Init+0x3c>
    }
    else
    {
        base->CTRL &= (~((uint32)MPU_CTRL_PRIVDEFENA_MASK));
 80002a6:	693b      	ldr	r3, [r7, #16]
 80002a8:	f8d3 3d94 	ldr.w	r3, [r3, #3476]	@ 0xd94
 80002ac:	f023 0204 	bic.w	r2, r3, #4
 80002b0:	693b      	ldr	r3, [r7, #16]
 80002b2:	f8c3 2d94 	str.w	r2, [r3, #3476]	@ 0xd94
    }

    if (pConfig->bEnableRunHFNMI == TRUE)
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	785b      	ldrb	r3, [r3, #1]
 80002ba:	2b01      	cmp	r3, #1
 80002bc:	d108      	bne.n	80002d0 <MPU_Init+0x56>
    {
        base->CTRL |=MPU_CTRL_HFNMIENA_MASK;
 80002be:	693b      	ldr	r3, [r7, #16]
 80002c0:	f8d3 3d94 	ldr.w	r3, [r3, #3476]	@ 0xd94
 80002c4:	f043 0202 	orr.w	r2, r3, #2
 80002c8:	693b      	ldr	r3, [r7, #16]
 80002ca:	f8c3 2d94 	str.w	r2, [r3, #3476]	@ 0xd94
 80002ce:	e007      	b.n	80002e0 <MPU_Init+0x66>
    }
    else
    {
        base->CTRL &= (~((uint32)MPU_CTRL_HFNMIENA_MASK));
 80002d0:	693b      	ldr	r3, [r7, #16]
 80002d2:	f8d3 3d94 	ldr.w	r3, [r3, #3476]	@ 0xd94
 80002d6:	f023 0202 	bic.w	r2, r3, #2
 80002da:	693b      	ldr	r3, [r7, #16]
 80002dc:	f8c3 2d94 	str.w	r2, [r3, #3476]	@ 0xd94
    }

    if (pConfig->bEnMemManageInterrupt == TRUE)
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	789b      	ldrb	r3, [r3, #2]
 80002e4:	2b01      	cmp	r3, #1
 80002e6:	d10a      	bne.n	80002fe <MPU_Init+0x84>
    {
        SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_MASK;
 80002e8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80002ec:	f8d3 3d24 	ldr.w	r3, [r3, #3364]	@ 0xd24
 80002f0:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 80002f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80002f8:	f8c2 3d24 	str.w	r3, [r2, #3364]	@ 0xd24
 80002fc:	e009      	b.n	8000312 <MPU_Init+0x98>
    }
    else
    {
        SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_MASK;
 80002fe:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8000302:	f8d3 3d24 	ldr.w	r3, [r3, #3364]	@ 0xd24
 8000306:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 800030a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800030e:	f8c2 3d24 	str.w	r3, [r2, #3364]	@ 0xd24
    }

    for (region = 0U; region < pConfig->u8RegionCnt; region++)
 8000312:	2300      	movs	r3, #0
 8000314:	75fb      	strb	r3, [r7, #23]
 8000316:	e012      	b.n	800033e <MPU_Init+0xc4>
    {
        regionCfg = &pConfig->pRegionConfigArr[region];
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	685a      	ldr	r2, [r3, #4]
 800031c:	7dfb      	ldrb	r3, [r7, #23]
 800031e:	011b      	lsls	r3, r3, #4
 8000320:	4413      	add	r3, r2
 8000322:	60fb      	str	r3, [r7, #12]
        MPU_SetRegionConfig((pConfig->pRegionConfigArr[region]).u8RegionNum, regionCfg);
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	685a      	ldr	r2, [r3, #4]
 8000328:	7dfb      	ldrb	r3, [r7, #23]
 800032a:	011b      	lsls	r3, r3, #4
 800032c:	4413      	add	r3, r2
 800032e:	781b      	ldrb	r3, [r3, #0]
 8000330:	68f9      	ldr	r1, [r7, #12]
 8000332:	4618      	mov	r0, r3
 8000334:	f000 f814 	bl	8000360 <MPU_SetRegionConfig>
    for (region = 0U; region < pConfig->u8RegionCnt; region++)
 8000338:	7dfb      	ldrb	r3, [r7, #23]
 800033a:	3301      	adds	r3, #1
 800033c:	75fb      	strb	r3, [r7, #23]
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	78db      	ldrb	r3, [r3, #3]
 8000342:	7dfa      	ldrb	r2, [r7, #23]
 8000344:	429a      	cmp	r2, r3
 8000346:	d3e7      	bcc.n	8000318 <MPU_Init+0x9e>
    }

    base->CTRL |= MPU_CTRL_ENABLE(1U);
 8000348:	693b      	ldr	r3, [r7, #16]
 800034a:	f8d3 3d94 	ldr.w	r3, [r3, #3476]	@ 0xd94
 800034e:	f043 0201 	orr.w	r2, r3, #1
 8000352:	693b      	ldr	r3, [r7, #16]
 8000354:	f8c3 2d94 	str.w	r2, [r3, #3476]	@ 0xd94
}
 8000358:	bf00      	nop
 800035a:	3718      	adds	r7, #24
 800035c:	46bd      	mov	sp, r7
 800035e:	bd80      	pop	{r7, pc}

08000360 <MPU_SetRegionConfig>:

void MPU_SetRegionConfig(uint8 u8RegionNum,
                                          const MPU_RegionConfigType * const pUserConfigPtr
                                         )
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b086      	sub	sp, #24
 8000364:	af00      	add	r7, sp, #0
 8000366:	4603      	mov	r3, r0
 8000368:	6039      	str	r1, [r7, #0]
 800036a:	71fb      	strb	r3, [r7, #7]
    MPU_Type * base = MPU;
 800036c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8000370:	617b      	str	r3, [r7, #20]
    uint32 regionSize;
    uint32 regionAttributes = 0UL;
 8000372:	2300      	movs	r3, #0
 8000374:	60fb      	str	r3, [r7, #12]

    /* Calculate log2(region) */
    regionSize = MPU_CalculateRegionSize(pUserConfigPtr->u32StartAddr, pUserConfigPtr->u32EndAddr);
 8000376:	683b      	ldr	r3, [r7, #0]
 8000378:	685a      	ldr	r2, [r3, #4]
 800037a:	683b      	ldr	r3, [r7, #0]
 800037c:	689b      	ldr	r3, [r3, #8]
 800037e:	4619      	mov	r1, r3
 8000380:	4610      	mov	r0, r2
 8000382:	f000 f86e 	bl	8000462 <MPU_CalculateRegionSize>
 8000386:	6138      	str	r0, [r7, #16]

    /* Set the region number */
    base->RNR = u8RegionNum;
 8000388:	79fa      	ldrb	r2, [r7, #7]
 800038a:	697b      	ldr	r3, [r7, #20]
 800038c:	f8c3 2d98 	str.w	r2, [r3, #3480]	@ 0xd98
    /* Set the region base address */
    base->RBAR = pUserConfigPtr->u32StartAddr;
 8000390:	683b      	ldr	r3, [r7, #0]
 8000392:	685a      	ldr	r2, [r3, #4]
 8000394:	697b      	ldr	r3, [r7, #20]
 8000396:	f8c3 2d9c 	str.w	r2, [r3, #3484]	@ 0xd9c
    /* Set the region size */
    regionAttributes |= MPU_RASR_SIZE(regionSize - 1UL);
 800039a:	693b      	ldr	r3, [r7, #16]
 800039c:	3b01      	subs	r3, #1
 800039e:	005b      	lsls	r3, r3, #1
 80003a0:	f003 023e 	and.w	r2, r3, #62	@ 0x3e
 80003a4:	68fb      	ldr	r3, [r7, #12]
 80003a6:	4313      	orrs	r3, r2
 80003a8:	60fb      	str	r3, [r7, #12]

    /* Set memory attributes and cacheability options */
    if (pUserConfigPtr->eMemType != MPU_MEM_NORMAL_CACHEABLE)
 80003aa:	683b      	ldr	r3, [r7, #0]
 80003ac:	7b1b      	ldrb	r3, [r3, #12]
 80003ae:	2b07      	cmp	r3, #7
 80003b0:	d007      	beq.n	80003c2 <MPU_SetRegionConfig+0x62>
    {
        MPU_SetMemoryType(&regionAttributes, pUserConfigPtr->eMemType);
 80003b2:	683b      	ldr	r3, [r7, #0]
 80003b4:	7b1a      	ldrb	r2, [r3, #12]
 80003b6:	f107 030c 	add.w	r3, r7, #12
 80003ba:	4611      	mov	r1, r2
 80003bc:	4618      	mov	r0, r3
 80003be:	f000 f86f 	bl	80004a0 <MPU_SetMemoryType>
    {
        //MPU_SetCachePolicies(&regionAttributes, pUserConfigPtr->eInnerCachePolicy, pUserConfigPtr->eOuterCachePolicy);
    }

    /* Compute access rights */
    MPU_ComputeAccessRights(&regionAttributes, pUserConfigPtr->eAccessRight);
 80003c2:	683b      	ldr	r3, [r7, #0]
 80003c4:	7b5a      	ldrb	r2, [r3, #13]
 80003c6:	f107 030c 	add.w	r3, r7, #12
 80003ca:	4611      	mov	r1, r2
 80003cc:	4618      	mov	r0, r3
 80003ce:	f000 f8bb 	bl	8000548 <MPU_ComputeAccessRights>

    /* Enable Region */
    regionAttributes |= MPU_RASR_ENABLE(1UL);
 80003d2:	68fb      	ldr	r3, [r7, #12]
 80003d4:	f043 0301 	orr.w	r3, r3, #1
 80003d8:	60fb      	str	r3, [r7, #12]

    /* Write final values */
    base->RASR = regionAttributes;
 80003da:	68fa      	ldr	r2, [r7, #12]
 80003dc:	697b      	ldr	r3, [r7, #20]
 80003de:	f8c3 2da0 	str.w	r2, [r3, #3488]	@ 0xda0
}
 80003e2:	bf00      	nop
 80003e4:	3718      	adds	r7, #24
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bd80      	pop	{r7, pc}

080003ea <MPU_Deinit>:

void MPU_Deinit(void)
{
 80003ea:	b580      	push	{r7, lr}
 80003ec:	b082      	sub	sp, #8
 80003ee:	af00      	add	r7, sp, #0
    uint8 region;
    MPU_Type * base = MPU;
 80003f0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80003f4:	603b      	str	r3, [r7, #0]

    base->CTRL &= ~(MPU_CTRL_PRIVDEFENA_MASK | MPU_CTRL_HFNMIENA_MASK | MPU_CTRL_ENABLE_MASK);
 80003f6:	683b      	ldr	r3, [r7, #0]
 80003f8:	f8d3 3d94 	ldr.w	r3, [r3, #3476]	@ 0xd94
 80003fc:	f023 0207 	bic.w	r2, r3, #7
 8000400:	683b      	ldr	r3, [r7, #0]
 8000402:	f8c3 2d94 	str.w	r2, [r3, #3476]	@ 0xd94

    for (region = 0U; region < MPU_GetDRegion(base); region++)
 8000406:	2300      	movs	r3, #0
 8000408:	71fb      	strb	r3, [r7, #7]
 800040a:	e00e      	b.n	800042a <MPU_Deinit+0x40>
    {
        base->RNR = (uint32)region;
 800040c:	79fa      	ldrb	r2, [r7, #7]
 800040e:	683b      	ldr	r3, [r7, #0]
 8000410:	f8c3 2d98 	str.w	r2, [r3, #3480]	@ 0xd98
        base->RASR = 0UL;
 8000414:	683b      	ldr	r3, [r7, #0]
 8000416:	2200      	movs	r2, #0
 8000418:	f8c3 2da0 	str.w	r2, [r3, #3488]	@ 0xda0
        base->RBAR = 0UL;
 800041c:	683b      	ldr	r3, [r7, #0]
 800041e:	2200      	movs	r2, #0
 8000420:	f8c3 2d9c 	str.w	r2, [r3, #3484]	@ 0xd9c
    for (region = 0U; region < MPU_GetDRegion(base); region++)
 8000424:	79fb      	ldrb	r3, [r7, #7]
 8000426:	3301      	adds	r3, #1
 8000428:	71fb      	strb	r3, [r7, #7]
 800042a:	6838      	ldr	r0, [r7, #0]
 800042c:	f000 f80a 	bl	8000444 <MPU_GetDRegion>
 8000430:	4603      	mov	r3, r0
 8000432:	461a      	mov	r2, r3
 8000434:	79fb      	ldrb	r3, [r7, #7]
 8000436:	4293      	cmp	r3, r2
 8000438:	d3e8      	bcc.n	800040c <MPU_Deinit+0x22>
    }
}
 800043a:	bf00      	nop
 800043c:	bf00      	nop
 800043e:	3708      	adds	r7, #8
 8000440:	46bd      	mov	sp, r7
 8000442:	bd80      	pop	{r7, pc}

08000444 <MPU_GetDRegion>:

    return result;
}

static uint8 MPU_GetDRegion(MPU_Type const * const base)
{
 8000444:	b480      	push	{r7}
 8000446:	b083      	sub	sp, #12
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
    return (uint8)((base->TYPE & MPU_TYPE_DREGION_MASK)>>MPU_TYPE_DREGION_SHIFT) & 0xFFU;
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	f8d3 3d90 	ldr.w	r3, [r3, #3472]	@ 0xd90
 8000452:	0a1b      	lsrs	r3, r3, #8
 8000454:	b2db      	uxtb	r3, r3
}
 8000456:	4618      	mov	r0, r3
 8000458:	370c      	adds	r7, #12
 800045a:	46bd      	mov	sp, r7
 800045c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000460:	4770      	bx	lr

08000462 <MPU_CalculateRegionSize>:

static uint32 MPU_CalculateRegionSize(uint32 u32StartAddr, uint32 u32EndAddr)
{
 8000462:	b480      	push	{r7}
 8000464:	b085      	sub	sp, #20
 8000466:	af00      	add	r7, sp, #0
 8000468:	6078      	str	r0, [r7, #4]
 800046a:	6039      	str	r1, [r7, #0]
    uint32 finalSize = 0UL;
 800046c:	2300      	movs	r3, #0
 800046e:	60fb      	str	r3, [r7, #12]
    uint32 u32Size = 0UL;
 8000470:	2300      	movs	r3, #0
 8000472:	60bb      	str	r3, [r7, #8]

    u32Size = u32EndAddr - u32StartAddr;
 8000474:	683a      	ldr	r2, [r7, #0]
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	1ad3      	subs	r3, r2, r3
 800047a:	60bb      	str	r3, [r7, #8]
    while (u32Size > 0U)
 800047c:	e005      	b.n	800048a <MPU_CalculateRegionSize+0x28>
    {
        finalSize++;
 800047e:	68fb      	ldr	r3, [r7, #12]
 8000480:	3301      	adds	r3, #1
 8000482:	60fb      	str	r3, [r7, #12]
        u32Size >>= 1U;
 8000484:	68bb      	ldr	r3, [r7, #8]
 8000486:	085b      	lsrs	r3, r3, #1
 8000488:	60bb      	str	r3, [r7, #8]
    while (u32Size > 0U)
 800048a:	68bb      	ldr	r3, [r7, #8]
 800048c:	2b00      	cmp	r3, #0
 800048e:	d1f6      	bne.n	800047e <MPU_CalculateRegionSize+0x1c>
    }

    return finalSize;
 8000490:	68fb      	ldr	r3, [r7, #12]
}
 8000492:	4618      	mov	r0, r3
 8000494:	3714      	adds	r7, #20
 8000496:	46bd      	mov	sp, r7
 8000498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049c:	4770      	bx	lr
	...

080004a0 <MPU_SetMemoryType>:

static void MPU_SetMemoryType(uint32 * pRegionAttr, MPU_MemoryType eType)
{
 80004a0:	b480      	push	{r7}
 80004a2:	b083      	sub	sp, #12
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
 80004a8:	460b      	mov	r3, r1
 80004aa:	70fb      	strb	r3, [r7, #3]
    /* 7-6, 5-3, 2, 1, 0 bit S always clear to not influence previous setting
     *      Res, TEX, S, C, B */
    switch(eType)
 80004ac:	78fb      	ldrb	r3, [r7, #3]
 80004ae:	2b07      	cmp	r3, #7
 80004b0:	d843      	bhi.n	800053a <MPU_SetMemoryType+0x9a>
 80004b2:	a201      	add	r2, pc, #4	@ (adr r2, 80004b8 <MPU_SetMemoryType+0x18>)
 80004b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004b8:	0800053b 	.word	0x0800053b
 80004bc:	080004d9 	.word	0x080004d9
 80004c0:	080004e7 	.word	0x080004e7
 80004c4:	080004f5 	.word	0x080004f5
 80004c8:	08000503 	.word	0x08000503
 80004cc:	08000511 	.word	0x08000511
 80004d0:	0800051f 	.word	0x0800051f
 80004d4:	0800052d 	.word	0x0800052d
    {
        case MPU_MEM_STRONG_ORDER:								/* 0b00000000,  MPU_MEMORY_TYPE_STRONG_ORDER  */
            break;
        case MPU_MEM_DEVICE_SHARED:
            *pRegionAttr |= ((uint32)0x01U << MPU_A_RASR_B_SHIFT);	/* 0b00000001,  MPU_MEMORY_TYPE_DEVICE_SHARED */
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	601a      	str	r2, [r3, #0]
            break;
 80004e4:	e02a      	b.n	800053c <MPU_SetMemoryType+0x9c>
        case MPU_MEM_NORMAL_IO_WR_THROUGH:
            *pRegionAttr |= ((uint32)0x02U << MPU_A_RASR_B_SHIFT);	/* 0b00000010,  MPU_MEMORY_TYPE_NORMAL_IN_OUT_WRITE_THROUGH */
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	601a      	str	r2, [r3, #0]
            break;
 80004f2:	e023      	b.n	800053c <MPU_SetMemoryType+0x9c>
        case MPU_MEM_NORMAL_IO_WR_BACK1:
            *pRegionAttr |= ((uint32)0x03U << MPU_A_RASR_B_SHIFT);	/* 0b00000011,  MPU_MEMORY_TYPE_NORMAL_IN_OUT_WRITE_BACK1 */
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	f443 3240 	orr.w	r2, r3, #196608	@ 0x30000
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	601a      	str	r2, [r3, #0]
            break;
 8000500:	e01c      	b.n	800053c <MPU_SetMemoryType+0x9c>
        case MPU_MEM_NORMAL_IO_NO_CACHE:
            *pRegionAttr |= ((uint32)0x08U << MPU_A_RASR_B_SHIFT);	/* 0b00001000,  MPU_MEMORY_TYPE_NORMAL_IN_OUT_NO_CACHE */
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	601a      	str	r2, [r3, #0]
            break;
 800050e:	e015      	b.n	800053c <MPU_SetMemoryType+0x9c>
        case MPU_MEM_NORMAL_IO_WR_BACK2:
            *pRegionAttr |= ((uint32)0x0BU << MPU_A_RASR_B_SHIFT);	/* 0b00001011,  MPU_MEMORY_TYPE_NORMAL_IN_OUT_WRITE_BACK2 */
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	f443 2230 	orr.w	r2, r3, #720896	@ 0xb0000
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	601a      	str	r2, [r3, #0]
            break;
 800051c:	e00e      	b.n	800053c <MPU_SetMemoryType+0x9c>
        case MPU_MEM_DEVICE_NOSHARE:
            *pRegionAttr |= ((uint32)0x10U << MPU_A_RASR_B_SHIFT);	/* 0b00010000,  MPU_MEMORY_TYPE_DEVICE_NOSHARE */
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	601a      	str	r2, [r3, #0]
            break;
 800052a:	e007      	b.n	800053c <MPU_SetMemoryType+0x9c>
        case MPU_MEM_NORMAL_CACHEABLE:
            *pRegionAttr |= ((uint32)0x20U << MPU_A_RASR_B_SHIFT);	/* 0b00100000   MPU_MEMORY_TYPE_NORMAL_CACHEABLE */
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	601a      	str	r2, [r3, #0]
            break;
 8000538:	e000      	b.n	800053c <MPU_SetMemoryType+0x9c>
        default:
            break;
 800053a:	bf00      	nop
    }

}
 800053c:	bf00      	nop
 800053e:	370c      	adds	r7, #12
 8000540:	46bd      	mov	sp, r7
 8000542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000546:	4770      	bx	lr

08000548 <MPU_ComputeAccessRights>:

static void MPU_ComputeAccessRights(uint32 * pRegionAttr, MPU_AccessRightsType eAccessRights)
{
 8000548:	b480      	push	{r7}
 800054a:	b083      	sub	sp, #12
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
 8000550:	460b      	mov	r3, r1
 8000552:	70fb      	strb	r3, [r7, #3]
    *pRegionAttr &= ~(MPU_RASR_AP_MASK | MPU_RASR_XN_MASK);
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	f023 52b8 	bic.w	r2, r3, #385875968	@ 0x17000000
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	601a      	str	r2, [r3, #0]
    *pRegionAttr |= MPU_RASR_AP(eAccessRights);
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	681a      	ldr	r2, [r3, #0]
 8000564:	78fb      	ldrb	r3, [r7, #3]
 8000566:	061b      	lsls	r3, r3, #24
 8000568:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800056c:	431a      	orrs	r2, r3
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	601a      	str	r2, [r3, #0]
    if (((uint8)eAccessRights & (uint8)MPU_EXECUTE_RIGHT_MASK) == (uint8)0U)
 8000572:	78fb      	ldrb	r3, [r7, #3]
 8000574:	f003 0310 	and.w	r3, r3, #16
 8000578:	2b00      	cmp	r3, #0
 800057a:	d106      	bne.n	800058a <MPU_ComputeAccessRights+0x42>
    {
        *pRegionAttr |= MPU_RASR_XN(1UL);
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	601a      	str	r2, [r3, #0]
    }
    else
    {
        *pRegionAttr &= ~MPU_RASR_XN(1UL);
    }
}
 8000588:	e005      	b.n	8000596 <MPU_ComputeAccessRights+0x4e>
        *pRegionAttr &= ~MPU_RASR_XN(1UL);
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	601a      	str	r2, [r3, #0]
}
 8000596:	bf00      	nop
 8000598:	370c      	adds	r7, #12
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr
	...

080005a4 <__libc_init_array>:
 80005a4:	b570      	push	{r4, r5, r6, lr}
 80005a6:	4d0d      	ldr	r5, [pc, #52]	@ (80005dc <__libc_init_array+0x38>)
 80005a8:	4c0d      	ldr	r4, [pc, #52]	@ (80005e0 <__libc_init_array+0x3c>)
 80005aa:	1b64      	subs	r4, r4, r5
 80005ac:	10a4      	asrs	r4, r4, #2
 80005ae:	2600      	movs	r6, #0
 80005b0:	42a6      	cmp	r6, r4
 80005b2:	d109      	bne.n	80005c8 <__libc_init_array+0x24>
 80005b4:	4d0b      	ldr	r5, [pc, #44]	@ (80005e4 <__libc_init_array+0x40>)
 80005b6:	4c0c      	ldr	r4, [pc, #48]	@ (80005e8 <__libc_init_array+0x44>)
 80005b8:	f000 f818 	bl	80005ec <_init>
 80005bc:	1b64      	subs	r4, r4, r5
 80005be:	10a4      	asrs	r4, r4, #2
 80005c0:	2600      	movs	r6, #0
 80005c2:	42a6      	cmp	r6, r4
 80005c4:	d105      	bne.n	80005d2 <__libc_init_array+0x2e>
 80005c6:	bd70      	pop	{r4, r5, r6, pc}
 80005c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80005cc:	4798      	blx	r3
 80005ce:	3601      	adds	r6, #1
 80005d0:	e7ee      	b.n	80005b0 <__libc_init_array+0xc>
 80005d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80005d6:	4798      	blx	r3
 80005d8:	3601      	adds	r6, #1
 80005da:	e7f2      	b.n	80005c2 <__libc_init_array+0x1e>
 80005dc:	0800062c 	.word	0x0800062c
 80005e0:	0800062c 	.word	0x0800062c
 80005e4:	0800062c 	.word	0x0800062c
 80005e8:	08000630 	.word	0x08000630

080005ec <_init>:
 80005ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005ee:	bf00      	nop
 80005f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005f2:	bc08      	pop	{r3}
 80005f4:	469e      	mov	lr, r3
 80005f6:	4770      	bx	lr

080005f8 <_fini>:
 80005f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005fa:	bf00      	nop
 80005fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005fe:	bc08      	pop	{r3}
 8000600:	469e      	mov	lr, r3
 8000602:	4770      	bx	lr
