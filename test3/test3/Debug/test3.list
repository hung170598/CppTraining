
test3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002908  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08002a90  08002a90  00004004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08002a90  08002a90  00004004  2**0
                  CONTENTS
  4 .ARM          00000000  08002a90  08002a90  00004004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002a90  08002a90  00004004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a90  08002a90  00003a90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002a94  08002a94  00003a94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08002a98  00004000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00004004  2**0
                  CONTENTS
 10 .bss          00000400  20000004  20000004  00004004  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000404  20000404  00004004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00004004  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007c6b  00000000  00000000  00004034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000161b  00000000  00000000  0000bc9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000690  00000000  00000000  0000d2c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000004eb  00000000  00000000  0000d950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020321  00000000  00000000  0000de3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000839d  00000000  00000000  0002e15c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c7db4  00000000  00000000  000364f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000fe2ad  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001a60  00000000  00000000  000fe2f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000003f  00000000  00000000  000ffd50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002a78 	.word	0x08002a78

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08002a78 	.word	0x08002a78

080001c8 <initprogress>:
	state_t_t prev;
	state_t_t cur;
}progress_t;

void initprogress(progress_t * sm)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
	sm->cur = LED_OFF;
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	2200      	movs	r2, #0
 80001d4:	705a      	strb	r2, [r3, #1]
	sm->prev = LED_OFF;
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	2200      	movs	r2, #0
 80001da:	701a      	strb	r2, [r3, #0]
}
 80001dc:	bf00      	nop
 80001de:	370c      	adds	r7, #12
 80001e0:	46bd      	mov	sp, r7
 80001e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001e6:	4770      	bx	lr

080001e8 <statemachine>:
void statemachine(progress_t * sw)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b082      	sub	sp, #8
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	6078      	str	r0, [r7, #4]
	switch(sw->cur)
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	785b      	ldrb	r3, [r3, #1]
 80001f4:	2b02      	cmp	r3, #2
 80001f6:	d01e      	beq.n	8000236 <statemachine+0x4e>
 80001f8:	2b02      	cmp	r3, #2
 80001fa:	dc28      	bgt.n	800024e <statemachine+0x66>
 80001fc:	2b00      	cmp	r3, #0
 80001fe:	d002      	beq.n	8000206 <statemachine+0x1e>
 8000200:	2b01      	cmp	r3, #1
 8000202:	d008      	beq.n	8000216 <statemachine+0x2e>
			twinkled();
			sw->cur == LED_OFF;
		}
	}
	}
}
 8000204:	e023      	b.n	800024e <statemachine+0x66>
		led_off();
 8000206:	f000 f94b 	bl	80004a0 <led_off>
		sw->prev = LED_OFF;
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	2200      	movs	r2, #0
 800020e:	701a      	strb	r2, [r3, #0]
		sw->cur = BLINK_LED;
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	2201      	movs	r2, #1
 8000214:	705a      	strb	r2, [r3, #1]
		if(sw->prev == LED_OFF)
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	781b      	ldrb	r3, [r3, #0]
 800021a:	2b00      	cmp	r3, #0
 800021c:	d102      	bne.n	8000224 <statemachine+0x3c>
			led_off();
 800021e:	f000 f93f 	bl	80004a0 <led_off>
 8000222:	e008      	b.n	8000236 <statemachine+0x4e>
		}else if(sw->prev == BLINK_LED){
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	781b      	ldrb	r3, [r3, #0]
 8000228:	2b01      	cmp	r3, #1
 800022a:	d104      	bne.n	8000236 <statemachine+0x4e>
			blink_led();
 800022c:	f000 f8b0 	bl	8000390 <blink_led>
			sw->cur = PWM;
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	2202      	movs	r2, #2
 8000234:	705a      	strb	r2, [r3, #1]
		if(sw->prev == BLINK_LED)
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	781b      	ldrb	r3, [r3, #0]
 800023a:	2b01      	cmp	r3, #1
 800023c:	d102      	bne.n	8000244 <statemachine+0x5c>
			blink_led();
 800023e:	f000 f8a7 	bl	8000390 <blink_led>
}
 8000242:	e004      	b.n	800024e <statemachine+0x66>
		else if(sw->prev = PWM){
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	2202      	movs	r2, #2
 8000248:	701a      	strb	r2, [r3, #0]
			twinkled();
 800024a:	f000 f867 	bl	800031c <twinkled>
}
 800024e:	bf00      	nop
 8000250:	3708      	adds	r7, #8
 8000252:	46bd      	mov	sp, r7
 8000254:	bd80      	pop	{r7, pc}
	...

08000258 <GPIO_init>:
void GPIO_init(void)
{
 8000258:	b480      	push	{r7}
 800025a:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 800025c:	4b1e      	ldr	r3, [pc, #120]	@ (80002d8 <GPIO_init+0x80>)
 800025e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000260:	4a1d      	ldr	r2, [pc, #116]	@ (80002d8 <GPIO_init+0x80>)
 8000262:	f043 0308 	orr.w	r3, r3, #8
 8000266:	6313      	str	r3, [r2, #48]	@ 0x30


	/*set up led4 is output*/
	GPIOD->MODER |= 1<<24;
 8000268:	4b1c      	ldr	r3, [pc, #112]	@ (80002dc <GPIO_init+0x84>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	4a1b      	ldr	r2, [pc, #108]	@ (80002dc <GPIO_init+0x84>)
 800026e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000272:	6013      	str	r3, [r2, #0]
	GPIOD->MODER &= ~(1<<25);
 8000274:	4b19      	ldr	r3, [pc, #100]	@ (80002dc <GPIO_init+0x84>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	4a18      	ldr	r2, [pc, #96]	@ (80002dc <GPIO_init+0x84>)
 800027a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800027e:	6013      	str	r3, [r2, #0]

	GPIOD->MODER |= 1<<26;
 8000280:	4b16      	ldr	r3, [pc, #88]	@ (80002dc <GPIO_init+0x84>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	4a15      	ldr	r2, [pc, #84]	@ (80002dc <GPIO_init+0x84>)
 8000286:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800028a:	6013      	str	r3, [r2, #0]
	GPIOD->MODER &= ~(1<<27);
 800028c:	4b13      	ldr	r3, [pc, #76]	@ (80002dc <GPIO_init+0x84>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	4a12      	ldr	r2, [pc, #72]	@ (80002dc <GPIO_init+0x84>)
 8000292:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 8000296:	6013      	str	r3, [r2, #0]

	GPIOD->MODER |= 1<<28;
 8000298:	4b10      	ldr	r3, [pc, #64]	@ (80002dc <GPIO_init+0x84>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	4a0f      	ldr	r2, [pc, #60]	@ (80002dc <GPIO_init+0x84>)
 800029e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80002a2:	6013      	str	r3, [r2, #0]
	GPIOD->MODER &= ~(1<<29);
 80002a4:	4b0d      	ldr	r3, [pc, #52]	@ (80002dc <GPIO_init+0x84>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	4a0c      	ldr	r2, [pc, #48]	@ (80002dc <GPIO_init+0x84>)
 80002aa:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80002ae:	6013      	str	r3, [r2, #0]

	GPIOD->MODER |= 1<<30;
 80002b0:	4b0a      	ldr	r3, [pc, #40]	@ (80002dc <GPIO_init+0x84>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	4a09      	ldr	r2, [pc, #36]	@ (80002dc <GPIO_init+0x84>)
 80002b6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80002ba:	6013      	str	r3, [r2, #0]
	GPIOD->MODER &= ~(1<<31);
 80002bc:	4b07      	ldr	r3, [pc, #28]	@ (80002dc <GPIO_init+0x84>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	4a06      	ldr	r2, [pc, #24]	@ (80002dc <GPIO_init+0x84>)
 80002c2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80002c6:	6013      	str	r3, [r2, #0]



	RCC->CR = RCC_CR_HSION;
 80002c8:	4b03      	ldr	r3, [pc, #12]	@ (80002d8 <GPIO_init+0x80>)
 80002ca:	2201      	movs	r2, #1
 80002cc:	601a      	str	r2, [r3, #0]
}
 80002ce:	bf00      	nop
 80002d0:	46bd      	mov	sp, r7
 80002d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d6:	4770      	bx	lr
 80002d8:	40023800 	.word	0x40023800
 80002dc:	40020c00 	.word	0x40020c00

080002e0 <button_init>:
void button_init(void)
{
 80002e0:	b480      	push	{r7}
 80002e2:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80002e4:	4b0b      	ldr	r3, [pc, #44]	@ (8000314 <button_init+0x34>)
 80002e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002e8:	4a0a      	ldr	r2, [pc, #40]	@ (8000314 <button_init+0x34>)
 80002ea:	f043 0301 	orr.w	r3, r3, #1
 80002ee:	6313      	str	r3, [r2, #48]	@ 0x30

	GPIOA->MODER &= (1<<0);
 80002f0:	4b09      	ldr	r3, [pc, #36]	@ (8000318 <button_init+0x38>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	4a08      	ldr	r2, [pc, #32]	@ (8000318 <button_init+0x38>)
 80002f6:	f003 0301 	and.w	r3, r3, #1
 80002fa:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= (1<<1);
 80002fc:	4b06      	ldr	r3, [pc, #24]	@ (8000318 <button_init+0x38>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	4a05      	ldr	r2, [pc, #20]	@ (8000318 <button_init+0x38>)
 8000302:	f003 0302 	and.w	r3, r3, #2
 8000306:	6013      	str	r3, [r2, #0]

	//GPIOA->PUPDR |= (1<<0);
	//GPIOA->PUPDR &= ~(1<<1);

}
 8000308:	bf00      	nop
 800030a:	46bd      	mov	sp, r7
 800030c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000310:	4770      	bx	lr
 8000312:	bf00      	nop
 8000314:	40023800 	.word	0x40023800
 8000318:	40020000 	.word	0x40020000

0800031c <twinkled>:
void twinkled(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b082      	sub	sp, #8
 8000320:	af00      	add	r7, sp, #0
	uint8_t dutycycle;
	for ( dutycycle = 0; dutycycle < MAX_DUTY_CYCLE; dutycycle++)
 8000322:	2300      	movs	r3, #0
 8000324:	71fb      	strb	r3, [r7, #7]
 8000326:	e012      	b.n	800034e <twinkled+0x32>
			{
				/*T=4s*/
				pwm(dutycycle);/*0.01s x 100*/
 8000328:	79fb      	ldrb	r3, [r7, #7]
 800032a:	4618      	mov	r0, r3
 800032c:	f000 f86e 	bl	800040c <pwm>
				pwm(dutycycle);/*0.01s x 100*/
 8000330:	79fb      	ldrb	r3, [r7, #7]
 8000332:	4618      	mov	r0, r3
 8000334:	f000 f86a 	bl	800040c <pwm>
				pwm(dutycycle);/*0.01s x 100*/
 8000338:	79fb      	ldrb	r3, [r7, #7]
 800033a:	4618      	mov	r0, r3
 800033c:	f000 f866 	bl	800040c <pwm>
				pwm(dutycycle);/*0.01s x 100*/
 8000340:	79fb      	ldrb	r3, [r7, #7]
 8000342:	4618      	mov	r0, r3
 8000344:	f000 f862 	bl	800040c <pwm>
	for ( dutycycle = 0; dutycycle < MAX_DUTY_CYCLE; dutycycle++)
 8000348:	79fb      	ldrb	r3, [r7, #7]
 800034a:	3301      	adds	r3, #1
 800034c:	71fb      	strb	r3, [r7, #7]
 800034e:	79fb      	ldrb	r3, [r7, #7]
 8000350:	2b63      	cmp	r3, #99	@ 0x63
 8000352:	d9e9      	bls.n	8000328 <twinkled+0xc>

			}
			for ( dutycycle = 0; dutycycle < MAX_DUTY_CYCLE; dutycycle++)
 8000354:	2300      	movs	r3, #0
 8000356:	71fb      	strb	r3, [r7, #7]
 8000358:	e012      	b.n	8000380 <twinkled+0x64>
			{
				/*T=4s*/
				pwm(dutycycle);/*0.01s x 100*/
 800035a:	79fb      	ldrb	r3, [r7, #7]
 800035c:	4618      	mov	r0, r3
 800035e:	f000 f855 	bl	800040c <pwm>
				pwm(dutycycle);/*0.01s x 100*/
 8000362:	79fb      	ldrb	r3, [r7, #7]
 8000364:	4618      	mov	r0, r3
 8000366:	f000 f851 	bl	800040c <pwm>
				pwm(dutycycle);/*0.01s x 100*/
 800036a:	79fb      	ldrb	r3, [r7, #7]
 800036c:	4618      	mov	r0, r3
 800036e:	f000 f84d 	bl	800040c <pwm>
				pwm(dutycycle);/*0.01s x 100*/
 8000372:	79fb      	ldrb	r3, [r7, #7]
 8000374:	4618      	mov	r0, r3
 8000376:	f000 f849 	bl	800040c <pwm>
			for ( dutycycle = 0; dutycycle < MAX_DUTY_CYCLE; dutycycle++)
 800037a:	79fb      	ldrb	r3, [r7, #7]
 800037c:	3301      	adds	r3, #1
 800037e:	71fb      	strb	r3, [r7, #7]
 8000380:	79fb      	ldrb	r3, [r7, #7]
 8000382:	2b63      	cmp	r3, #99	@ 0x63
 8000384:	d9e9      	bls.n	800035a <twinkled+0x3e>


			}
}
 8000386:	bf00      	nop
 8000388:	bf00      	nop
 800038a:	3708      	adds	r7, #8
 800038c:	46bd      	mov	sp, r7
 800038e:	bd80      	pop	{r7, pc}

08000390 <blink_led>:
void blink_led()
{
 8000390:	b580      	push	{r7, lr}
 8000392:	af00      	add	r7, sp, #0
	delay(10000);
 8000394:	f242 7010 	movw	r0, #10000	@ 0x2710
 8000398:	f000 f8a4 	bl	80004e4 <delay>
	GPIOD->ODR |= (GREEN_lED_PIN);
 800039c:	4b1a      	ldr	r3, [pc, #104]	@ (8000408 <blink_led+0x78>)
 800039e:	695b      	ldr	r3, [r3, #20]
 80003a0:	4a19      	ldr	r2, [pc, #100]	@ (8000408 <blink_led+0x78>)
 80003a2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80003a6:	6153      	str	r3, [r2, #20]
	GPIOD->ODR |= (BLUE_LED_PIN);
 80003a8:	4b17      	ldr	r3, [pc, #92]	@ (8000408 <blink_led+0x78>)
 80003aa:	695b      	ldr	r3, [r3, #20]
 80003ac:	4a16      	ldr	r2, [pc, #88]	@ (8000408 <blink_led+0x78>)
 80003ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80003b2:	6153      	str	r3, [r2, #20]
	GPIOD->ODR |= (ORANGE_LED_PIN);
 80003b4:	4b14      	ldr	r3, [pc, #80]	@ (8000408 <blink_led+0x78>)
 80003b6:	695b      	ldr	r3, [r3, #20]
 80003b8:	4a13      	ldr	r2, [pc, #76]	@ (8000408 <blink_led+0x78>)
 80003ba:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80003be:	6153      	str	r3, [r2, #20]
	GPIOD->ODR |= (RED_LED_PIN);
 80003c0:	4b11      	ldr	r3, [pc, #68]	@ (8000408 <blink_led+0x78>)
 80003c2:	695b      	ldr	r3, [r3, #20]
 80003c4:	4a10      	ldr	r2, [pc, #64]	@ (8000408 <blink_led+0x78>)
 80003c6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80003ca:	6153      	str	r3, [r2, #20]
	delay(10000);
 80003cc:	f242 7010 	movw	r0, #10000	@ 0x2710
 80003d0:	f000 f888 	bl	80004e4 <delay>
	GPIOD->ODR &= ~(GREEN_lED_PIN);
 80003d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000408 <blink_led+0x78>)
 80003d6:	695b      	ldr	r3, [r3, #20]
 80003d8:	4a0b      	ldr	r2, [pc, #44]	@ (8000408 <blink_led+0x78>)
 80003da:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80003de:	6153      	str	r3, [r2, #20]
	GPIOD->ODR &= ~(BLUE_LED_PIN);
 80003e0:	4b09      	ldr	r3, [pc, #36]	@ (8000408 <blink_led+0x78>)
 80003e2:	695b      	ldr	r3, [r3, #20]
 80003e4:	4a08      	ldr	r2, [pc, #32]	@ (8000408 <blink_led+0x78>)
 80003e6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80003ea:	6153      	str	r3, [r2, #20]
	GPIOD->ODR &= ~(ORANGE_LED_PIN);
 80003ec:	4b06      	ldr	r3, [pc, #24]	@ (8000408 <blink_led+0x78>)
 80003ee:	695b      	ldr	r3, [r3, #20]
 80003f0:	4a05      	ldr	r2, [pc, #20]	@ (8000408 <blink_led+0x78>)
 80003f2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80003f6:	6153      	str	r3, [r2, #20]
	GPIOD->ODR &= ~(RED_LED_PIN);
 80003f8:	4b03      	ldr	r3, [pc, #12]	@ (8000408 <blink_led+0x78>)
 80003fa:	695b      	ldr	r3, [r3, #20]
 80003fc:	4a02      	ldr	r2, [pc, #8]	@ (8000408 <blink_led+0x78>)
 80003fe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000402:	6153      	str	r3, [r2, #20]

}
 8000404:	bf00      	nop
 8000406:	bd80      	pop	{r7, pc}
 8000408:	40020c00 	.word	0x40020c00

0800040c <pwm>:
void pwm(uint8_t dutyCycle) {
 800040c:	b580      	push	{r7, lr}
 800040e:	b084      	sub	sp, #16
 8000410:	af00      	add	r7, sp, #0
 8000412:	4603      	mov	r3, r0
 8000414:	71fb      	strb	r3, [r7, #7]
	uint32_t downTime;
	uint32_t ontime;
	downTime = BLINK_CYCLE * (MAX_DUTY_CYCLE - dutyCycle) / MAX_DUTY_CYCLE;
 8000416:	79fb      	ldrb	r3, [r7, #7]
 8000418:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 800041c:	60fb      	str	r3, [r7, #12]
	ontime = BLINK_CYCLE - downTime;
 800041e:	68fb      	ldr	r3, [r7, #12]
 8000420:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 8000424:	60bb      	str	r3, [r7, #8]

	delay(downTime);
 8000426:	68f8      	ldr	r0, [r7, #12]
 8000428:	f000 f85c 	bl	80004e4 <delay>
	GPIOD->ODR |= (GREEN_lED_PIN);
 800042c:	4b1b      	ldr	r3, [pc, #108]	@ (800049c <pwm+0x90>)
 800042e:	695b      	ldr	r3, [r3, #20]
 8000430:	4a1a      	ldr	r2, [pc, #104]	@ (800049c <pwm+0x90>)
 8000432:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000436:	6153      	str	r3, [r2, #20]
	GPIOD->ODR |= (BLUE_LED_PIN);
 8000438:	4b18      	ldr	r3, [pc, #96]	@ (800049c <pwm+0x90>)
 800043a:	695b      	ldr	r3, [r3, #20]
 800043c:	4a17      	ldr	r2, [pc, #92]	@ (800049c <pwm+0x90>)
 800043e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000442:	6153      	str	r3, [r2, #20]
	GPIOD->ODR |= (ORANGE_LED_PIN);
 8000444:	4b15      	ldr	r3, [pc, #84]	@ (800049c <pwm+0x90>)
 8000446:	695b      	ldr	r3, [r3, #20]
 8000448:	4a14      	ldr	r2, [pc, #80]	@ (800049c <pwm+0x90>)
 800044a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800044e:	6153      	str	r3, [r2, #20]
	GPIOD->ODR |= (RED_LED_PIN);
 8000450:	4b12      	ldr	r3, [pc, #72]	@ (800049c <pwm+0x90>)
 8000452:	695b      	ldr	r3, [r3, #20]
 8000454:	4a11      	ldr	r2, [pc, #68]	@ (800049c <pwm+0x90>)
 8000456:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800045a:	6153      	str	r3, [r2, #20]
	delay(ontime);
 800045c:	68b8      	ldr	r0, [r7, #8]
 800045e:	f000 f841 	bl	80004e4 <delay>
	GPIOD->ODR &= ~(GREEN_lED_PIN);
 8000462:	4b0e      	ldr	r3, [pc, #56]	@ (800049c <pwm+0x90>)
 8000464:	695b      	ldr	r3, [r3, #20]
 8000466:	4a0d      	ldr	r2, [pc, #52]	@ (800049c <pwm+0x90>)
 8000468:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800046c:	6153      	str	r3, [r2, #20]
	GPIOD->ODR &= ~(BLUE_LED_PIN);
 800046e:	4b0b      	ldr	r3, [pc, #44]	@ (800049c <pwm+0x90>)
 8000470:	695b      	ldr	r3, [r3, #20]
 8000472:	4a0a      	ldr	r2, [pc, #40]	@ (800049c <pwm+0x90>)
 8000474:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000478:	6153      	str	r3, [r2, #20]
	GPIOD->ODR &= ~(ORANGE_LED_PIN);
 800047a:	4b08      	ldr	r3, [pc, #32]	@ (800049c <pwm+0x90>)
 800047c:	695b      	ldr	r3, [r3, #20]
 800047e:	4a07      	ldr	r2, [pc, #28]	@ (800049c <pwm+0x90>)
 8000480:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8000484:	6153      	str	r3, [r2, #20]
	GPIOD->ODR &= ~(RED_LED_PIN);
 8000486:	4b05      	ldr	r3, [pc, #20]	@ (800049c <pwm+0x90>)
 8000488:	695b      	ldr	r3, [r3, #20]
 800048a:	4a04      	ldr	r2, [pc, #16]	@ (800049c <pwm+0x90>)
 800048c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000490:	6153      	str	r3, [r2, #20]
}
 8000492:	bf00      	nop
 8000494:	3710      	adds	r7, #16
 8000496:	46bd      	mov	sp, r7
 8000498:	bd80      	pop	{r7, pc}
 800049a:	bf00      	nop
 800049c:	40020c00 	.word	0x40020c00

080004a0 <led_off>:
void led_off()
{
 80004a0:	b480      	push	{r7}
 80004a2:	af00      	add	r7, sp, #0
	GPIOD->ODR &= ~(GREEN_lED_PIN);
 80004a4:	4b0e      	ldr	r3, [pc, #56]	@ (80004e0 <led_off+0x40>)
 80004a6:	695b      	ldr	r3, [r3, #20]
 80004a8:	4a0d      	ldr	r2, [pc, #52]	@ (80004e0 <led_off+0x40>)
 80004aa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80004ae:	6153      	str	r3, [r2, #20]
	GPIOD->ODR &= ~(BLUE_LED_PIN);
 80004b0:	4b0b      	ldr	r3, [pc, #44]	@ (80004e0 <led_off+0x40>)
 80004b2:	695b      	ldr	r3, [r3, #20]
 80004b4:	4a0a      	ldr	r2, [pc, #40]	@ (80004e0 <led_off+0x40>)
 80004b6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80004ba:	6153      	str	r3, [r2, #20]
	GPIOD->ODR &= ~(ORANGE_LED_PIN);
 80004bc:	4b08      	ldr	r3, [pc, #32]	@ (80004e0 <led_off+0x40>)
 80004be:	695b      	ldr	r3, [r3, #20]
 80004c0:	4a07      	ldr	r2, [pc, #28]	@ (80004e0 <led_off+0x40>)
 80004c2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80004c6:	6153      	str	r3, [r2, #20]
	GPIOD->ODR &= ~(RED_LED_PIN);
 80004c8:	4b05      	ldr	r3, [pc, #20]	@ (80004e0 <led_off+0x40>)
 80004ca:	695b      	ldr	r3, [r3, #20]
 80004cc:	4a04      	ldr	r2, [pc, #16]	@ (80004e0 <led_off+0x40>)
 80004ce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80004d2:	6153      	str	r3, [r2, #20]
}
 80004d4:	bf00      	nop
 80004d6:	46bd      	mov	sp, r7
 80004d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop
 80004e0:	40020c00 	.word	0x40020c00

080004e4 <delay>:
	void delay(int delay)
	{
 80004e4:	b480      	push	{r7}
 80004e6:	b085      	sub	sp, #20
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
		int i = 0;
 80004ec:	2300      	movs	r3, #0
 80004ee:	60fb      	str	r3, [r7, #12]
		int delayrt = 0;
 80004f0:	2300      	movs	r3, #0
 80004f2:	60bb      	str	r3, [r7, #8]
		delayrt = delay * MICRO_SECONDS;
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	f44f 72b9 	mov.w	r2, #370	@ 0x172
 80004fa:	fb02 f303 	mul.w	r3, r2, r3
 80004fe:	60bb      	str	r3, [r7, #8]
		for (i=0; i<delayrt;i++)
 8000500:	2300      	movs	r3, #0
 8000502:	60fb      	str	r3, [r7, #12]
 8000504:	e003      	b.n	800050e <delay+0x2a>
		{
			asm("nop");
 8000506:	bf00      	nop
		for (i=0; i<delayrt;i++)
 8000508:	68fb      	ldr	r3, [r7, #12]
 800050a:	3301      	adds	r3, #1
 800050c:	60fb      	str	r3, [r7, #12]
 800050e:	68fa      	ldr	r2, [r7, #12]
 8000510:	68bb      	ldr	r3, [r7, #8]
 8000512:	429a      	cmp	r2, r3
 8000514:	dbf7      	blt.n	8000506 <delay+0x22>
		}
	}
 8000516:	bf00      	nop
 8000518:	bf00      	nop
 800051a:	3714      	adds	r7, #20
 800051c:	46bd      	mov	sp, r7
 800051e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000522:	4770      	bx	lr

08000524 <main>:
void main()
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0
	GPIO_init();
 800052a:	f7ff fe95 	bl	8000258 <GPIO_init>
	button_init();
 800052e:	f7ff fed7 	bl	80002e0 <button_init>
	progress_t sm;
	initprogress(&sm);
 8000532:	1d3b      	adds	r3, r7, #4
 8000534:	4618      	mov	r0, r3
 8000536:	f7ff fe47 	bl	80001c8 <initprogress>
	while (1)
	{

		if ((GPIOA->IDR & (1 << 0))) {
 800053a:	4b05      	ldr	r3, [pc, #20]	@ (8000550 <main+0x2c>)
 800053c:	691b      	ldr	r3, [r3, #16]
 800053e:	f003 0301 	and.w	r3, r3, #1
 8000542:	2b00      	cmp	r3, #0
 8000544:	d0f9      	beq.n	800053a <main+0x16>
		       statemachine(&sm);
 8000546:	1d3b      	adds	r3, r7, #4
 8000548:	4618      	mov	r0, r3
 800054a:	f7ff fe4d 	bl	80001e8 <statemachine>
		if ((GPIOA->IDR & (1 << 0))) {
 800054e:	e7f4      	b.n	800053a <main+0x16>
 8000550:	40020000 	.word	0x40020000

08000554 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000558:	bf00      	nop
 800055a:	e7fd      	b.n	8000558 <NMI_Handler+0x4>

0800055c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800055c:	b480      	push	{r7}
 800055e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000560:	bf00      	nop
 8000562:	e7fd      	b.n	8000560 <HardFault_Handler+0x4>

08000564 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000568:	bf00      	nop
 800056a:	e7fd      	b.n	8000568 <MemManage_Handler+0x4>

0800056c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000570:	bf00      	nop
 8000572:	e7fd      	b.n	8000570 <BusFault_Handler+0x4>

08000574 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000578:	bf00      	nop
 800057a:	e7fd      	b.n	8000578 <UsageFault_Handler+0x4>

0800057c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000580:	bf00      	nop
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr

0800058a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800058a:	b480      	push	{r7}
 800058c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800058e:	bf00      	nop
 8000590:	46bd      	mov	sp, r7
 8000592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000596:	4770      	bx	lr

08000598 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800059c:	bf00      	nop
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr

080005a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005a6:	b580      	push	{r7, lr}
 80005a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005aa:	f000 f849 	bl	8000640 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005ae:	bf00      	nop
 80005b0:	bd80      	pop	{r7, pc}
	...

080005b4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80005b8:	4802      	ldr	r0, [pc, #8]	@ (80005c4 <OTG_FS_IRQHandler+0x10>)
 80005ba:	f000 f855 	bl	8000668 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80005be:	bf00      	nop
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	20000024 	.word	0x20000024

080005c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80005cc:	4b06      	ldr	r3, [pc, #24]	@ (80005e8 <SystemInit+0x20>)
 80005ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80005d2:	4a05      	ldr	r2, [pc, #20]	@ (80005e8 <SystemInit+0x20>)
 80005d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80005d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005dc:	bf00      	nop
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	e000ed00 	.word	0xe000ed00

080005ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80005ec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000624 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80005f0:	f7ff ffea 	bl	80005c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80005f4:	480c      	ldr	r0, [pc, #48]	@ (8000628 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80005f6:	490d      	ldr	r1, [pc, #52]	@ (800062c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80005f8:	4a0d      	ldr	r2, [pc, #52]	@ (8000630 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80005fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005fc:	e002      	b.n	8000604 <LoopCopyDataInit>

080005fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000600:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000602:	3304      	adds	r3, #4

08000604 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000604:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000606:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000608:	d3f9      	bcc.n	80005fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800060a:	4a0a      	ldr	r2, [pc, #40]	@ (8000634 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800060c:	4c0a      	ldr	r4, [pc, #40]	@ (8000638 <LoopFillZerobss+0x22>)
  movs r3, #0
 800060e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000610:	e001      	b.n	8000616 <LoopFillZerobss>

08000612 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000612:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000614:	3204      	adds	r2, #4

08000616 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000616:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000618:	d3fb      	bcc.n	8000612 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800061a:	f002 fa09 	bl	8002a30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800061e:	f7ff ff81 	bl	8000524 <main>
  bx  lr    
 8000622:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000624:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000628:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800062c:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000630:	08002a98 	.word	0x08002a98
  ldr r2, =_sbss
 8000634:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000638:	20000404 	.word	0x20000404

0800063c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800063c:	e7fe      	b.n	800063c <ADC_IRQHandler>
	...

08000640 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000644:	4b06      	ldr	r3, [pc, #24]	@ (8000660 <HAL_IncTick+0x20>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	461a      	mov	r2, r3
 800064a:	4b06      	ldr	r3, [pc, #24]	@ (8000664 <HAL_IncTick+0x24>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	4413      	add	r3, r2
 8000650:	4a04      	ldr	r2, [pc, #16]	@ (8000664 <HAL_IncTick+0x24>)
 8000652:	6013      	str	r3, [r2, #0]
}
 8000654:	bf00      	nop
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop
 8000660:	20000000 	.word	0x20000000
 8000664:	20000020 	.word	0x20000020

08000668 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b086      	sub	sp, #24
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8000676:	693b      	ldr	r3, [r7, #16]
 8000678:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	4618      	mov	r0, r3
 8000680:	f001 fe8d 	bl	800239e <USB_GetMode>
 8000684:	4603      	mov	r3, r0
 8000686:	2b01      	cmp	r3, #1
 8000688:	f040 80fb 	bne.w	8000882 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4618      	mov	r0, r3
 8000692:	f001 fe50 	bl	8002336 <USB_ReadInterrupts>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	f000 80f1 	beq.w	8000880 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	4618      	mov	r0, r3
 80006a4:	f001 fe47 	bl	8002336 <USB_ReadInterrupts>
 80006a8:	4603      	mov	r3, r0
 80006aa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80006ae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80006b2:	d104      	bne.n	80006be <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80006bc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	4618      	mov	r0, r3
 80006c4:	f001 fe37 	bl	8002336 <USB_ReadInterrupts>
 80006c8:	4603      	mov	r3, r0
 80006ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80006ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80006d2:	d104      	bne.n	80006de <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80006dc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	4618      	mov	r0, r3
 80006e4:	f001 fe27 	bl	8002336 <USB_ReadInterrupts>
 80006e8:	4603      	mov	r3, r0
 80006ea:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80006ee:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80006f2:	d104      	bne.n	80006fe <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80006fc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	4618      	mov	r0, r3
 8000704:	f001 fe17 	bl	8002336 <USB_ReadInterrupts>
 8000708:	4603      	mov	r3, r0
 800070a:	f003 0302 	and.w	r3, r3, #2
 800070e:	2b02      	cmp	r3, #2
 8000710:	d103      	bne.n	800071a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	2202      	movs	r2, #2
 8000718:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	4618      	mov	r0, r3
 8000720:	f001 fe09 	bl	8002336 <USB_ReadInterrupts>
 8000724:	4603      	mov	r3, r0
 8000726:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800072a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800072e:	d120      	bne.n	8000772 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000738:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	f003 0301 	and.w	r3, r3, #1
 8000746:	2b00      	cmp	r3, #0
 8000748:	d113      	bne.n	8000772 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800074a:	2110      	movs	r1, #16
 800074c:	6938      	ldr	r0, [r7, #16]
 800074e:	f001 fd3a 	bl	80021c6 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8000752:	6938      	ldr	r0, [r7, #16]
 8000754:	f001 fd69 	bl	800222a <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	7a5b      	ldrb	r3, [r3, #9]
 800075c:	2b02      	cmp	r3, #2
 800075e:	d105      	bne.n	800076c <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	2101      	movs	r1, #1
 8000766:	4618      	mov	r0, r3
 8000768:	f001 fe27 	bl	80023ba <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800076c:	6878      	ldr	r0, [r7, #4]
 800076e:	f002 f8df 	bl	8002930 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	4618      	mov	r0, r3
 8000778:	f001 fddd 	bl	8002336 <USB_ReadInterrupts>
 800077c:	4603      	mov	r3, r0
 800077e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000782:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000786:	d102      	bne.n	800078e <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8000788:	6878      	ldr	r0, [r7, #4]
 800078a:	f001 fc87 	bl	800209c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	4618      	mov	r0, r3
 8000794:	f001 fdcf 	bl	8002336 <USB_ReadInterrupts>
 8000798:	4603      	mov	r3, r0
 800079a:	f003 0308 	and.w	r3, r3, #8
 800079e:	2b08      	cmp	r3, #8
 80007a0:	d106      	bne.n	80007b0 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80007a2:	6878      	ldr	r0, [r7, #4]
 80007a4:	f002 f8a8 	bl	80028f8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	2208      	movs	r2, #8
 80007ae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4618      	mov	r0, r3
 80007b6:	f001 fdbe 	bl	8002336 <USB_ReadInterrupts>
 80007ba:	4603      	mov	r3, r0
 80007bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80007c0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80007c4:	d139      	bne.n	800083a <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	4618      	mov	r0, r3
 80007cc:	f001 fe32 	bl	8002434 <USB_HC_ReadInterrupt>
 80007d0:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80007d2:	2300      	movs	r3, #0
 80007d4:	617b      	str	r3, [r7, #20]
 80007d6:	e025      	b.n	8000824 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80007d8:	697b      	ldr	r3, [r7, #20]
 80007da:	f003 030f 	and.w	r3, r3, #15
 80007de:	68ba      	ldr	r2, [r7, #8]
 80007e0:	fa22 f303 	lsr.w	r3, r2, r3
 80007e4:	f003 0301 	and.w	r3, r3, #1
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d018      	beq.n	800081e <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80007ec:	697b      	ldr	r3, [r7, #20]
 80007ee:	015a      	lsls	r2, r3, #5
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	4413      	add	r3, r2
 80007f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80007fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000802:	d106      	bne.n	8000812 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8000804:	697b      	ldr	r3, [r7, #20]
 8000806:	b2db      	uxtb	r3, r3
 8000808:	4619      	mov	r1, r3
 800080a:	6878      	ldr	r0, [r7, #4]
 800080c:	f000 f859 	bl	80008c2 <HCD_HC_IN_IRQHandler>
 8000810:	e005      	b.n	800081e <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8000812:	697b      	ldr	r3, [r7, #20]
 8000814:	b2db      	uxtb	r3, r3
 8000816:	4619      	mov	r1, r3
 8000818:	6878      	ldr	r0, [r7, #4]
 800081a:	f000 febb 	bl	8001594 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800081e:	697b      	ldr	r3, [r7, #20]
 8000820:	3301      	adds	r3, #1
 8000822:	617b      	str	r3, [r7, #20]
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	795b      	ldrb	r3, [r3, #5]
 8000828:	461a      	mov	r2, r3
 800082a:	697b      	ldr	r3, [r7, #20]
 800082c:	4293      	cmp	r3, r2
 800082e:	d3d3      	bcc.n	80007d8 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000838:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	4618      	mov	r0, r3
 8000840:	f001 fd79 	bl	8002336 <USB_ReadInterrupts>
 8000844:	4603      	mov	r3, r0
 8000846:	f003 0310 	and.w	r3, r3, #16
 800084a:	2b10      	cmp	r3, #16
 800084c:	d101      	bne.n	8000852 <HAL_HCD_IRQHandler+0x1ea>
 800084e:	2301      	movs	r3, #1
 8000850:	e000      	b.n	8000854 <HAL_HCD_IRQHandler+0x1ec>
 8000852:	2300      	movs	r3, #0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d014      	beq.n	8000882 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	699a      	ldr	r2, [r3, #24]
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	f022 0210 	bic.w	r2, r2, #16
 8000866:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8000868:	6878      	ldr	r0, [r7, #4]
 800086a:	f001 fb38 	bl	8001ede <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	699a      	ldr	r2, [r3, #24]
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	f042 0210 	orr.w	r2, r2, #16
 800087c:	619a      	str	r2, [r3, #24]
 800087e:	e000      	b.n	8000882 <HAL_HCD_IRQHandler+0x21a>
      return;
 8000880:	bf00      	nop
    }
  }
}
 8000882:	3718      	adds	r7, #24
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}

08000888 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8000896:	2b01      	cmp	r3, #1
 8000898:	d101      	bne.n	800089e <HAL_HCD_Stop+0x16>
 800089a:	2302      	movs	r3, #2
 800089c:	e00d      	b.n	80008ba <HAL_HCD_Stop+0x32>
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	2201      	movs	r2, #1
 80008a2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	4618      	mov	r0, r3
 80008ac:	f001 fef3 	bl	8002696 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	2200      	movs	r2, #0
 80008b4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80008b8:	2300      	movs	r3, #0
}
 80008ba:	4618      	mov	r0, r3
 80008bc:	3708      	adds	r7, #8
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}

080008c2 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80008c2:	b580      	push	{r7, lr}
 80008c4:	b086      	sub	sp, #24
 80008c6:	af00      	add	r7, sp, #0
 80008c8:	6078      	str	r0, [r7, #4]
 80008ca:	460b      	mov	r3, r1
 80008cc:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80008d4:	697b      	ldr	r3, [r7, #20]
 80008d6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	78fa      	ldrb	r2, [r7, #3]
 80008de:	4611      	mov	r1, r2
 80008e0:	4618      	mov	r0, r3
 80008e2:	f001 fd3b 	bl	800235c <USB_ReadChInterrupts>
 80008e6:	4603      	mov	r3, r0
 80008e8:	f003 0304 	and.w	r3, r3, #4
 80008ec:	2b04      	cmp	r3, #4
 80008ee:	d11a      	bne.n	8000926 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80008f0:	78fb      	ldrb	r3, [r7, #3]
 80008f2:	015a      	lsls	r2, r3, #5
 80008f4:	693b      	ldr	r3, [r7, #16]
 80008f6:	4413      	add	r3, r2
 80008f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80008fc:	461a      	mov	r2, r3
 80008fe:	2304      	movs	r3, #4
 8000900:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8000902:	78fa      	ldrb	r2, [r7, #3]
 8000904:	6879      	ldr	r1, [r7, #4]
 8000906:	4613      	mov	r3, r2
 8000908:	011b      	lsls	r3, r3, #4
 800090a:	1a9b      	subs	r3, r3, r2
 800090c:	009b      	lsls	r3, r3, #2
 800090e:	440b      	add	r3, r1
 8000910:	334d      	adds	r3, #77	@ 0x4d
 8000912:	2207      	movs	r2, #7
 8000914:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	78fa      	ldrb	r2, [r7, #3]
 800091c:	4611      	mov	r1, r2
 800091e:	4618      	mov	r0, r3
 8000920:	f001 fd99 	bl	8002456 <USB_HC_Halt>
 8000924:	e09e      	b.n	8000a64 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	78fa      	ldrb	r2, [r7, #3]
 800092c:	4611      	mov	r1, r2
 800092e:	4618      	mov	r0, r3
 8000930:	f001 fd14 	bl	800235c <USB_ReadChInterrupts>
 8000934:	4603      	mov	r3, r0
 8000936:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800093a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800093e:	d11b      	bne.n	8000978 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8000940:	78fb      	ldrb	r3, [r7, #3]
 8000942:	015a      	lsls	r2, r3, #5
 8000944:	693b      	ldr	r3, [r7, #16]
 8000946:	4413      	add	r3, r2
 8000948:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800094c:	461a      	mov	r2, r3
 800094e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000952:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8000954:	78fa      	ldrb	r2, [r7, #3]
 8000956:	6879      	ldr	r1, [r7, #4]
 8000958:	4613      	mov	r3, r2
 800095a:	011b      	lsls	r3, r3, #4
 800095c:	1a9b      	subs	r3, r3, r2
 800095e:	009b      	lsls	r3, r3, #2
 8000960:	440b      	add	r3, r1
 8000962:	334d      	adds	r3, #77	@ 0x4d
 8000964:	2208      	movs	r2, #8
 8000966:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	78fa      	ldrb	r2, [r7, #3]
 800096e:	4611      	mov	r1, r2
 8000970:	4618      	mov	r0, r3
 8000972:	f001 fd70 	bl	8002456 <USB_HC_Halt>
 8000976:	e075      	b.n	8000a64 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	78fa      	ldrb	r2, [r7, #3]
 800097e:	4611      	mov	r1, r2
 8000980:	4618      	mov	r0, r3
 8000982:	f001 fceb 	bl	800235c <USB_ReadChInterrupts>
 8000986:	4603      	mov	r3, r0
 8000988:	f003 0308 	and.w	r3, r3, #8
 800098c:	2b08      	cmp	r3, #8
 800098e:	d11a      	bne.n	80009c6 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8000990:	78fb      	ldrb	r3, [r7, #3]
 8000992:	015a      	lsls	r2, r3, #5
 8000994:	693b      	ldr	r3, [r7, #16]
 8000996:	4413      	add	r3, r2
 8000998:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800099c:	461a      	mov	r2, r3
 800099e:	2308      	movs	r3, #8
 80009a0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80009a2:	78fa      	ldrb	r2, [r7, #3]
 80009a4:	6879      	ldr	r1, [r7, #4]
 80009a6:	4613      	mov	r3, r2
 80009a8:	011b      	lsls	r3, r3, #4
 80009aa:	1a9b      	subs	r3, r3, r2
 80009ac:	009b      	lsls	r3, r3, #2
 80009ae:	440b      	add	r3, r1
 80009b0:	334d      	adds	r3, #77	@ 0x4d
 80009b2:	2206      	movs	r2, #6
 80009b4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	78fa      	ldrb	r2, [r7, #3]
 80009bc:	4611      	mov	r1, r2
 80009be:	4618      	mov	r0, r3
 80009c0:	f001 fd49 	bl	8002456 <USB_HC_Halt>
 80009c4:	e04e      	b.n	8000a64 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	78fa      	ldrb	r2, [r7, #3]
 80009cc:	4611      	mov	r1, r2
 80009ce:	4618      	mov	r0, r3
 80009d0:	f001 fcc4 	bl	800235c <USB_ReadChInterrupts>
 80009d4:	4603      	mov	r3, r0
 80009d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80009da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80009de:	d11b      	bne.n	8000a18 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80009e0:	78fb      	ldrb	r3, [r7, #3]
 80009e2:	015a      	lsls	r2, r3, #5
 80009e4:	693b      	ldr	r3, [r7, #16]
 80009e6:	4413      	add	r3, r2
 80009e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80009ec:	461a      	mov	r2, r3
 80009ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009f2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80009f4:	78fa      	ldrb	r2, [r7, #3]
 80009f6:	6879      	ldr	r1, [r7, #4]
 80009f8:	4613      	mov	r3, r2
 80009fa:	011b      	lsls	r3, r3, #4
 80009fc:	1a9b      	subs	r3, r3, r2
 80009fe:	009b      	lsls	r3, r3, #2
 8000a00:	440b      	add	r3, r1
 8000a02:	334d      	adds	r3, #77	@ 0x4d
 8000a04:	2209      	movs	r2, #9
 8000a06:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	78fa      	ldrb	r2, [r7, #3]
 8000a0e:	4611      	mov	r1, r2
 8000a10:	4618      	mov	r0, r3
 8000a12:	f001 fd20 	bl	8002456 <USB_HC_Halt>
 8000a16:	e025      	b.n	8000a64 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	78fa      	ldrb	r2, [r7, #3]
 8000a1e:	4611      	mov	r1, r2
 8000a20:	4618      	mov	r0, r3
 8000a22:	f001 fc9b 	bl	800235c <USB_ReadChInterrupts>
 8000a26:	4603      	mov	r3, r0
 8000a28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a2c:	2b80      	cmp	r3, #128	@ 0x80
 8000a2e:	d119      	bne.n	8000a64 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8000a30:	78fb      	ldrb	r3, [r7, #3]
 8000a32:	015a      	lsls	r2, r3, #5
 8000a34:	693b      	ldr	r3, [r7, #16]
 8000a36:	4413      	add	r3, r2
 8000a38:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8000a3c:	461a      	mov	r2, r3
 8000a3e:	2380      	movs	r3, #128	@ 0x80
 8000a40:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8000a42:	78fa      	ldrb	r2, [r7, #3]
 8000a44:	6879      	ldr	r1, [r7, #4]
 8000a46:	4613      	mov	r3, r2
 8000a48:	011b      	lsls	r3, r3, #4
 8000a4a:	1a9b      	subs	r3, r3, r2
 8000a4c:	009b      	lsls	r3, r3, #2
 8000a4e:	440b      	add	r3, r1
 8000a50:	334d      	adds	r3, #77	@ 0x4d
 8000a52:	2207      	movs	r2, #7
 8000a54:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	78fa      	ldrb	r2, [r7, #3]
 8000a5c:	4611      	mov	r1, r2
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f001 fcf9 	bl	8002456 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	78fa      	ldrb	r2, [r7, #3]
 8000a6a:	4611      	mov	r1, r2
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f001 fc75 	bl	800235c <USB_ReadChInterrupts>
 8000a72:	4603      	mov	r3, r0
 8000a74:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000a78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000a7c:	d112      	bne.n	8000aa4 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	78fa      	ldrb	r2, [r7, #3]
 8000a84:	4611      	mov	r1, r2
 8000a86:	4618      	mov	r0, r3
 8000a88:	f001 fce5 	bl	8002456 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8000a8c:	78fb      	ldrb	r3, [r7, #3]
 8000a8e:	015a      	lsls	r2, r3, #5
 8000a90:	693b      	ldr	r3, [r7, #16]
 8000a92:	4413      	add	r3, r2
 8000a94:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8000a98:	461a      	mov	r2, r3
 8000a9a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a9e:	6093      	str	r3, [r2, #8]
 8000aa0:	f000 bd75 	b.w	800158e <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	78fa      	ldrb	r2, [r7, #3]
 8000aaa:	4611      	mov	r1, r2
 8000aac:	4618      	mov	r0, r3
 8000aae:	f001 fc55 	bl	800235c <USB_ReadChInterrupts>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	f003 0301 	and.w	r3, r3, #1
 8000ab8:	2b01      	cmp	r3, #1
 8000aba:	f040 8128 	bne.w	8000d0e <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8000abe:	78fb      	ldrb	r3, [r7, #3]
 8000ac0:	015a      	lsls	r2, r3, #5
 8000ac2:	693b      	ldr	r3, [r7, #16]
 8000ac4:	4413      	add	r3, r2
 8000ac6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8000aca:	461a      	mov	r2, r3
 8000acc:	2320      	movs	r3, #32
 8000ace:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8000ad0:	78fa      	ldrb	r2, [r7, #3]
 8000ad2:	6879      	ldr	r1, [r7, #4]
 8000ad4:	4613      	mov	r3, r2
 8000ad6:	011b      	lsls	r3, r3, #4
 8000ad8:	1a9b      	subs	r3, r3, r2
 8000ada:	009b      	lsls	r3, r3, #2
 8000adc:	440b      	add	r3, r1
 8000ade:	331b      	adds	r3, #27
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	2b01      	cmp	r3, #1
 8000ae4:	d119      	bne.n	8000b1a <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8000ae6:	78fa      	ldrb	r2, [r7, #3]
 8000ae8:	6879      	ldr	r1, [r7, #4]
 8000aea:	4613      	mov	r3, r2
 8000aec:	011b      	lsls	r3, r3, #4
 8000aee:	1a9b      	subs	r3, r3, r2
 8000af0:	009b      	lsls	r3, r3, #2
 8000af2:	440b      	add	r3, r1
 8000af4:	331b      	adds	r3, #27
 8000af6:	2200      	movs	r2, #0
 8000af8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8000afa:	78fb      	ldrb	r3, [r7, #3]
 8000afc:	015a      	lsls	r2, r3, #5
 8000afe:	693b      	ldr	r3, [r7, #16]
 8000b00:	4413      	add	r3, r2
 8000b02:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8000b06:	685b      	ldr	r3, [r3, #4]
 8000b08:	78fa      	ldrb	r2, [r7, #3]
 8000b0a:	0151      	lsls	r1, r2, #5
 8000b0c:	693a      	ldr	r2, [r7, #16]
 8000b0e:	440a      	add	r2, r1
 8000b10:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8000b14:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000b18:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	799b      	ldrb	r3, [r3, #6]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d01b      	beq.n	8000b5a <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8000b22:	78fa      	ldrb	r2, [r7, #3]
 8000b24:	6879      	ldr	r1, [r7, #4]
 8000b26:	4613      	mov	r3, r2
 8000b28:	011b      	lsls	r3, r3, #4
 8000b2a:	1a9b      	subs	r3, r3, r2
 8000b2c:	009b      	lsls	r3, r3, #2
 8000b2e:	440b      	add	r3, r1
 8000b30:	3330      	adds	r3, #48	@ 0x30
 8000b32:	6819      	ldr	r1, [r3, #0]
 8000b34:	78fb      	ldrb	r3, [r7, #3]
 8000b36:	015a      	lsls	r2, r3, #5
 8000b38:	693b      	ldr	r3, [r7, #16]
 8000b3a:	4413      	add	r3, r2
 8000b3c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8000b40:	691b      	ldr	r3, [r3, #16]
 8000b42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000b46:	78fa      	ldrb	r2, [r7, #3]
 8000b48:	1ac9      	subs	r1, r1, r3
 8000b4a:	6878      	ldr	r0, [r7, #4]
 8000b4c:	4613      	mov	r3, r2
 8000b4e:	011b      	lsls	r3, r3, #4
 8000b50:	1a9b      	subs	r3, r3, r2
 8000b52:	009b      	lsls	r3, r3, #2
 8000b54:	4403      	add	r3, r0
 8000b56:	3338      	adds	r3, #56	@ 0x38
 8000b58:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8000b5a:	78fa      	ldrb	r2, [r7, #3]
 8000b5c:	6879      	ldr	r1, [r7, #4]
 8000b5e:	4613      	mov	r3, r2
 8000b60:	011b      	lsls	r3, r3, #4
 8000b62:	1a9b      	subs	r3, r3, r2
 8000b64:	009b      	lsls	r3, r3, #2
 8000b66:	440b      	add	r3, r1
 8000b68:	334d      	adds	r3, #77	@ 0x4d
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8000b6e:	78fa      	ldrb	r2, [r7, #3]
 8000b70:	6879      	ldr	r1, [r7, #4]
 8000b72:	4613      	mov	r3, r2
 8000b74:	011b      	lsls	r3, r3, #4
 8000b76:	1a9b      	subs	r3, r3, r2
 8000b78:	009b      	lsls	r3, r3, #2
 8000b7a:	440b      	add	r3, r1
 8000b7c:	3344      	adds	r3, #68	@ 0x44
 8000b7e:	2200      	movs	r2, #0
 8000b80:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8000b82:	78fb      	ldrb	r3, [r7, #3]
 8000b84:	015a      	lsls	r2, r3, #5
 8000b86:	693b      	ldr	r3, [r7, #16]
 8000b88:	4413      	add	r3, r2
 8000b8a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8000b8e:	461a      	mov	r2, r3
 8000b90:	2301      	movs	r3, #1
 8000b92:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8000b94:	78fa      	ldrb	r2, [r7, #3]
 8000b96:	6879      	ldr	r1, [r7, #4]
 8000b98:	4613      	mov	r3, r2
 8000b9a:	011b      	lsls	r3, r3, #4
 8000b9c:	1a9b      	subs	r3, r3, r2
 8000b9e:	009b      	lsls	r3, r3, #2
 8000ba0:	440b      	add	r3, r1
 8000ba2:	3326      	adds	r3, #38	@ 0x26
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d00a      	beq.n	8000bc0 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8000baa:	78fa      	ldrb	r2, [r7, #3]
 8000bac:	6879      	ldr	r1, [r7, #4]
 8000bae:	4613      	mov	r3, r2
 8000bb0:	011b      	lsls	r3, r3, #4
 8000bb2:	1a9b      	subs	r3, r3, r2
 8000bb4:	009b      	lsls	r3, r3, #2
 8000bb6:	440b      	add	r3, r1
 8000bb8:	3326      	adds	r3, #38	@ 0x26
 8000bba:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8000bbc:	2b02      	cmp	r3, #2
 8000bbe:	d110      	bne.n	8000be2 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	78fa      	ldrb	r2, [r7, #3]
 8000bc6:	4611      	mov	r1, r2
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f001 fc44 	bl	8002456 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8000bce:	78fb      	ldrb	r3, [r7, #3]
 8000bd0:	015a      	lsls	r2, r3, #5
 8000bd2:	693b      	ldr	r3, [r7, #16]
 8000bd4:	4413      	add	r3, r2
 8000bd6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8000bda:	461a      	mov	r2, r3
 8000bdc:	2310      	movs	r3, #16
 8000bde:	6093      	str	r3, [r2, #8]
 8000be0:	e03d      	b.n	8000c5e <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8000be2:	78fa      	ldrb	r2, [r7, #3]
 8000be4:	6879      	ldr	r1, [r7, #4]
 8000be6:	4613      	mov	r3, r2
 8000be8:	011b      	lsls	r3, r3, #4
 8000bea:	1a9b      	subs	r3, r3, r2
 8000bec:	009b      	lsls	r3, r3, #2
 8000bee:	440b      	add	r3, r1
 8000bf0:	3326      	adds	r3, #38	@ 0x26
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	2b03      	cmp	r3, #3
 8000bf6:	d00a      	beq.n	8000c0e <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8000bf8:	78fa      	ldrb	r2, [r7, #3]
 8000bfa:	6879      	ldr	r1, [r7, #4]
 8000bfc:	4613      	mov	r3, r2
 8000bfe:	011b      	lsls	r3, r3, #4
 8000c00:	1a9b      	subs	r3, r3, r2
 8000c02:	009b      	lsls	r3, r3, #2
 8000c04:	440b      	add	r3, r1
 8000c06:	3326      	adds	r3, #38	@ 0x26
 8000c08:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8000c0a:	2b01      	cmp	r3, #1
 8000c0c:	d127      	bne.n	8000c5e <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8000c0e:	78fb      	ldrb	r3, [r7, #3]
 8000c10:	015a      	lsls	r2, r3, #5
 8000c12:	693b      	ldr	r3, [r7, #16]
 8000c14:	4413      	add	r3, r2
 8000c16:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	78fa      	ldrb	r2, [r7, #3]
 8000c1e:	0151      	lsls	r1, r2, #5
 8000c20:	693a      	ldr	r2, [r7, #16]
 8000c22:	440a      	add	r2, r1
 8000c24:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8000c28:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000c2c:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8000c2e:	78fa      	ldrb	r2, [r7, #3]
 8000c30:	6879      	ldr	r1, [r7, #4]
 8000c32:	4613      	mov	r3, r2
 8000c34:	011b      	lsls	r3, r3, #4
 8000c36:	1a9b      	subs	r3, r3, r2
 8000c38:	009b      	lsls	r3, r3, #2
 8000c3a:	440b      	add	r3, r1
 8000c3c:	334c      	adds	r3, #76	@ 0x4c
 8000c3e:	2201      	movs	r2, #1
 8000c40:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8000c42:	78fa      	ldrb	r2, [r7, #3]
 8000c44:	6879      	ldr	r1, [r7, #4]
 8000c46:	4613      	mov	r3, r2
 8000c48:	011b      	lsls	r3, r3, #4
 8000c4a:	1a9b      	subs	r3, r3, r2
 8000c4c:	009b      	lsls	r3, r3, #2
 8000c4e:	440b      	add	r3, r1
 8000c50:	334c      	adds	r3, #76	@ 0x4c
 8000c52:	781a      	ldrb	r2, [r3, #0]
 8000c54:	78fb      	ldrb	r3, [r7, #3]
 8000c56:	4619      	mov	r1, r3
 8000c58:	6878      	ldr	r0, [r7, #4]
 8000c5a:	f001 fe77 	bl	800294c <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	799b      	ldrb	r3, [r3, #6]
 8000c62:	2b01      	cmp	r3, #1
 8000c64:	d13b      	bne.n	8000cde <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8000c66:	78fa      	ldrb	r2, [r7, #3]
 8000c68:	6879      	ldr	r1, [r7, #4]
 8000c6a:	4613      	mov	r3, r2
 8000c6c:	011b      	lsls	r3, r3, #4
 8000c6e:	1a9b      	subs	r3, r3, r2
 8000c70:	009b      	lsls	r3, r3, #2
 8000c72:	440b      	add	r3, r1
 8000c74:	3338      	adds	r3, #56	@ 0x38
 8000c76:	6819      	ldr	r1, [r3, #0]
 8000c78:	78fa      	ldrb	r2, [r7, #3]
 8000c7a:	6878      	ldr	r0, [r7, #4]
 8000c7c:	4613      	mov	r3, r2
 8000c7e:	011b      	lsls	r3, r3, #4
 8000c80:	1a9b      	subs	r3, r3, r2
 8000c82:	009b      	lsls	r3, r3, #2
 8000c84:	4403      	add	r3, r0
 8000c86:	3328      	adds	r3, #40	@ 0x28
 8000c88:	881b      	ldrh	r3, [r3, #0]
 8000c8a:	440b      	add	r3, r1
 8000c8c:	1e59      	subs	r1, r3, #1
 8000c8e:	78fa      	ldrb	r2, [r7, #3]
 8000c90:	6878      	ldr	r0, [r7, #4]
 8000c92:	4613      	mov	r3, r2
 8000c94:	011b      	lsls	r3, r3, #4
 8000c96:	1a9b      	subs	r3, r3, r2
 8000c98:	009b      	lsls	r3, r3, #2
 8000c9a:	4403      	add	r3, r0
 8000c9c:	3328      	adds	r3, #40	@ 0x28
 8000c9e:	881b      	ldrh	r3, [r3, #0]
 8000ca0:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ca4:	f003 0301 	and.w	r3, r3, #1
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	f000 8470 	beq.w	800158e <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8000cae:	78fa      	ldrb	r2, [r7, #3]
 8000cb0:	6879      	ldr	r1, [r7, #4]
 8000cb2:	4613      	mov	r3, r2
 8000cb4:	011b      	lsls	r3, r3, #4
 8000cb6:	1a9b      	subs	r3, r3, r2
 8000cb8:	009b      	lsls	r3, r3, #2
 8000cba:	440b      	add	r3, r1
 8000cbc:	333c      	adds	r3, #60	@ 0x3c
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	78fa      	ldrb	r2, [r7, #3]
 8000cc2:	f083 0301 	eor.w	r3, r3, #1
 8000cc6:	b2d8      	uxtb	r0, r3
 8000cc8:	6879      	ldr	r1, [r7, #4]
 8000cca:	4613      	mov	r3, r2
 8000ccc:	011b      	lsls	r3, r3, #4
 8000cce:	1a9b      	subs	r3, r3, r2
 8000cd0:	009b      	lsls	r3, r3, #2
 8000cd2:	440b      	add	r3, r1
 8000cd4:	333c      	adds	r3, #60	@ 0x3c
 8000cd6:	4602      	mov	r2, r0
 8000cd8:	701a      	strb	r2, [r3, #0]
 8000cda:	f000 bc58 	b.w	800158e <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8000cde:	78fa      	ldrb	r2, [r7, #3]
 8000ce0:	6879      	ldr	r1, [r7, #4]
 8000ce2:	4613      	mov	r3, r2
 8000ce4:	011b      	lsls	r3, r3, #4
 8000ce6:	1a9b      	subs	r3, r3, r2
 8000ce8:	009b      	lsls	r3, r3, #2
 8000cea:	440b      	add	r3, r1
 8000cec:	333c      	adds	r3, #60	@ 0x3c
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	78fa      	ldrb	r2, [r7, #3]
 8000cf2:	f083 0301 	eor.w	r3, r3, #1
 8000cf6:	b2d8      	uxtb	r0, r3
 8000cf8:	6879      	ldr	r1, [r7, #4]
 8000cfa:	4613      	mov	r3, r2
 8000cfc:	011b      	lsls	r3, r3, #4
 8000cfe:	1a9b      	subs	r3, r3, r2
 8000d00:	009b      	lsls	r3, r3, #2
 8000d02:	440b      	add	r3, r1
 8000d04:	333c      	adds	r3, #60	@ 0x3c
 8000d06:	4602      	mov	r2, r0
 8000d08:	701a      	strb	r2, [r3, #0]
 8000d0a:	f000 bc40 	b.w	800158e <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	78fa      	ldrb	r2, [r7, #3]
 8000d14:	4611      	mov	r1, r2
 8000d16:	4618      	mov	r0, r3
 8000d18:	f001 fb20 	bl	800235c <USB_ReadChInterrupts>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	f003 0320 	and.w	r3, r3, #32
 8000d22:	2b20      	cmp	r3, #32
 8000d24:	d131      	bne.n	8000d8a <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8000d26:	78fb      	ldrb	r3, [r7, #3]
 8000d28:	015a      	lsls	r2, r3, #5
 8000d2a:	693b      	ldr	r3, [r7, #16]
 8000d2c:	4413      	add	r3, r2
 8000d2e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8000d32:	461a      	mov	r2, r3
 8000d34:	2320      	movs	r3, #32
 8000d36:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8000d38:	78fa      	ldrb	r2, [r7, #3]
 8000d3a:	6879      	ldr	r1, [r7, #4]
 8000d3c:	4613      	mov	r3, r2
 8000d3e:	011b      	lsls	r3, r3, #4
 8000d40:	1a9b      	subs	r3, r3, r2
 8000d42:	009b      	lsls	r3, r3, #2
 8000d44:	440b      	add	r3, r1
 8000d46:	331a      	adds	r3, #26
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	2b01      	cmp	r3, #1
 8000d4c:	f040 841f 	bne.w	800158e <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8000d50:	78fa      	ldrb	r2, [r7, #3]
 8000d52:	6879      	ldr	r1, [r7, #4]
 8000d54:	4613      	mov	r3, r2
 8000d56:	011b      	lsls	r3, r3, #4
 8000d58:	1a9b      	subs	r3, r3, r2
 8000d5a:	009b      	lsls	r3, r3, #2
 8000d5c:	440b      	add	r3, r1
 8000d5e:	331b      	adds	r3, #27
 8000d60:	2201      	movs	r2, #1
 8000d62:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8000d64:	78fa      	ldrb	r2, [r7, #3]
 8000d66:	6879      	ldr	r1, [r7, #4]
 8000d68:	4613      	mov	r3, r2
 8000d6a:	011b      	lsls	r3, r3, #4
 8000d6c:	1a9b      	subs	r3, r3, r2
 8000d6e:	009b      	lsls	r3, r3, #2
 8000d70:	440b      	add	r3, r1
 8000d72:	334d      	adds	r3, #77	@ 0x4d
 8000d74:	2203      	movs	r2, #3
 8000d76:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	78fa      	ldrb	r2, [r7, #3]
 8000d7e:	4611      	mov	r1, r2
 8000d80:	4618      	mov	r0, r3
 8000d82:	f001 fb68 	bl	8002456 <USB_HC_Halt>
 8000d86:	f000 bc02 	b.w	800158e <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	78fa      	ldrb	r2, [r7, #3]
 8000d90:	4611      	mov	r1, r2
 8000d92:	4618      	mov	r0, r3
 8000d94:	f001 fae2 	bl	800235c <USB_ReadChInterrupts>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	f003 0302 	and.w	r3, r3, #2
 8000d9e:	2b02      	cmp	r3, #2
 8000da0:	f040 8305 	bne.w	80013ae <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8000da4:	78fb      	ldrb	r3, [r7, #3]
 8000da6:	015a      	lsls	r2, r3, #5
 8000da8:	693b      	ldr	r3, [r7, #16]
 8000daa:	4413      	add	r3, r2
 8000dac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8000db0:	461a      	mov	r2, r3
 8000db2:	2302      	movs	r3, #2
 8000db4:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8000db6:	78fa      	ldrb	r2, [r7, #3]
 8000db8:	6879      	ldr	r1, [r7, #4]
 8000dba:	4613      	mov	r3, r2
 8000dbc:	011b      	lsls	r3, r3, #4
 8000dbe:	1a9b      	subs	r3, r3, r2
 8000dc0:	009b      	lsls	r3, r3, #2
 8000dc2:	440b      	add	r3, r1
 8000dc4:	334d      	adds	r3, #77	@ 0x4d
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	2b01      	cmp	r3, #1
 8000dca:	d114      	bne.n	8000df6 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8000dcc:	78fa      	ldrb	r2, [r7, #3]
 8000dce:	6879      	ldr	r1, [r7, #4]
 8000dd0:	4613      	mov	r3, r2
 8000dd2:	011b      	lsls	r3, r3, #4
 8000dd4:	1a9b      	subs	r3, r3, r2
 8000dd6:	009b      	lsls	r3, r3, #2
 8000dd8:	440b      	add	r3, r1
 8000dda:	334d      	adds	r3, #77	@ 0x4d
 8000ddc:	2202      	movs	r2, #2
 8000dde:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8000de0:	78fa      	ldrb	r2, [r7, #3]
 8000de2:	6879      	ldr	r1, [r7, #4]
 8000de4:	4613      	mov	r3, r2
 8000de6:	011b      	lsls	r3, r3, #4
 8000de8:	1a9b      	subs	r3, r3, r2
 8000dea:	009b      	lsls	r3, r3, #2
 8000dec:	440b      	add	r3, r1
 8000dee:	334c      	adds	r3, #76	@ 0x4c
 8000df0:	2201      	movs	r2, #1
 8000df2:	701a      	strb	r2, [r3, #0]
 8000df4:	e2cc      	b.n	8001390 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8000df6:	78fa      	ldrb	r2, [r7, #3]
 8000df8:	6879      	ldr	r1, [r7, #4]
 8000dfa:	4613      	mov	r3, r2
 8000dfc:	011b      	lsls	r3, r3, #4
 8000dfe:	1a9b      	subs	r3, r3, r2
 8000e00:	009b      	lsls	r3, r3, #2
 8000e02:	440b      	add	r3, r1
 8000e04:	334d      	adds	r3, #77	@ 0x4d
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	2b06      	cmp	r3, #6
 8000e0a:	d114      	bne.n	8000e36 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8000e0c:	78fa      	ldrb	r2, [r7, #3]
 8000e0e:	6879      	ldr	r1, [r7, #4]
 8000e10:	4613      	mov	r3, r2
 8000e12:	011b      	lsls	r3, r3, #4
 8000e14:	1a9b      	subs	r3, r3, r2
 8000e16:	009b      	lsls	r3, r3, #2
 8000e18:	440b      	add	r3, r1
 8000e1a:	334d      	adds	r3, #77	@ 0x4d
 8000e1c:	2202      	movs	r2, #2
 8000e1e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8000e20:	78fa      	ldrb	r2, [r7, #3]
 8000e22:	6879      	ldr	r1, [r7, #4]
 8000e24:	4613      	mov	r3, r2
 8000e26:	011b      	lsls	r3, r3, #4
 8000e28:	1a9b      	subs	r3, r3, r2
 8000e2a:	009b      	lsls	r3, r3, #2
 8000e2c:	440b      	add	r3, r1
 8000e2e:	334c      	adds	r3, #76	@ 0x4c
 8000e30:	2205      	movs	r2, #5
 8000e32:	701a      	strb	r2, [r3, #0]
 8000e34:	e2ac      	b.n	8001390 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8000e36:	78fa      	ldrb	r2, [r7, #3]
 8000e38:	6879      	ldr	r1, [r7, #4]
 8000e3a:	4613      	mov	r3, r2
 8000e3c:	011b      	lsls	r3, r3, #4
 8000e3e:	1a9b      	subs	r3, r3, r2
 8000e40:	009b      	lsls	r3, r3, #2
 8000e42:	440b      	add	r3, r1
 8000e44:	334d      	adds	r3, #77	@ 0x4d
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	2b07      	cmp	r3, #7
 8000e4a:	d00b      	beq.n	8000e64 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8000e4c:	78fa      	ldrb	r2, [r7, #3]
 8000e4e:	6879      	ldr	r1, [r7, #4]
 8000e50:	4613      	mov	r3, r2
 8000e52:	011b      	lsls	r3, r3, #4
 8000e54:	1a9b      	subs	r3, r3, r2
 8000e56:	009b      	lsls	r3, r3, #2
 8000e58:	440b      	add	r3, r1
 8000e5a:	334d      	adds	r3, #77	@ 0x4d
 8000e5c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8000e5e:	2b09      	cmp	r3, #9
 8000e60:	f040 80a6 	bne.w	8000fb0 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8000e64:	78fa      	ldrb	r2, [r7, #3]
 8000e66:	6879      	ldr	r1, [r7, #4]
 8000e68:	4613      	mov	r3, r2
 8000e6a:	011b      	lsls	r3, r3, #4
 8000e6c:	1a9b      	subs	r3, r3, r2
 8000e6e:	009b      	lsls	r3, r3, #2
 8000e70:	440b      	add	r3, r1
 8000e72:	334d      	adds	r3, #77	@ 0x4d
 8000e74:	2202      	movs	r2, #2
 8000e76:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8000e78:	78fa      	ldrb	r2, [r7, #3]
 8000e7a:	6879      	ldr	r1, [r7, #4]
 8000e7c:	4613      	mov	r3, r2
 8000e7e:	011b      	lsls	r3, r3, #4
 8000e80:	1a9b      	subs	r3, r3, r2
 8000e82:	009b      	lsls	r3, r3, #2
 8000e84:	440b      	add	r3, r1
 8000e86:	3344      	adds	r3, #68	@ 0x44
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	1c59      	adds	r1, r3, #1
 8000e8c:	6878      	ldr	r0, [r7, #4]
 8000e8e:	4613      	mov	r3, r2
 8000e90:	011b      	lsls	r3, r3, #4
 8000e92:	1a9b      	subs	r3, r3, r2
 8000e94:	009b      	lsls	r3, r3, #2
 8000e96:	4403      	add	r3, r0
 8000e98:	3344      	adds	r3, #68	@ 0x44
 8000e9a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8000e9c:	78fa      	ldrb	r2, [r7, #3]
 8000e9e:	6879      	ldr	r1, [r7, #4]
 8000ea0:	4613      	mov	r3, r2
 8000ea2:	011b      	lsls	r3, r3, #4
 8000ea4:	1a9b      	subs	r3, r3, r2
 8000ea6:	009b      	lsls	r3, r3, #2
 8000ea8:	440b      	add	r3, r1
 8000eaa:	3344      	adds	r3, #68	@ 0x44
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	2b02      	cmp	r3, #2
 8000eb0:	d943      	bls.n	8000f3a <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8000eb2:	78fa      	ldrb	r2, [r7, #3]
 8000eb4:	6879      	ldr	r1, [r7, #4]
 8000eb6:	4613      	mov	r3, r2
 8000eb8:	011b      	lsls	r3, r3, #4
 8000eba:	1a9b      	subs	r3, r3, r2
 8000ebc:	009b      	lsls	r3, r3, #2
 8000ebe:	440b      	add	r3, r1
 8000ec0:	3344      	adds	r3, #68	@ 0x44
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8000ec6:	78fa      	ldrb	r2, [r7, #3]
 8000ec8:	6879      	ldr	r1, [r7, #4]
 8000eca:	4613      	mov	r3, r2
 8000ecc:	011b      	lsls	r3, r3, #4
 8000ece:	1a9b      	subs	r3, r3, r2
 8000ed0:	009b      	lsls	r3, r3, #2
 8000ed2:	440b      	add	r3, r1
 8000ed4:	331a      	adds	r3, #26
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	2b01      	cmp	r3, #1
 8000eda:	d123      	bne.n	8000f24 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8000edc:	78fa      	ldrb	r2, [r7, #3]
 8000ede:	6879      	ldr	r1, [r7, #4]
 8000ee0:	4613      	mov	r3, r2
 8000ee2:	011b      	lsls	r3, r3, #4
 8000ee4:	1a9b      	subs	r3, r3, r2
 8000ee6:	009b      	lsls	r3, r3, #2
 8000ee8:	440b      	add	r3, r1
 8000eea:	331b      	adds	r3, #27
 8000eec:	2200      	movs	r2, #0
 8000eee:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8000ef0:	78fa      	ldrb	r2, [r7, #3]
 8000ef2:	6879      	ldr	r1, [r7, #4]
 8000ef4:	4613      	mov	r3, r2
 8000ef6:	011b      	lsls	r3, r3, #4
 8000ef8:	1a9b      	subs	r3, r3, r2
 8000efa:	009b      	lsls	r3, r3, #2
 8000efc:	440b      	add	r3, r1
 8000efe:	331c      	adds	r3, #28
 8000f00:	2200      	movs	r2, #0
 8000f02:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8000f04:	78fb      	ldrb	r3, [r7, #3]
 8000f06:	015a      	lsls	r2, r3, #5
 8000f08:	693b      	ldr	r3, [r7, #16]
 8000f0a:	4413      	add	r3, r2
 8000f0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	78fa      	ldrb	r2, [r7, #3]
 8000f14:	0151      	lsls	r1, r2, #5
 8000f16:	693a      	ldr	r2, [r7, #16]
 8000f18:	440a      	add	r2, r1
 8000f1a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8000f1e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000f22:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8000f24:	78fa      	ldrb	r2, [r7, #3]
 8000f26:	6879      	ldr	r1, [r7, #4]
 8000f28:	4613      	mov	r3, r2
 8000f2a:	011b      	lsls	r3, r3, #4
 8000f2c:	1a9b      	subs	r3, r3, r2
 8000f2e:	009b      	lsls	r3, r3, #2
 8000f30:	440b      	add	r3, r1
 8000f32:	334c      	adds	r3, #76	@ 0x4c
 8000f34:	2204      	movs	r2, #4
 8000f36:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8000f38:	e229      	b.n	800138e <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8000f3a:	78fa      	ldrb	r2, [r7, #3]
 8000f3c:	6879      	ldr	r1, [r7, #4]
 8000f3e:	4613      	mov	r3, r2
 8000f40:	011b      	lsls	r3, r3, #4
 8000f42:	1a9b      	subs	r3, r3, r2
 8000f44:	009b      	lsls	r3, r3, #2
 8000f46:	440b      	add	r3, r1
 8000f48:	334c      	adds	r3, #76	@ 0x4c
 8000f4a:	2202      	movs	r2, #2
 8000f4c:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8000f4e:	78fa      	ldrb	r2, [r7, #3]
 8000f50:	6879      	ldr	r1, [r7, #4]
 8000f52:	4613      	mov	r3, r2
 8000f54:	011b      	lsls	r3, r3, #4
 8000f56:	1a9b      	subs	r3, r3, r2
 8000f58:	009b      	lsls	r3, r3, #2
 8000f5a:	440b      	add	r3, r1
 8000f5c:	3326      	adds	r3, #38	@ 0x26
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d00b      	beq.n	8000f7c <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8000f64:	78fa      	ldrb	r2, [r7, #3]
 8000f66:	6879      	ldr	r1, [r7, #4]
 8000f68:	4613      	mov	r3, r2
 8000f6a:	011b      	lsls	r3, r3, #4
 8000f6c:	1a9b      	subs	r3, r3, r2
 8000f6e:	009b      	lsls	r3, r3, #2
 8000f70:	440b      	add	r3, r1
 8000f72:	3326      	adds	r3, #38	@ 0x26
 8000f74:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8000f76:	2b02      	cmp	r3, #2
 8000f78:	f040 8209 	bne.w	800138e <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8000f7c:	78fb      	ldrb	r3, [r7, #3]
 8000f7e:	015a      	lsls	r2, r3, #5
 8000f80:	693b      	ldr	r3, [r7, #16]
 8000f82:	4413      	add	r3, r2
 8000f84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8000f92:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000f9a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8000f9c:	78fb      	ldrb	r3, [r7, #3]
 8000f9e:	015a      	lsls	r2, r3, #5
 8000fa0:	693b      	ldr	r3, [r7, #16]
 8000fa2:	4413      	add	r3, r2
 8000fa4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8000fa8:	461a      	mov	r2, r3
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8000fae:	e1ee      	b.n	800138e <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8000fb0:	78fa      	ldrb	r2, [r7, #3]
 8000fb2:	6879      	ldr	r1, [r7, #4]
 8000fb4:	4613      	mov	r3, r2
 8000fb6:	011b      	lsls	r3, r3, #4
 8000fb8:	1a9b      	subs	r3, r3, r2
 8000fba:	009b      	lsls	r3, r3, #2
 8000fbc:	440b      	add	r3, r1
 8000fbe:	334d      	adds	r3, #77	@ 0x4d
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	2b05      	cmp	r3, #5
 8000fc4:	f040 80c8 	bne.w	8001158 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8000fc8:	78fa      	ldrb	r2, [r7, #3]
 8000fca:	6879      	ldr	r1, [r7, #4]
 8000fcc:	4613      	mov	r3, r2
 8000fce:	011b      	lsls	r3, r3, #4
 8000fd0:	1a9b      	subs	r3, r3, r2
 8000fd2:	009b      	lsls	r3, r3, #2
 8000fd4:	440b      	add	r3, r1
 8000fd6:	334d      	adds	r3, #77	@ 0x4d
 8000fd8:	2202      	movs	r2, #2
 8000fda:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8000fdc:	78fa      	ldrb	r2, [r7, #3]
 8000fde:	6879      	ldr	r1, [r7, #4]
 8000fe0:	4613      	mov	r3, r2
 8000fe2:	011b      	lsls	r3, r3, #4
 8000fe4:	1a9b      	subs	r3, r3, r2
 8000fe6:	009b      	lsls	r3, r3, #2
 8000fe8:	440b      	add	r3, r1
 8000fea:	331b      	adds	r3, #27
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	2b01      	cmp	r3, #1
 8000ff0:	f040 81ce 	bne.w	8001390 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8000ff4:	78fa      	ldrb	r2, [r7, #3]
 8000ff6:	6879      	ldr	r1, [r7, #4]
 8000ff8:	4613      	mov	r3, r2
 8000ffa:	011b      	lsls	r3, r3, #4
 8000ffc:	1a9b      	subs	r3, r3, r2
 8000ffe:	009b      	lsls	r3, r3, #2
 8001000:	440b      	add	r3, r1
 8001002:	3326      	adds	r3, #38	@ 0x26
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	2b03      	cmp	r3, #3
 8001008:	d16b      	bne.n	80010e2 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 800100a:	78fa      	ldrb	r2, [r7, #3]
 800100c:	6879      	ldr	r1, [r7, #4]
 800100e:	4613      	mov	r3, r2
 8001010:	011b      	lsls	r3, r3, #4
 8001012:	1a9b      	subs	r3, r3, r2
 8001014:	009b      	lsls	r3, r3, #2
 8001016:	440b      	add	r3, r1
 8001018:	3348      	adds	r3, #72	@ 0x48
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	1c59      	adds	r1, r3, #1
 800101e:	6878      	ldr	r0, [r7, #4]
 8001020:	4613      	mov	r3, r2
 8001022:	011b      	lsls	r3, r3, #4
 8001024:	1a9b      	subs	r3, r3, r2
 8001026:	009b      	lsls	r3, r3, #2
 8001028:	4403      	add	r3, r0
 800102a:	3348      	adds	r3, #72	@ 0x48
 800102c:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 800102e:	78fa      	ldrb	r2, [r7, #3]
 8001030:	6879      	ldr	r1, [r7, #4]
 8001032:	4613      	mov	r3, r2
 8001034:	011b      	lsls	r3, r3, #4
 8001036:	1a9b      	subs	r3, r3, r2
 8001038:	009b      	lsls	r3, r3, #2
 800103a:	440b      	add	r3, r1
 800103c:	3348      	adds	r3, #72	@ 0x48
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	2b02      	cmp	r3, #2
 8001042:	d943      	bls.n	80010cc <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8001044:	78fa      	ldrb	r2, [r7, #3]
 8001046:	6879      	ldr	r1, [r7, #4]
 8001048:	4613      	mov	r3, r2
 800104a:	011b      	lsls	r3, r3, #4
 800104c:	1a9b      	subs	r3, r3, r2
 800104e:	009b      	lsls	r3, r3, #2
 8001050:	440b      	add	r3, r1
 8001052:	3348      	adds	r3, #72	@ 0x48
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8001058:	78fa      	ldrb	r2, [r7, #3]
 800105a:	6879      	ldr	r1, [r7, #4]
 800105c:	4613      	mov	r3, r2
 800105e:	011b      	lsls	r3, r3, #4
 8001060:	1a9b      	subs	r3, r3, r2
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	440b      	add	r3, r1
 8001066:	331b      	adds	r3, #27
 8001068:	2200      	movs	r2, #0
 800106a:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 800106c:	78fa      	ldrb	r2, [r7, #3]
 800106e:	6879      	ldr	r1, [r7, #4]
 8001070:	4613      	mov	r3, r2
 8001072:	011b      	lsls	r3, r3, #4
 8001074:	1a9b      	subs	r3, r3, r2
 8001076:	009b      	lsls	r3, r3, #2
 8001078:	440b      	add	r3, r1
 800107a:	3344      	adds	r3, #68	@ 0x44
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	2b02      	cmp	r3, #2
 8001080:	d809      	bhi.n	8001096 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8001082:	78fa      	ldrb	r2, [r7, #3]
 8001084:	6879      	ldr	r1, [r7, #4]
 8001086:	4613      	mov	r3, r2
 8001088:	011b      	lsls	r3, r3, #4
 800108a:	1a9b      	subs	r3, r3, r2
 800108c:	009b      	lsls	r3, r3, #2
 800108e:	440b      	add	r3, r1
 8001090:	331c      	adds	r3, #28
 8001092:	2201      	movs	r2, #1
 8001094:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8001096:	78fb      	ldrb	r3, [r7, #3]
 8001098:	015a      	lsls	r2, r3, #5
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	4413      	add	r3, r2
 800109e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	78fa      	ldrb	r2, [r7, #3]
 80010a6:	0151      	lsls	r1, r2, #5
 80010a8:	693a      	ldr	r2, [r7, #16]
 80010aa:	440a      	add	r2, r1
 80010ac:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80010b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80010b4:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80010b6:	78fa      	ldrb	r2, [r7, #3]
 80010b8:	6879      	ldr	r1, [r7, #4]
 80010ba:	4613      	mov	r3, r2
 80010bc:	011b      	lsls	r3, r3, #4
 80010be:	1a9b      	subs	r3, r3, r2
 80010c0:	009b      	lsls	r3, r3, #2
 80010c2:	440b      	add	r3, r1
 80010c4:	334c      	adds	r3, #76	@ 0x4c
 80010c6:	2204      	movs	r2, #4
 80010c8:	701a      	strb	r2, [r3, #0]
 80010ca:	e014      	b.n	80010f6 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80010cc:	78fa      	ldrb	r2, [r7, #3]
 80010ce:	6879      	ldr	r1, [r7, #4]
 80010d0:	4613      	mov	r3, r2
 80010d2:	011b      	lsls	r3, r3, #4
 80010d4:	1a9b      	subs	r3, r3, r2
 80010d6:	009b      	lsls	r3, r3, #2
 80010d8:	440b      	add	r3, r1
 80010da:	334c      	adds	r3, #76	@ 0x4c
 80010dc:	2202      	movs	r2, #2
 80010de:	701a      	strb	r2, [r3, #0]
 80010e0:	e009      	b.n	80010f6 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80010e2:	78fa      	ldrb	r2, [r7, #3]
 80010e4:	6879      	ldr	r1, [r7, #4]
 80010e6:	4613      	mov	r3, r2
 80010e8:	011b      	lsls	r3, r3, #4
 80010ea:	1a9b      	subs	r3, r3, r2
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	440b      	add	r3, r1
 80010f0:	334c      	adds	r3, #76	@ 0x4c
 80010f2:	2202      	movs	r2, #2
 80010f4:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80010f6:	78fa      	ldrb	r2, [r7, #3]
 80010f8:	6879      	ldr	r1, [r7, #4]
 80010fa:	4613      	mov	r3, r2
 80010fc:	011b      	lsls	r3, r3, #4
 80010fe:	1a9b      	subs	r3, r3, r2
 8001100:	009b      	lsls	r3, r3, #2
 8001102:	440b      	add	r3, r1
 8001104:	3326      	adds	r3, #38	@ 0x26
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d00b      	beq.n	8001124 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800110c:	78fa      	ldrb	r2, [r7, #3]
 800110e:	6879      	ldr	r1, [r7, #4]
 8001110:	4613      	mov	r3, r2
 8001112:	011b      	lsls	r3, r3, #4
 8001114:	1a9b      	subs	r3, r3, r2
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	440b      	add	r3, r1
 800111a:	3326      	adds	r3, #38	@ 0x26
 800111c:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800111e:	2b02      	cmp	r3, #2
 8001120:	f040 8136 	bne.w	8001390 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8001124:	78fb      	ldrb	r3, [r7, #3]
 8001126:	015a      	lsls	r2, r3, #5
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	4413      	add	r3, r2
 800112c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800113a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001142:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8001144:	78fb      	ldrb	r3, [r7, #3]
 8001146:	015a      	lsls	r2, r3, #5
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	4413      	add	r3, r2
 800114c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001150:	461a      	mov	r2, r3
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	6013      	str	r3, [r2, #0]
 8001156:	e11b      	b.n	8001390 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8001158:	78fa      	ldrb	r2, [r7, #3]
 800115a:	6879      	ldr	r1, [r7, #4]
 800115c:	4613      	mov	r3, r2
 800115e:	011b      	lsls	r3, r3, #4
 8001160:	1a9b      	subs	r3, r3, r2
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	440b      	add	r3, r1
 8001166:	334d      	adds	r3, #77	@ 0x4d
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	2b03      	cmp	r3, #3
 800116c:	f040 8081 	bne.w	8001272 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001170:	78fa      	ldrb	r2, [r7, #3]
 8001172:	6879      	ldr	r1, [r7, #4]
 8001174:	4613      	mov	r3, r2
 8001176:	011b      	lsls	r3, r3, #4
 8001178:	1a9b      	subs	r3, r3, r2
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	440b      	add	r3, r1
 800117e:	334d      	adds	r3, #77	@ 0x4d
 8001180:	2202      	movs	r2, #2
 8001182:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8001184:	78fa      	ldrb	r2, [r7, #3]
 8001186:	6879      	ldr	r1, [r7, #4]
 8001188:	4613      	mov	r3, r2
 800118a:	011b      	lsls	r3, r3, #4
 800118c:	1a9b      	subs	r3, r3, r2
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	440b      	add	r3, r1
 8001192:	331b      	adds	r3, #27
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	2b01      	cmp	r3, #1
 8001198:	f040 80fa 	bne.w	8001390 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800119c:	78fa      	ldrb	r2, [r7, #3]
 800119e:	6879      	ldr	r1, [r7, #4]
 80011a0:	4613      	mov	r3, r2
 80011a2:	011b      	lsls	r3, r3, #4
 80011a4:	1a9b      	subs	r3, r3, r2
 80011a6:	009b      	lsls	r3, r3, #2
 80011a8:	440b      	add	r3, r1
 80011aa:	334c      	adds	r3, #76	@ 0x4c
 80011ac:	2202      	movs	r2, #2
 80011ae:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80011b0:	78fb      	ldrb	r3, [r7, #3]
 80011b2:	015a      	lsls	r2, r3, #5
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	4413      	add	r3, r2
 80011b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	78fa      	ldrb	r2, [r7, #3]
 80011c0:	0151      	lsls	r1, r2, #5
 80011c2:	693a      	ldr	r2, [r7, #16]
 80011c4:	440a      	add	r2, r1
 80011c6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80011ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011ce:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80011d0:	78fb      	ldrb	r3, [r7, #3]
 80011d2:	015a      	lsls	r2, r3, #5
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	4413      	add	r3, r2
 80011d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80011dc:	68db      	ldr	r3, [r3, #12]
 80011de:	78fa      	ldrb	r2, [r7, #3]
 80011e0:	0151      	lsls	r1, r2, #5
 80011e2:	693a      	ldr	r2, [r7, #16]
 80011e4:	440a      	add	r2, r1
 80011e6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80011ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80011ee:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 80011f0:	78fb      	ldrb	r3, [r7, #3]
 80011f2:	015a      	lsls	r2, r3, #5
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	4413      	add	r3, r2
 80011f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80011fc:	68db      	ldr	r3, [r3, #12]
 80011fe:	78fa      	ldrb	r2, [r7, #3]
 8001200:	0151      	lsls	r1, r2, #5
 8001202:	693a      	ldr	r2, [r7, #16]
 8001204:	440a      	add	r2, r1
 8001206:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800120a:	f023 0320 	bic.w	r3, r3, #32
 800120e:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001210:	78fa      	ldrb	r2, [r7, #3]
 8001212:	6879      	ldr	r1, [r7, #4]
 8001214:	4613      	mov	r3, r2
 8001216:	011b      	lsls	r3, r3, #4
 8001218:	1a9b      	subs	r3, r3, r2
 800121a:	009b      	lsls	r3, r3, #2
 800121c:	440b      	add	r3, r1
 800121e:	3326      	adds	r3, #38	@ 0x26
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d00b      	beq.n	800123e <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8001226:	78fa      	ldrb	r2, [r7, #3]
 8001228:	6879      	ldr	r1, [r7, #4]
 800122a:	4613      	mov	r3, r2
 800122c:	011b      	lsls	r3, r3, #4
 800122e:	1a9b      	subs	r3, r3, r2
 8001230:	009b      	lsls	r3, r3, #2
 8001232:	440b      	add	r3, r1
 8001234:	3326      	adds	r3, #38	@ 0x26
 8001236:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001238:	2b02      	cmp	r3, #2
 800123a:	f040 80a9 	bne.w	8001390 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800123e:	78fb      	ldrb	r3, [r7, #3]
 8001240:	015a      	lsls	r2, r3, #5
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	4413      	add	r3, r2
 8001246:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8001254:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800125c:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800125e:	78fb      	ldrb	r3, [r7, #3]
 8001260:	015a      	lsls	r2, r3, #5
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	4413      	add	r3, r2
 8001266:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800126a:	461a      	mov	r2, r3
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	6013      	str	r3, [r2, #0]
 8001270:	e08e      	b.n	8001390 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8001272:	78fa      	ldrb	r2, [r7, #3]
 8001274:	6879      	ldr	r1, [r7, #4]
 8001276:	4613      	mov	r3, r2
 8001278:	011b      	lsls	r3, r3, #4
 800127a:	1a9b      	subs	r3, r3, r2
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	440b      	add	r3, r1
 8001280:	334d      	adds	r3, #77	@ 0x4d
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	2b04      	cmp	r3, #4
 8001286:	d143      	bne.n	8001310 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001288:	78fa      	ldrb	r2, [r7, #3]
 800128a:	6879      	ldr	r1, [r7, #4]
 800128c:	4613      	mov	r3, r2
 800128e:	011b      	lsls	r3, r3, #4
 8001290:	1a9b      	subs	r3, r3, r2
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	440b      	add	r3, r1
 8001296:	334d      	adds	r3, #77	@ 0x4d
 8001298:	2202      	movs	r2, #2
 800129a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800129c:	78fa      	ldrb	r2, [r7, #3]
 800129e:	6879      	ldr	r1, [r7, #4]
 80012a0:	4613      	mov	r3, r2
 80012a2:	011b      	lsls	r3, r3, #4
 80012a4:	1a9b      	subs	r3, r3, r2
 80012a6:	009b      	lsls	r3, r3, #2
 80012a8:	440b      	add	r3, r1
 80012aa:	334c      	adds	r3, #76	@ 0x4c
 80012ac:	2202      	movs	r2, #2
 80012ae:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80012b0:	78fa      	ldrb	r2, [r7, #3]
 80012b2:	6879      	ldr	r1, [r7, #4]
 80012b4:	4613      	mov	r3, r2
 80012b6:	011b      	lsls	r3, r3, #4
 80012b8:	1a9b      	subs	r3, r3, r2
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	440b      	add	r3, r1
 80012be:	3326      	adds	r3, #38	@ 0x26
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d00a      	beq.n	80012dc <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80012c6:	78fa      	ldrb	r2, [r7, #3]
 80012c8:	6879      	ldr	r1, [r7, #4]
 80012ca:	4613      	mov	r3, r2
 80012cc:	011b      	lsls	r3, r3, #4
 80012ce:	1a9b      	subs	r3, r3, r2
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	440b      	add	r3, r1
 80012d4:	3326      	adds	r3, #38	@ 0x26
 80012d6:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80012d8:	2b02      	cmp	r3, #2
 80012da:	d159      	bne.n	8001390 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80012dc:	78fb      	ldrb	r3, [r7, #3]
 80012de:	015a      	lsls	r2, r3, #5
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	4413      	add	r3, r2
 80012e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80012f2:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80012fa:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80012fc:	78fb      	ldrb	r3, [r7, #3]
 80012fe:	015a      	lsls	r2, r3, #5
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	4413      	add	r3, r2
 8001304:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001308:	461a      	mov	r2, r3
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	6013      	str	r3, [r2, #0]
 800130e:	e03f      	b.n	8001390 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8001310:	78fa      	ldrb	r2, [r7, #3]
 8001312:	6879      	ldr	r1, [r7, #4]
 8001314:	4613      	mov	r3, r2
 8001316:	011b      	lsls	r3, r3, #4
 8001318:	1a9b      	subs	r3, r3, r2
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	440b      	add	r3, r1
 800131e:	334d      	adds	r3, #77	@ 0x4d
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	2b08      	cmp	r3, #8
 8001324:	d126      	bne.n	8001374 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001326:	78fa      	ldrb	r2, [r7, #3]
 8001328:	6879      	ldr	r1, [r7, #4]
 800132a:	4613      	mov	r3, r2
 800132c:	011b      	lsls	r3, r3, #4
 800132e:	1a9b      	subs	r3, r3, r2
 8001330:	009b      	lsls	r3, r3, #2
 8001332:	440b      	add	r3, r1
 8001334:	334d      	adds	r3, #77	@ 0x4d
 8001336:	2202      	movs	r2, #2
 8001338:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800133a:	78fa      	ldrb	r2, [r7, #3]
 800133c:	6879      	ldr	r1, [r7, #4]
 800133e:	4613      	mov	r3, r2
 8001340:	011b      	lsls	r3, r3, #4
 8001342:	1a9b      	subs	r3, r3, r2
 8001344:	009b      	lsls	r3, r3, #2
 8001346:	440b      	add	r3, r1
 8001348:	3344      	adds	r3, #68	@ 0x44
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	1c59      	adds	r1, r3, #1
 800134e:	6878      	ldr	r0, [r7, #4]
 8001350:	4613      	mov	r3, r2
 8001352:	011b      	lsls	r3, r3, #4
 8001354:	1a9b      	subs	r3, r3, r2
 8001356:	009b      	lsls	r3, r3, #2
 8001358:	4403      	add	r3, r0
 800135a:	3344      	adds	r3, #68	@ 0x44
 800135c:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 800135e:	78fa      	ldrb	r2, [r7, #3]
 8001360:	6879      	ldr	r1, [r7, #4]
 8001362:	4613      	mov	r3, r2
 8001364:	011b      	lsls	r3, r3, #4
 8001366:	1a9b      	subs	r3, r3, r2
 8001368:	009b      	lsls	r3, r3, #2
 800136a:	440b      	add	r3, r1
 800136c:	334c      	adds	r3, #76	@ 0x4c
 800136e:	2204      	movs	r2, #4
 8001370:	701a      	strb	r2, [r3, #0]
 8001372:	e00d      	b.n	8001390 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8001374:	78fa      	ldrb	r2, [r7, #3]
 8001376:	6879      	ldr	r1, [r7, #4]
 8001378:	4613      	mov	r3, r2
 800137a:	011b      	lsls	r3, r3, #4
 800137c:	1a9b      	subs	r3, r3, r2
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	440b      	add	r3, r1
 8001382:	334d      	adds	r3, #77	@ 0x4d
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	2b02      	cmp	r3, #2
 8001388:	f000 8100 	beq.w	800158c <HCD_HC_IN_IRQHandler+0xcca>
 800138c:	e000      	b.n	8001390 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800138e:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8001390:	78fa      	ldrb	r2, [r7, #3]
 8001392:	6879      	ldr	r1, [r7, #4]
 8001394:	4613      	mov	r3, r2
 8001396:	011b      	lsls	r3, r3, #4
 8001398:	1a9b      	subs	r3, r3, r2
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	440b      	add	r3, r1
 800139e:	334c      	adds	r3, #76	@ 0x4c
 80013a0:	781a      	ldrb	r2, [r3, #0]
 80013a2:	78fb      	ldrb	r3, [r7, #3]
 80013a4:	4619      	mov	r1, r3
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	f001 fad0 	bl	800294c <HAL_HCD_HC_NotifyURBChange_Callback>
 80013ac:	e0ef      	b.n	800158e <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	78fa      	ldrb	r2, [r7, #3]
 80013b4:	4611      	mov	r1, r2
 80013b6:	4618      	mov	r0, r3
 80013b8:	f000 ffd0 	bl	800235c <USB_ReadChInterrupts>
 80013bc:	4603      	mov	r3, r0
 80013be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80013c2:	2b40      	cmp	r3, #64	@ 0x40
 80013c4:	d12f      	bne.n	8001426 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80013c6:	78fb      	ldrb	r3, [r7, #3]
 80013c8:	015a      	lsls	r2, r3, #5
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	4413      	add	r3, r2
 80013ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80013d2:	461a      	mov	r2, r3
 80013d4:	2340      	movs	r3, #64	@ 0x40
 80013d6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 80013d8:	78fa      	ldrb	r2, [r7, #3]
 80013da:	6879      	ldr	r1, [r7, #4]
 80013dc:	4613      	mov	r3, r2
 80013de:	011b      	lsls	r3, r3, #4
 80013e0:	1a9b      	subs	r3, r3, r2
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	440b      	add	r3, r1
 80013e6:	334d      	adds	r3, #77	@ 0x4d
 80013e8:	2205      	movs	r2, #5
 80013ea:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80013ec:	78fa      	ldrb	r2, [r7, #3]
 80013ee:	6879      	ldr	r1, [r7, #4]
 80013f0:	4613      	mov	r3, r2
 80013f2:	011b      	lsls	r3, r3, #4
 80013f4:	1a9b      	subs	r3, r3, r2
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	440b      	add	r3, r1
 80013fa:	331a      	adds	r3, #26
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d109      	bne.n	8001416 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8001402:	78fa      	ldrb	r2, [r7, #3]
 8001404:	6879      	ldr	r1, [r7, #4]
 8001406:	4613      	mov	r3, r2
 8001408:	011b      	lsls	r3, r3, #4
 800140a:	1a9b      	subs	r3, r3, r2
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	440b      	add	r3, r1
 8001410:	3344      	adds	r3, #68	@ 0x44
 8001412:	2200      	movs	r2, #0
 8001414:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	78fa      	ldrb	r2, [r7, #3]
 800141c:	4611      	mov	r1, r2
 800141e:	4618      	mov	r0, r3
 8001420:	f001 f819 	bl	8002456 <USB_HC_Halt>
 8001424:	e0b3      	b.n	800158e <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	78fa      	ldrb	r2, [r7, #3]
 800142c:	4611      	mov	r1, r2
 800142e:	4618      	mov	r0, r3
 8001430:	f000 ff94 	bl	800235c <USB_ReadChInterrupts>
 8001434:	4603      	mov	r3, r0
 8001436:	f003 0310 	and.w	r3, r3, #16
 800143a:	2b10      	cmp	r3, #16
 800143c:	f040 80a7 	bne.w	800158e <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8001440:	78fa      	ldrb	r2, [r7, #3]
 8001442:	6879      	ldr	r1, [r7, #4]
 8001444:	4613      	mov	r3, r2
 8001446:	011b      	lsls	r3, r3, #4
 8001448:	1a9b      	subs	r3, r3, r2
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	440b      	add	r3, r1
 800144e:	3326      	adds	r3, #38	@ 0x26
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	2b03      	cmp	r3, #3
 8001454:	d11b      	bne.n	800148e <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8001456:	78fa      	ldrb	r2, [r7, #3]
 8001458:	6879      	ldr	r1, [r7, #4]
 800145a:	4613      	mov	r3, r2
 800145c:	011b      	lsls	r3, r3, #4
 800145e:	1a9b      	subs	r3, r3, r2
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	440b      	add	r3, r1
 8001464:	3344      	adds	r3, #68	@ 0x44
 8001466:	2200      	movs	r2, #0
 8001468:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 800146a:	78fa      	ldrb	r2, [r7, #3]
 800146c:	6879      	ldr	r1, [r7, #4]
 800146e:	4613      	mov	r3, r2
 8001470:	011b      	lsls	r3, r3, #4
 8001472:	1a9b      	subs	r3, r3, r2
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	440b      	add	r3, r1
 8001478:	334d      	adds	r3, #77	@ 0x4d
 800147a:	2204      	movs	r2, #4
 800147c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	78fa      	ldrb	r2, [r7, #3]
 8001484:	4611      	mov	r1, r2
 8001486:	4618      	mov	r0, r3
 8001488:	f000 ffe5 	bl	8002456 <USB_HC_Halt>
 800148c:	e03f      	b.n	800150e <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800148e:	78fa      	ldrb	r2, [r7, #3]
 8001490:	6879      	ldr	r1, [r7, #4]
 8001492:	4613      	mov	r3, r2
 8001494:	011b      	lsls	r3, r3, #4
 8001496:	1a9b      	subs	r3, r3, r2
 8001498:	009b      	lsls	r3, r3, #2
 800149a:	440b      	add	r3, r1
 800149c:	3326      	adds	r3, #38	@ 0x26
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d00a      	beq.n	80014ba <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80014a4:	78fa      	ldrb	r2, [r7, #3]
 80014a6:	6879      	ldr	r1, [r7, #4]
 80014a8:	4613      	mov	r3, r2
 80014aa:	011b      	lsls	r3, r3, #4
 80014ac:	1a9b      	subs	r3, r3, r2
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	440b      	add	r3, r1
 80014b2:	3326      	adds	r3, #38	@ 0x26
 80014b4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80014b6:	2b02      	cmp	r3, #2
 80014b8:	d129      	bne.n	800150e <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80014ba:	78fa      	ldrb	r2, [r7, #3]
 80014bc:	6879      	ldr	r1, [r7, #4]
 80014be:	4613      	mov	r3, r2
 80014c0:	011b      	lsls	r3, r3, #4
 80014c2:	1a9b      	subs	r3, r3, r2
 80014c4:	009b      	lsls	r3, r3, #2
 80014c6:	440b      	add	r3, r1
 80014c8:	3344      	adds	r3, #68	@ 0x44
 80014ca:	2200      	movs	r2, #0
 80014cc:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	799b      	ldrb	r3, [r3, #6]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d00a      	beq.n	80014ec <HCD_HC_IN_IRQHandler+0xc2a>
 80014d6:	78fa      	ldrb	r2, [r7, #3]
 80014d8:	6879      	ldr	r1, [r7, #4]
 80014da:	4613      	mov	r3, r2
 80014dc:	011b      	lsls	r3, r3, #4
 80014de:	1a9b      	subs	r3, r3, r2
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	440b      	add	r3, r1
 80014e4:	331b      	adds	r3, #27
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	d110      	bne.n	800150e <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 80014ec:	78fa      	ldrb	r2, [r7, #3]
 80014ee:	6879      	ldr	r1, [r7, #4]
 80014f0:	4613      	mov	r3, r2
 80014f2:	011b      	lsls	r3, r3, #4
 80014f4:	1a9b      	subs	r3, r3, r2
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	440b      	add	r3, r1
 80014fa:	334d      	adds	r3, #77	@ 0x4d
 80014fc:	2204      	movs	r2, #4
 80014fe:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	78fa      	ldrb	r2, [r7, #3]
 8001506:	4611      	mov	r1, r2
 8001508:	4618      	mov	r0, r3
 800150a:	f000 ffa4 	bl	8002456 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 800150e:	78fa      	ldrb	r2, [r7, #3]
 8001510:	6879      	ldr	r1, [r7, #4]
 8001512:	4613      	mov	r3, r2
 8001514:	011b      	lsls	r3, r3, #4
 8001516:	1a9b      	subs	r3, r3, r2
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	440b      	add	r3, r1
 800151c:	331b      	adds	r3, #27
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	2b01      	cmp	r3, #1
 8001522:	d129      	bne.n	8001578 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8001524:	78fa      	ldrb	r2, [r7, #3]
 8001526:	6879      	ldr	r1, [r7, #4]
 8001528:	4613      	mov	r3, r2
 800152a:	011b      	lsls	r3, r3, #4
 800152c:	1a9b      	subs	r3, r3, r2
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	440b      	add	r3, r1
 8001532:	331b      	adds	r3, #27
 8001534:	2200      	movs	r2, #0
 8001536:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8001538:	78fb      	ldrb	r3, [r7, #3]
 800153a:	015a      	lsls	r2, r3, #5
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	4413      	add	r3, r2
 8001540:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	78fa      	ldrb	r2, [r7, #3]
 8001548:	0151      	lsls	r1, r2, #5
 800154a:	693a      	ldr	r2, [r7, #16]
 800154c:	440a      	add	r2, r1
 800154e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001552:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001556:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8001558:	78fb      	ldrb	r3, [r7, #3]
 800155a:	015a      	lsls	r2, r3, #5
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	4413      	add	r3, r2
 8001560:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001564:	68db      	ldr	r3, [r3, #12]
 8001566:	78fa      	ldrb	r2, [r7, #3]
 8001568:	0151      	lsls	r1, r2, #5
 800156a:	693a      	ldr	r2, [r7, #16]
 800156c:	440a      	add	r2, r1
 800156e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001572:	f043 0320 	orr.w	r3, r3, #32
 8001576:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8001578:	78fb      	ldrb	r3, [r7, #3]
 800157a:	015a      	lsls	r2, r3, #5
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	4413      	add	r3, r2
 8001580:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001584:	461a      	mov	r2, r3
 8001586:	2310      	movs	r3, #16
 8001588:	6093      	str	r3, [r2, #8]
 800158a:	e000      	b.n	800158e <HCD_HC_IN_IRQHandler+0xccc>
        return;
 800158c:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 800158e:	3718      	adds	r7, #24
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}

08001594 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b086      	sub	sp, #24
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	460b      	mov	r3, r1
 800159e:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	78fa      	ldrb	r2, [r7, #3]
 80015b0:	4611      	mov	r1, r2
 80015b2:	4618      	mov	r0, r3
 80015b4:	f000 fed2 	bl	800235c <USB_ReadChInterrupts>
 80015b8:	4603      	mov	r3, r0
 80015ba:	f003 0304 	and.w	r3, r3, #4
 80015be:	2b04      	cmp	r3, #4
 80015c0:	d11b      	bne.n	80015fa <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80015c2:	78fb      	ldrb	r3, [r7, #3]
 80015c4:	015a      	lsls	r2, r3, #5
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	4413      	add	r3, r2
 80015ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80015ce:	461a      	mov	r2, r3
 80015d0:	2304      	movs	r3, #4
 80015d2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80015d4:	78fa      	ldrb	r2, [r7, #3]
 80015d6:	6879      	ldr	r1, [r7, #4]
 80015d8:	4613      	mov	r3, r2
 80015da:	011b      	lsls	r3, r3, #4
 80015dc:	1a9b      	subs	r3, r3, r2
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	440b      	add	r3, r1
 80015e2:	334d      	adds	r3, #77	@ 0x4d
 80015e4:	2207      	movs	r2, #7
 80015e6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	78fa      	ldrb	r2, [r7, #3]
 80015ee:	4611      	mov	r1, r2
 80015f0:	4618      	mov	r0, r3
 80015f2:	f000 ff30 	bl	8002456 <USB_HC_Halt>
 80015f6:	f000 bc6f 	b.w	8001ed8 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	78fa      	ldrb	r2, [r7, #3]
 8001600:	4611      	mov	r1, r2
 8001602:	4618      	mov	r0, r3
 8001604:	f000 feaa 	bl	800235c <USB_ReadChInterrupts>
 8001608:	4603      	mov	r3, r0
 800160a:	f003 0320 	and.w	r3, r3, #32
 800160e:	2b20      	cmp	r3, #32
 8001610:	f040 8082 	bne.w	8001718 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8001614:	78fb      	ldrb	r3, [r7, #3]
 8001616:	015a      	lsls	r2, r3, #5
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	4413      	add	r3, r2
 800161c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001620:	461a      	mov	r2, r3
 8001622:	2320      	movs	r3, #32
 8001624:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8001626:	78fa      	ldrb	r2, [r7, #3]
 8001628:	6879      	ldr	r1, [r7, #4]
 800162a:	4613      	mov	r3, r2
 800162c:	011b      	lsls	r3, r3, #4
 800162e:	1a9b      	subs	r3, r3, r2
 8001630:	009b      	lsls	r3, r3, #2
 8001632:	440b      	add	r3, r1
 8001634:	3319      	adds	r3, #25
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	2b01      	cmp	r3, #1
 800163a:	d124      	bne.n	8001686 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 800163c:	78fa      	ldrb	r2, [r7, #3]
 800163e:	6879      	ldr	r1, [r7, #4]
 8001640:	4613      	mov	r3, r2
 8001642:	011b      	lsls	r3, r3, #4
 8001644:	1a9b      	subs	r3, r3, r2
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	440b      	add	r3, r1
 800164a:	3319      	adds	r3, #25
 800164c:	2200      	movs	r2, #0
 800164e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8001650:	78fa      	ldrb	r2, [r7, #3]
 8001652:	6879      	ldr	r1, [r7, #4]
 8001654:	4613      	mov	r3, r2
 8001656:	011b      	lsls	r3, r3, #4
 8001658:	1a9b      	subs	r3, r3, r2
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	440b      	add	r3, r1
 800165e:	334c      	adds	r3, #76	@ 0x4c
 8001660:	2202      	movs	r2, #2
 8001662:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8001664:	78fa      	ldrb	r2, [r7, #3]
 8001666:	6879      	ldr	r1, [r7, #4]
 8001668:	4613      	mov	r3, r2
 800166a:	011b      	lsls	r3, r3, #4
 800166c:	1a9b      	subs	r3, r3, r2
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	440b      	add	r3, r1
 8001672:	334d      	adds	r3, #77	@ 0x4d
 8001674:	2203      	movs	r2, #3
 8001676:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	78fa      	ldrb	r2, [r7, #3]
 800167e:	4611      	mov	r1, r2
 8001680:	4618      	mov	r0, r3
 8001682:	f000 fee8 	bl	8002456 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8001686:	78fa      	ldrb	r2, [r7, #3]
 8001688:	6879      	ldr	r1, [r7, #4]
 800168a:	4613      	mov	r3, r2
 800168c:	011b      	lsls	r3, r3, #4
 800168e:	1a9b      	subs	r3, r3, r2
 8001690:	009b      	lsls	r3, r3, #2
 8001692:	440b      	add	r3, r1
 8001694:	331a      	adds	r3, #26
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	2b01      	cmp	r3, #1
 800169a:	f040 841d 	bne.w	8001ed8 <HCD_HC_OUT_IRQHandler+0x944>
 800169e:	78fa      	ldrb	r2, [r7, #3]
 80016a0:	6879      	ldr	r1, [r7, #4]
 80016a2:	4613      	mov	r3, r2
 80016a4:	011b      	lsls	r3, r3, #4
 80016a6:	1a9b      	subs	r3, r3, r2
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	440b      	add	r3, r1
 80016ac:	331b      	adds	r3, #27
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	f040 8411 	bne.w	8001ed8 <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 80016b6:	78fa      	ldrb	r2, [r7, #3]
 80016b8:	6879      	ldr	r1, [r7, #4]
 80016ba:	4613      	mov	r3, r2
 80016bc:	011b      	lsls	r3, r3, #4
 80016be:	1a9b      	subs	r3, r3, r2
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	440b      	add	r3, r1
 80016c4:	3326      	adds	r3, #38	@ 0x26
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d009      	beq.n	80016e0 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 80016cc:	78fa      	ldrb	r2, [r7, #3]
 80016ce:	6879      	ldr	r1, [r7, #4]
 80016d0:	4613      	mov	r3, r2
 80016d2:	011b      	lsls	r3, r3, #4
 80016d4:	1a9b      	subs	r3, r3, r2
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	440b      	add	r3, r1
 80016da:	331b      	adds	r3, #27
 80016dc:	2201      	movs	r2, #1
 80016de:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 80016e0:	78fa      	ldrb	r2, [r7, #3]
 80016e2:	6879      	ldr	r1, [r7, #4]
 80016e4:	4613      	mov	r3, r2
 80016e6:	011b      	lsls	r3, r3, #4
 80016e8:	1a9b      	subs	r3, r3, r2
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	440b      	add	r3, r1
 80016ee:	334d      	adds	r3, #77	@ 0x4d
 80016f0:	2203      	movs	r2, #3
 80016f2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	78fa      	ldrb	r2, [r7, #3]
 80016fa:	4611      	mov	r1, r2
 80016fc:	4618      	mov	r0, r3
 80016fe:	f000 feaa 	bl	8002456 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8001702:	78fa      	ldrb	r2, [r7, #3]
 8001704:	6879      	ldr	r1, [r7, #4]
 8001706:	4613      	mov	r3, r2
 8001708:	011b      	lsls	r3, r3, #4
 800170a:	1a9b      	subs	r3, r3, r2
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	440b      	add	r3, r1
 8001710:	3344      	adds	r3, #68	@ 0x44
 8001712:	2200      	movs	r2, #0
 8001714:	601a      	str	r2, [r3, #0]
 8001716:	e3df      	b.n	8001ed8 <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	78fa      	ldrb	r2, [r7, #3]
 800171e:	4611      	mov	r1, r2
 8001720:	4618      	mov	r0, r3
 8001722:	f000 fe1b 	bl	800235c <USB_ReadChInterrupts>
 8001726:	4603      	mov	r3, r0
 8001728:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800172c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001730:	d111      	bne.n	8001756 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8001732:	78fb      	ldrb	r3, [r7, #3]
 8001734:	015a      	lsls	r2, r3, #5
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	4413      	add	r3, r2
 800173a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800173e:	461a      	mov	r2, r3
 8001740:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001744:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	78fa      	ldrb	r2, [r7, #3]
 800174c:	4611      	mov	r1, r2
 800174e:	4618      	mov	r0, r3
 8001750:	f000 fe81 	bl	8002456 <USB_HC_Halt>
 8001754:	e3c0      	b.n	8001ed8 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	78fa      	ldrb	r2, [r7, #3]
 800175c:	4611      	mov	r1, r2
 800175e:	4618      	mov	r0, r3
 8001760:	f000 fdfc 	bl	800235c <USB_ReadChInterrupts>
 8001764:	4603      	mov	r3, r0
 8001766:	f003 0301 	and.w	r3, r3, #1
 800176a:	2b01      	cmp	r3, #1
 800176c:	d168      	bne.n	8001840 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800176e:	78fa      	ldrb	r2, [r7, #3]
 8001770:	6879      	ldr	r1, [r7, #4]
 8001772:	4613      	mov	r3, r2
 8001774:	011b      	lsls	r3, r3, #4
 8001776:	1a9b      	subs	r3, r3, r2
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	440b      	add	r3, r1
 800177c:	3344      	adds	r3, #68	@ 0x44
 800177e:	2200      	movs	r2, #0
 8001780:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	78fa      	ldrb	r2, [r7, #3]
 8001788:	4611      	mov	r1, r2
 800178a:	4618      	mov	r0, r3
 800178c:	f000 fde6 	bl	800235c <USB_ReadChInterrupts>
 8001790:	4603      	mov	r3, r0
 8001792:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001796:	2b40      	cmp	r3, #64	@ 0x40
 8001798:	d112      	bne.n	80017c0 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800179a:	78fa      	ldrb	r2, [r7, #3]
 800179c:	6879      	ldr	r1, [r7, #4]
 800179e:	4613      	mov	r3, r2
 80017a0:	011b      	lsls	r3, r3, #4
 80017a2:	1a9b      	subs	r3, r3, r2
 80017a4:	009b      	lsls	r3, r3, #2
 80017a6:	440b      	add	r3, r1
 80017a8:	3319      	adds	r3, #25
 80017aa:	2201      	movs	r2, #1
 80017ac:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80017ae:	78fb      	ldrb	r3, [r7, #3]
 80017b0:	015a      	lsls	r2, r3, #5
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	4413      	add	r3, r2
 80017b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80017ba:	461a      	mov	r2, r3
 80017bc:	2340      	movs	r3, #64	@ 0x40
 80017be:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 80017c0:	78fa      	ldrb	r2, [r7, #3]
 80017c2:	6879      	ldr	r1, [r7, #4]
 80017c4:	4613      	mov	r3, r2
 80017c6:	011b      	lsls	r3, r3, #4
 80017c8:	1a9b      	subs	r3, r3, r2
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	440b      	add	r3, r1
 80017ce:	331b      	adds	r3, #27
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d019      	beq.n	800180a <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80017d6:	78fa      	ldrb	r2, [r7, #3]
 80017d8:	6879      	ldr	r1, [r7, #4]
 80017da:	4613      	mov	r3, r2
 80017dc:	011b      	lsls	r3, r3, #4
 80017de:	1a9b      	subs	r3, r3, r2
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	440b      	add	r3, r1
 80017e4:	331b      	adds	r3, #27
 80017e6:	2200      	movs	r2, #0
 80017e8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80017ea:	78fb      	ldrb	r3, [r7, #3]
 80017ec:	015a      	lsls	r2, r3, #5
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	4413      	add	r3, r2
 80017f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	78fa      	ldrb	r2, [r7, #3]
 80017fa:	0151      	lsls	r1, r2, #5
 80017fc:	693a      	ldr	r2, [r7, #16]
 80017fe:	440a      	add	r2, r1
 8001800:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001804:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001808:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800180a:	78fb      	ldrb	r3, [r7, #3]
 800180c:	015a      	lsls	r2, r3, #5
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	4413      	add	r3, r2
 8001812:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001816:	461a      	mov	r2, r3
 8001818:	2301      	movs	r3, #1
 800181a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 800181c:	78fa      	ldrb	r2, [r7, #3]
 800181e:	6879      	ldr	r1, [r7, #4]
 8001820:	4613      	mov	r3, r2
 8001822:	011b      	lsls	r3, r3, #4
 8001824:	1a9b      	subs	r3, r3, r2
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	440b      	add	r3, r1
 800182a:	334d      	adds	r3, #77	@ 0x4d
 800182c:	2201      	movs	r2, #1
 800182e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	78fa      	ldrb	r2, [r7, #3]
 8001836:	4611      	mov	r1, r2
 8001838:	4618      	mov	r0, r3
 800183a:	f000 fe0c 	bl	8002456 <USB_HC_Halt>
 800183e:	e34b      	b.n	8001ed8 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	78fa      	ldrb	r2, [r7, #3]
 8001846:	4611      	mov	r1, r2
 8001848:	4618      	mov	r0, r3
 800184a:	f000 fd87 	bl	800235c <USB_ReadChInterrupts>
 800184e:	4603      	mov	r3, r0
 8001850:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001854:	2b40      	cmp	r3, #64	@ 0x40
 8001856:	d139      	bne.n	80018cc <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8001858:	78fa      	ldrb	r2, [r7, #3]
 800185a:	6879      	ldr	r1, [r7, #4]
 800185c:	4613      	mov	r3, r2
 800185e:	011b      	lsls	r3, r3, #4
 8001860:	1a9b      	subs	r3, r3, r2
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	440b      	add	r3, r1
 8001866:	334d      	adds	r3, #77	@ 0x4d
 8001868:	2205      	movs	r2, #5
 800186a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 800186c:	78fa      	ldrb	r2, [r7, #3]
 800186e:	6879      	ldr	r1, [r7, #4]
 8001870:	4613      	mov	r3, r2
 8001872:	011b      	lsls	r3, r3, #4
 8001874:	1a9b      	subs	r3, r3, r2
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	440b      	add	r3, r1
 800187a:	331a      	adds	r3, #26
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d109      	bne.n	8001896 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8001882:	78fa      	ldrb	r2, [r7, #3]
 8001884:	6879      	ldr	r1, [r7, #4]
 8001886:	4613      	mov	r3, r2
 8001888:	011b      	lsls	r3, r3, #4
 800188a:	1a9b      	subs	r3, r3, r2
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	440b      	add	r3, r1
 8001890:	3319      	adds	r3, #25
 8001892:	2201      	movs	r2, #1
 8001894:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8001896:	78fa      	ldrb	r2, [r7, #3]
 8001898:	6879      	ldr	r1, [r7, #4]
 800189a:	4613      	mov	r3, r2
 800189c:	011b      	lsls	r3, r3, #4
 800189e:	1a9b      	subs	r3, r3, r2
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	440b      	add	r3, r1
 80018a4:	3344      	adds	r3, #68	@ 0x44
 80018a6:	2200      	movs	r2, #0
 80018a8:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	78fa      	ldrb	r2, [r7, #3]
 80018b0:	4611      	mov	r1, r2
 80018b2:	4618      	mov	r0, r3
 80018b4:	f000 fdcf 	bl	8002456 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80018b8:	78fb      	ldrb	r3, [r7, #3]
 80018ba:	015a      	lsls	r2, r3, #5
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	4413      	add	r3, r2
 80018c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80018c4:	461a      	mov	r2, r3
 80018c6:	2340      	movs	r3, #64	@ 0x40
 80018c8:	6093      	str	r3, [r2, #8]
 80018ca:	e305      	b.n	8001ed8 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	78fa      	ldrb	r2, [r7, #3]
 80018d2:	4611      	mov	r1, r2
 80018d4:	4618      	mov	r0, r3
 80018d6:	f000 fd41 	bl	800235c <USB_ReadChInterrupts>
 80018da:	4603      	mov	r3, r0
 80018dc:	f003 0308 	and.w	r3, r3, #8
 80018e0:	2b08      	cmp	r3, #8
 80018e2:	d11a      	bne.n	800191a <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80018e4:	78fb      	ldrb	r3, [r7, #3]
 80018e6:	015a      	lsls	r2, r3, #5
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	4413      	add	r3, r2
 80018ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80018f0:	461a      	mov	r2, r3
 80018f2:	2308      	movs	r3, #8
 80018f4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80018f6:	78fa      	ldrb	r2, [r7, #3]
 80018f8:	6879      	ldr	r1, [r7, #4]
 80018fa:	4613      	mov	r3, r2
 80018fc:	011b      	lsls	r3, r3, #4
 80018fe:	1a9b      	subs	r3, r3, r2
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	440b      	add	r3, r1
 8001904:	334d      	adds	r3, #77	@ 0x4d
 8001906:	2206      	movs	r2, #6
 8001908:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	78fa      	ldrb	r2, [r7, #3]
 8001910:	4611      	mov	r1, r2
 8001912:	4618      	mov	r0, r3
 8001914:	f000 fd9f 	bl	8002456 <USB_HC_Halt>
 8001918:	e2de      	b.n	8001ed8 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	78fa      	ldrb	r2, [r7, #3]
 8001920:	4611      	mov	r1, r2
 8001922:	4618      	mov	r0, r3
 8001924:	f000 fd1a 	bl	800235c <USB_ReadChInterrupts>
 8001928:	4603      	mov	r3, r0
 800192a:	f003 0310 	and.w	r3, r3, #16
 800192e:	2b10      	cmp	r3, #16
 8001930:	d144      	bne.n	80019bc <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8001932:	78fa      	ldrb	r2, [r7, #3]
 8001934:	6879      	ldr	r1, [r7, #4]
 8001936:	4613      	mov	r3, r2
 8001938:	011b      	lsls	r3, r3, #4
 800193a:	1a9b      	subs	r3, r3, r2
 800193c:	009b      	lsls	r3, r3, #2
 800193e:	440b      	add	r3, r1
 8001940:	3344      	adds	r3, #68	@ 0x44
 8001942:	2200      	movs	r2, #0
 8001944:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8001946:	78fa      	ldrb	r2, [r7, #3]
 8001948:	6879      	ldr	r1, [r7, #4]
 800194a:	4613      	mov	r3, r2
 800194c:	011b      	lsls	r3, r3, #4
 800194e:	1a9b      	subs	r3, r3, r2
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	440b      	add	r3, r1
 8001954:	334d      	adds	r3, #77	@ 0x4d
 8001956:	2204      	movs	r2, #4
 8001958:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 800195a:	78fa      	ldrb	r2, [r7, #3]
 800195c:	6879      	ldr	r1, [r7, #4]
 800195e:	4613      	mov	r3, r2
 8001960:	011b      	lsls	r3, r3, #4
 8001962:	1a9b      	subs	r3, r3, r2
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	440b      	add	r3, r1
 8001968:	3319      	adds	r3, #25
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d114      	bne.n	800199a <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8001970:	78fa      	ldrb	r2, [r7, #3]
 8001972:	6879      	ldr	r1, [r7, #4]
 8001974:	4613      	mov	r3, r2
 8001976:	011b      	lsls	r3, r3, #4
 8001978:	1a9b      	subs	r3, r3, r2
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	440b      	add	r3, r1
 800197e:	3318      	adds	r3, #24
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d109      	bne.n	800199a <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8001986:	78fa      	ldrb	r2, [r7, #3]
 8001988:	6879      	ldr	r1, [r7, #4]
 800198a:	4613      	mov	r3, r2
 800198c:	011b      	lsls	r3, r3, #4
 800198e:	1a9b      	subs	r3, r3, r2
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	440b      	add	r3, r1
 8001994:	3319      	adds	r3, #25
 8001996:	2201      	movs	r2, #1
 8001998:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	78fa      	ldrb	r2, [r7, #3]
 80019a0:	4611      	mov	r1, r2
 80019a2:	4618      	mov	r0, r3
 80019a4:	f000 fd57 	bl	8002456 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80019a8:	78fb      	ldrb	r3, [r7, #3]
 80019aa:	015a      	lsls	r2, r3, #5
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	4413      	add	r3, r2
 80019b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80019b4:	461a      	mov	r2, r3
 80019b6:	2310      	movs	r3, #16
 80019b8:	6093      	str	r3, [r2, #8]
 80019ba:	e28d      	b.n	8001ed8 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	78fa      	ldrb	r2, [r7, #3]
 80019c2:	4611      	mov	r1, r2
 80019c4:	4618      	mov	r0, r3
 80019c6:	f000 fcc9 	bl	800235c <USB_ReadChInterrupts>
 80019ca:	4603      	mov	r3, r0
 80019cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019d0:	2b80      	cmp	r3, #128	@ 0x80
 80019d2:	d169      	bne.n	8001aa8 <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	799b      	ldrb	r3, [r3, #6]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d111      	bne.n	8001a00 <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 80019dc:	78fa      	ldrb	r2, [r7, #3]
 80019de:	6879      	ldr	r1, [r7, #4]
 80019e0:	4613      	mov	r3, r2
 80019e2:	011b      	lsls	r3, r3, #4
 80019e4:	1a9b      	subs	r3, r3, r2
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	440b      	add	r3, r1
 80019ea:	334d      	adds	r3, #77	@ 0x4d
 80019ec:	2207      	movs	r2, #7
 80019ee:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	78fa      	ldrb	r2, [r7, #3]
 80019f6:	4611      	mov	r1, r2
 80019f8:	4618      	mov	r0, r3
 80019fa:	f000 fd2c 	bl	8002456 <USB_HC_Halt>
 80019fe:	e049      	b.n	8001a94 <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8001a00:	78fa      	ldrb	r2, [r7, #3]
 8001a02:	6879      	ldr	r1, [r7, #4]
 8001a04:	4613      	mov	r3, r2
 8001a06:	011b      	lsls	r3, r3, #4
 8001a08:	1a9b      	subs	r3, r3, r2
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	440b      	add	r3, r1
 8001a0e:	3344      	adds	r3, #68	@ 0x44
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	1c59      	adds	r1, r3, #1
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	4613      	mov	r3, r2
 8001a18:	011b      	lsls	r3, r3, #4
 8001a1a:	1a9b      	subs	r3, r3, r2
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	4403      	add	r3, r0
 8001a20:	3344      	adds	r3, #68	@ 0x44
 8001a22:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8001a24:	78fa      	ldrb	r2, [r7, #3]
 8001a26:	6879      	ldr	r1, [r7, #4]
 8001a28:	4613      	mov	r3, r2
 8001a2a:	011b      	lsls	r3, r3, #4
 8001a2c:	1a9b      	subs	r3, r3, r2
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	440b      	add	r3, r1
 8001a32:	3344      	adds	r3, #68	@ 0x44
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	2b02      	cmp	r3, #2
 8001a38:	d922      	bls.n	8001a80 <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8001a3a:	78fa      	ldrb	r2, [r7, #3]
 8001a3c:	6879      	ldr	r1, [r7, #4]
 8001a3e:	4613      	mov	r3, r2
 8001a40:	011b      	lsls	r3, r3, #4
 8001a42:	1a9b      	subs	r3, r3, r2
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	440b      	add	r3, r1
 8001a48:	3344      	adds	r3, #68	@ 0x44
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8001a4e:	78fa      	ldrb	r2, [r7, #3]
 8001a50:	6879      	ldr	r1, [r7, #4]
 8001a52:	4613      	mov	r3, r2
 8001a54:	011b      	lsls	r3, r3, #4
 8001a56:	1a9b      	subs	r3, r3, r2
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	440b      	add	r3, r1
 8001a5c:	334c      	adds	r3, #76	@ 0x4c
 8001a5e:	2204      	movs	r2, #4
 8001a60:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8001a62:	78fa      	ldrb	r2, [r7, #3]
 8001a64:	6879      	ldr	r1, [r7, #4]
 8001a66:	4613      	mov	r3, r2
 8001a68:	011b      	lsls	r3, r3, #4
 8001a6a:	1a9b      	subs	r3, r3, r2
 8001a6c:	009b      	lsls	r3, r3, #2
 8001a6e:	440b      	add	r3, r1
 8001a70:	334c      	adds	r3, #76	@ 0x4c
 8001a72:	781a      	ldrb	r2, [r3, #0]
 8001a74:	78fb      	ldrb	r3, [r7, #3]
 8001a76:	4619      	mov	r1, r3
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f000 ff67 	bl	800294c <HAL_HCD_HC_NotifyURBChange_Callback>
 8001a7e:	e009      	b.n	8001a94 <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8001a80:	78fa      	ldrb	r2, [r7, #3]
 8001a82:	6879      	ldr	r1, [r7, #4]
 8001a84:	4613      	mov	r3, r2
 8001a86:	011b      	lsls	r3, r3, #4
 8001a88:	1a9b      	subs	r3, r3, r2
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	440b      	add	r3, r1
 8001a8e:	334c      	adds	r3, #76	@ 0x4c
 8001a90:	2202      	movs	r2, #2
 8001a92:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8001a94:	78fb      	ldrb	r3, [r7, #3]
 8001a96:	015a      	lsls	r2, r3, #5
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	4413      	add	r3, r2
 8001a9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	2380      	movs	r3, #128	@ 0x80
 8001aa4:	6093      	str	r3, [r2, #8]
 8001aa6:	e217      	b.n	8001ed8 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	78fa      	ldrb	r2, [r7, #3]
 8001aae:	4611      	mov	r1, r2
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f000 fc53 	bl	800235c <USB_ReadChInterrupts>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001abc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ac0:	d11b      	bne.n	8001afa <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8001ac2:	78fa      	ldrb	r2, [r7, #3]
 8001ac4:	6879      	ldr	r1, [r7, #4]
 8001ac6:	4613      	mov	r3, r2
 8001ac8:	011b      	lsls	r3, r3, #4
 8001aca:	1a9b      	subs	r3, r3, r2
 8001acc:	009b      	lsls	r3, r3, #2
 8001ace:	440b      	add	r3, r1
 8001ad0:	334d      	adds	r3, #77	@ 0x4d
 8001ad2:	2209      	movs	r2, #9
 8001ad4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	78fa      	ldrb	r2, [r7, #3]
 8001adc:	4611      	mov	r1, r2
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f000 fcb9 	bl	8002456 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8001ae4:	78fb      	ldrb	r3, [r7, #3]
 8001ae6:	015a      	lsls	r2, r3, #5
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	4413      	add	r3, r2
 8001aec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001af0:	461a      	mov	r2, r3
 8001af2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001af6:	6093      	str	r3, [r2, #8]
 8001af8:	e1ee      	b.n	8001ed8 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	78fa      	ldrb	r2, [r7, #3]
 8001b00:	4611      	mov	r1, r2
 8001b02:	4618      	mov	r0, r3
 8001b04:	f000 fc2a 	bl	800235c <USB_ReadChInterrupts>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	f003 0302 	and.w	r3, r3, #2
 8001b0e:	2b02      	cmp	r3, #2
 8001b10:	f040 81df 	bne.w	8001ed2 <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8001b14:	78fb      	ldrb	r3, [r7, #3]
 8001b16:	015a      	lsls	r2, r3, #5
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	4413      	add	r3, r2
 8001b1c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001b20:	461a      	mov	r2, r3
 8001b22:	2302      	movs	r3, #2
 8001b24:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8001b26:	78fa      	ldrb	r2, [r7, #3]
 8001b28:	6879      	ldr	r1, [r7, #4]
 8001b2a:	4613      	mov	r3, r2
 8001b2c:	011b      	lsls	r3, r3, #4
 8001b2e:	1a9b      	subs	r3, r3, r2
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	440b      	add	r3, r1
 8001b34:	334d      	adds	r3, #77	@ 0x4d
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	f040 8093 	bne.w	8001c64 <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001b3e:	78fa      	ldrb	r2, [r7, #3]
 8001b40:	6879      	ldr	r1, [r7, #4]
 8001b42:	4613      	mov	r3, r2
 8001b44:	011b      	lsls	r3, r3, #4
 8001b46:	1a9b      	subs	r3, r3, r2
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	440b      	add	r3, r1
 8001b4c:	334d      	adds	r3, #77	@ 0x4d
 8001b4e:	2202      	movs	r2, #2
 8001b50:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8001b52:	78fa      	ldrb	r2, [r7, #3]
 8001b54:	6879      	ldr	r1, [r7, #4]
 8001b56:	4613      	mov	r3, r2
 8001b58:	011b      	lsls	r3, r3, #4
 8001b5a:	1a9b      	subs	r3, r3, r2
 8001b5c:	009b      	lsls	r3, r3, #2
 8001b5e:	440b      	add	r3, r1
 8001b60:	334c      	adds	r3, #76	@ 0x4c
 8001b62:	2201      	movs	r2, #1
 8001b64:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8001b66:	78fa      	ldrb	r2, [r7, #3]
 8001b68:	6879      	ldr	r1, [r7, #4]
 8001b6a:	4613      	mov	r3, r2
 8001b6c:	011b      	lsls	r3, r3, #4
 8001b6e:	1a9b      	subs	r3, r3, r2
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	440b      	add	r3, r1
 8001b74:	3326      	adds	r3, #38	@ 0x26
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d00b      	beq.n	8001b94 <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8001b7c:	78fa      	ldrb	r2, [r7, #3]
 8001b7e:	6879      	ldr	r1, [r7, #4]
 8001b80:	4613      	mov	r3, r2
 8001b82:	011b      	lsls	r3, r3, #4
 8001b84:	1a9b      	subs	r3, r3, r2
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	440b      	add	r3, r1
 8001b8a:	3326      	adds	r3, #38	@ 0x26
 8001b8c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8001b8e:	2b03      	cmp	r3, #3
 8001b90:	f040 8190 	bne.w	8001eb4 <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	799b      	ldrb	r3, [r3, #6]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d115      	bne.n	8001bc8 <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8001b9c:	78fa      	ldrb	r2, [r7, #3]
 8001b9e:	6879      	ldr	r1, [r7, #4]
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	011b      	lsls	r3, r3, #4
 8001ba4:	1a9b      	subs	r3, r3, r2
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	440b      	add	r3, r1
 8001baa:	333d      	adds	r3, #61	@ 0x3d
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	78fa      	ldrb	r2, [r7, #3]
 8001bb0:	f083 0301 	eor.w	r3, r3, #1
 8001bb4:	b2d8      	uxtb	r0, r3
 8001bb6:	6879      	ldr	r1, [r7, #4]
 8001bb8:	4613      	mov	r3, r2
 8001bba:	011b      	lsls	r3, r3, #4
 8001bbc:	1a9b      	subs	r3, r3, r2
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	440b      	add	r3, r1
 8001bc2:	333d      	adds	r3, #61	@ 0x3d
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	799b      	ldrb	r3, [r3, #6]
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	f040 8171 	bne.w	8001eb4 <HCD_HC_OUT_IRQHandler+0x920>
 8001bd2:	78fa      	ldrb	r2, [r7, #3]
 8001bd4:	6879      	ldr	r1, [r7, #4]
 8001bd6:	4613      	mov	r3, r2
 8001bd8:	011b      	lsls	r3, r3, #4
 8001bda:	1a9b      	subs	r3, r3, r2
 8001bdc:	009b      	lsls	r3, r3, #2
 8001bde:	440b      	add	r3, r1
 8001be0:	3334      	adds	r3, #52	@ 0x34
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	f000 8165 	beq.w	8001eb4 <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8001bea:	78fa      	ldrb	r2, [r7, #3]
 8001bec:	6879      	ldr	r1, [r7, #4]
 8001bee:	4613      	mov	r3, r2
 8001bf0:	011b      	lsls	r3, r3, #4
 8001bf2:	1a9b      	subs	r3, r3, r2
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	440b      	add	r3, r1
 8001bf8:	3334      	adds	r3, #52	@ 0x34
 8001bfa:	6819      	ldr	r1, [r3, #0]
 8001bfc:	78fa      	ldrb	r2, [r7, #3]
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	4613      	mov	r3, r2
 8001c02:	011b      	lsls	r3, r3, #4
 8001c04:	1a9b      	subs	r3, r3, r2
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	4403      	add	r3, r0
 8001c0a:	3328      	adds	r3, #40	@ 0x28
 8001c0c:	881b      	ldrh	r3, [r3, #0]
 8001c0e:	440b      	add	r3, r1
 8001c10:	1e59      	subs	r1, r3, #1
 8001c12:	78fa      	ldrb	r2, [r7, #3]
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	4613      	mov	r3, r2
 8001c18:	011b      	lsls	r3, r3, #4
 8001c1a:	1a9b      	subs	r3, r3, r2
 8001c1c:	009b      	lsls	r3, r3, #2
 8001c1e:	4403      	add	r3, r0
 8001c20:	3328      	adds	r3, #40	@ 0x28
 8001c22:	881b      	ldrh	r3, [r3, #0]
 8001c24:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c28:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	f003 0301 	and.w	r3, r3, #1
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	f000 813f 	beq.w	8001eb4 <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8001c36:	78fa      	ldrb	r2, [r7, #3]
 8001c38:	6879      	ldr	r1, [r7, #4]
 8001c3a:	4613      	mov	r3, r2
 8001c3c:	011b      	lsls	r3, r3, #4
 8001c3e:	1a9b      	subs	r3, r3, r2
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	440b      	add	r3, r1
 8001c44:	333d      	adds	r3, #61	@ 0x3d
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	78fa      	ldrb	r2, [r7, #3]
 8001c4a:	f083 0301 	eor.w	r3, r3, #1
 8001c4e:	b2d8      	uxtb	r0, r3
 8001c50:	6879      	ldr	r1, [r7, #4]
 8001c52:	4613      	mov	r3, r2
 8001c54:	011b      	lsls	r3, r3, #4
 8001c56:	1a9b      	subs	r3, r3, r2
 8001c58:	009b      	lsls	r3, r3, #2
 8001c5a:	440b      	add	r3, r1
 8001c5c:	333d      	adds	r3, #61	@ 0x3d
 8001c5e:	4602      	mov	r2, r0
 8001c60:	701a      	strb	r2, [r3, #0]
 8001c62:	e127      	b.n	8001eb4 <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8001c64:	78fa      	ldrb	r2, [r7, #3]
 8001c66:	6879      	ldr	r1, [r7, #4]
 8001c68:	4613      	mov	r3, r2
 8001c6a:	011b      	lsls	r3, r3, #4
 8001c6c:	1a9b      	subs	r3, r3, r2
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	440b      	add	r3, r1
 8001c72:	334d      	adds	r3, #77	@ 0x4d
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	2b03      	cmp	r3, #3
 8001c78:	d120      	bne.n	8001cbc <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001c7a:	78fa      	ldrb	r2, [r7, #3]
 8001c7c:	6879      	ldr	r1, [r7, #4]
 8001c7e:	4613      	mov	r3, r2
 8001c80:	011b      	lsls	r3, r3, #4
 8001c82:	1a9b      	subs	r3, r3, r2
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	440b      	add	r3, r1
 8001c88:	334d      	adds	r3, #77	@ 0x4d
 8001c8a:	2202      	movs	r2, #2
 8001c8c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8001c8e:	78fa      	ldrb	r2, [r7, #3]
 8001c90:	6879      	ldr	r1, [r7, #4]
 8001c92:	4613      	mov	r3, r2
 8001c94:	011b      	lsls	r3, r3, #4
 8001c96:	1a9b      	subs	r3, r3, r2
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	440b      	add	r3, r1
 8001c9c:	331b      	adds	r3, #27
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	f040 8107 	bne.w	8001eb4 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8001ca6:	78fa      	ldrb	r2, [r7, #3]
 8001ca8:	6879      	ldr	r1, [r7, #4]
 8001caa:	4613      	mov	r3, r2
 8001cac:	011b      	lsls	r3, r3, #4
 8001cae:	1a9b      	subs	r3, r3, r2
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	440b      	add	r3, r1
 8001cb4:	334c      	adds	r3, #76	@ 0x4c
 8001cb6:	2202      	movs	r2, #2
 8001cb8:	701a      	strb	r2, [r3, #0]
 8001cba:	e0fb      	b.n	8001eb4 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8001cbc:	78fa      	ldrb	r2, [r7, #3]
 8001cbe:	6879      	ldr	r1, [r7, #4]
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	011b      	lsls	r3, r3, #4
 8001cc4:	1a9b      	subs	r3, r3, r2
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	440b      	add	r3, r1
 8001cca:	334d      	adds	r3, #77	@ 0x4d
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	2b04      	cmp	r3, #4
 8001cd0:	d13a      	bne.n	8001d48 <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001cd2:	78fa      	ldrb	r2, [r7, #3]
 8001cd4:	6879      	ldr	r1, [r7, #4]
 8001cd6:	4613      	mov	r3, r2
 8001cd8:	011b      	lsls	r3, r3, #4
 8001cda:	1a9b      	subs	r3, r3, r2
 8001cdc:	009b      	lsls	r3, r3, #2
 8001cde:	440b      	add	r3, r1
 8001ce0:	334d      	adds	r3, #77	@ 0x4d
 8001ce2:	2202      	movs	r2, #2
 8001ce4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8001ce6:	78fa      	ldrb	r2, [r7, #3]
 8001ce8:	6879      	ldr	r1, [r7, #4]
 8001cea:	4613      	mov	r3, r2
 8001cec:	011b      	lsls	r3, r3, #4
 8001cee:	1a9b      	subs	r3, r3, r2
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	440b      	add	r3, r1
 8001cf4:	334c      	adds	r3, #76	@ 0x4c
 8001cf6:	2202      	movs	r2, #2
 8001cf8:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8001cfa:	78fa      	ldrb	r2, [r7, #3]
 8001cfc:	6879      	ldr	r1, [r7, #4]
 8001cfe:	4613      	mov	r3, r2
 8001d00:	011b      	lsls	r3, r3, #4
 8001d02:	1a9b      	subs	r3, r3, r2
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	440b      	add	r3, r1
 8001d08:	331b      	adds	r3, #27
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	f040 80d1 	bne.w	8001eb4 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8001d12:	78fa      	ldrb	r2, [r7, #3]
 8001d14:	6879      	ldr	r1, [r7, #4]
 8001d16:	4613      	mov	r3, r2
 8001d18:	011b      	lsls	r3, r3, #4
 8001d1a:	1a9b      	subs	r3, r3, r2
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	440b      	add	r3, r1
 8001d20:	331b      	adds	r3, #27
 8001d22:	2200      	movs	r2, #0
 8001d24:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8001d26:	78fb      	ldrb	r3, [r7, #3]
 8001d28:	015a      	lsls	r2, r3, #5
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	4413      	add	r3, r2
 8001d2e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	78fa      	ldrb	r2, [r7, #3]
 8001d36:	0151      	lsls	r1, r2, #5
 8001d38:	693a      	ldr	r2, [r7, #16]
 8001d3a:	440a      	add	r2, r1
 8001d3c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001d40:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d44:	6053      	str	r3, [r2, #4]
 8001d46:	e0b5      	b.n	8001eb4 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8001d48:	78fa      	ldrb	r2, [r7, #3]
 8001d4a:	6879      	ldr	r1, [r7, #4]
 8001d4c:	4613      	mov	r3, r2
 8001d4e:	011b      	lsls	r3, r3, #4
 8001d50:	1a9b      	subs	r3, r3, r2
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	440b      	add	r3, r1
 8001d56:	334d      	adds	r3, #77	@ 0x4d
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	2b05      	cmp	r3, #5
 8001d5c:	d114      	bne.n	8001d88 <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001d5e:	78fa      	ldrb	r2, [r7, #3]
 8001d60:	6879      	ldr	r1, [r7, #4]
 8001d62:	4613      	mov	r3, r2
 8001d64:	011b      	lsls	r3, r3, #4
 8001d66:	1a9b      	subs	r3, r3, r2
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	440b      	add	r3, r1
 8001d6c:	334d      	adds	r3, #77	@ 0x4d
 8001d6e:	2202      	movs	r2, #2
 8001d70:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8001d72:	78fa      	ldrb	r2, [r7, #3]
 8001d74:	6879      	ldr	r1, [r7, #4]
 8001d76:	4613      	mov	r3, r2
 8001d78:	011b      	lsls	r3, r3, #4
 8001d7a:	1a9b      	subs	r3, r3, r2
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	440b      	add	r3, r1
 8001d80:	334c      	adds	r3, #76	@ 0x4c
 8001d82:	2202      	movs	r2, #2
 8001d84:	701a      	strb	r2, [r3, #0]
 8001d86:	e095      	b.n	8001eb4 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8001d88:	78fa      	ldrb	r2, [r7, #3]
 8001d8a:	6879      	ldr	r1, [r7, #4]
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	011b      	lsls	r3, r3, #4
 8001d90:	1a9b      	subs	r3, r3, r2
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	440b      	add	r3, r1
 8001d96:	334d      	adds	r3, #77	@ 0x4d
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	2b06      	cmp	r3, #6
 8001d9c:	d114      	bne.n	8001dc8 <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001d9e:	78fa      	ldrb	r2, [r7, #3]
 8001da0:	6879      	ldr	r1, [r7, #4]
 8001da2:	4613      	mov	r3, r2
 8001da4:	011b      	lsls	r3, r3, #4
 8001da6:	1a9b      	subs	r3, r3, r2
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	440b      	add	r3, r1
 8001dac:	334d      	adds	r3, #77	@ 0x4d
 8001dae:	2202      	movs	r2, #2
 8001db0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8001db2:	78fa      	ldrb	r2, [r7, #3]
 8001db4:	6879      	ldr	r1, [r7, #4]
 8001db6:	4613      	mov	r3, r2
 8001db8:	011b      	lsls	r3, r3, #4
 8001dba:	1a9b      	subs	r3, r3, r2
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	440b      	add	r3, r1
 8001dc0:	334c      	adds	r3, #76	@ 0x4c
 8001dc2:	2205      	movs	r2, #5
 8001dc4:	701a      	strb	r2, [r3, #0]
 8001dc6:	e075      	b.n	8001eb4 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8001dc8:	78fa      	ldrb	r2, [r7, #3]
 8001dca:	6879      	ldr	r1, [r7, #4]
 8001dcc:	4613      	mov	r3, r2
 8001dce:	011b      	lsls	r3, r3, #4
 8001dd0:	1a9b      	subs	r3, r3, r2
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	440b      	add	r3, r1
 8001dd6:	334d      	adds	r3, #77	@ 0x4d
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	2b07      	cmp	r3, #7
 8001ddc:	d00a      	beq.n	8001df4 <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8001dde:	78fa      	ldrb	r2, [r7, #3]
 8001de0:	6879      	ldr	r1, [r7, #4]
 8001de2:	4613      	mov	r3, r2
 8001de4:	011b      	lsls	r3, r3, #4
 8001de6:	1a9b      	subs	r3, r3, r2
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	440b      	add	r3, r1
 8001dec:	334d      	adds	r3, #77	@ 0x4d
 8001dee:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8001df0:	2b09      	cmp	r3, #9
 8001df2:	d170      	bne.n	8001ed6 <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001df4:	78fa      	ldrb	r2, [r7, #3]
 8001df6:	6879      	ldr	r1, [r7, #4]
 8001df8:	4613      	mov	r3, r2
 8001dfa:	011b      	lsls	r3, r3, #4
 8001dfc:	1a9b      	subs	r3, r3, r2
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	440b      	add	r3, r1
 8001e02:	334d      	adds	r3, #77	@ 0x4d
 8001e04:	2202      	movs	r2, #2
 8001e06:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8001e08:	78fa      	ldrb	r2, [r7, #3]
 8001e0a:	6879      	ldr	r1, [r7, #4]
 8001e0c:	4613      	mov	r3, r2
 8001e0e:	011b      	lsls	r3, r3, #4
 8001e10:	1a9b      	subs	r3, r3, r2
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	440b      	add	r3, r1
 8001e16:	3344      	adds	r3, #68	@ 0x44
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	1c59      	adds	r1, r3, #1
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	4613      	mov	r3, r2
 8001e20:	011b      	lsls	r3, r3, #4
 8001e22:	1a9b      	subs	r3, r3, r2
 8001e24:	009b      	lsls	r3, r3, #2
 8001e26:	4403      	add	r3, r0
 8001e28:	3344      	adds	r3, #68	@ 0x44
 8001e2a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8001e2c:	78fa      	ldrb	r2, [r7, #3]
 8001e2e:	6879      	ldr	r1, [r7, #4]
 8001e30:	4613      	mov	r3, r2
 8001e32:	011b      	lsls	r3, r3, #4
 8001e34:	1a9b      	subs	r3, r3, r2
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	440b      	add	r3, r1
 8001e3a:	3344      	adds	r3, #68	@ 0x44
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	2b02      	cmp	r3, #2
 8001e40:	d914      	bls.n	8001e6c <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8001e42:	78fa      	ldrb	r2, [r7, #3]
 8001e44:	6879      	ldr	r1, [r7, #4]
 8001e46:	4613      	mov	r3, r2
 8001e48:	011b      	lsls	r3, r3, #4
 8001e4a:	1a9b      	subs	r3, r3, r2
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	440b      	add	r3, r1
 8001e50:	3344      	adds	r3, #68	@ 0x44
 8001e52:	2200      	movs	r2, #0
 8001e54:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8001e56:	78fa      	ldrb	r2, [r7, #3]
 8001e58:	6879      	ldr	r1, [r7, #4]
 8001e5a:	4613      	mov	r3, r2
 8001e5c:	011b      	lsls	r3, r3, #4
 8001e5e:	1a9b      	subs	r3, r3, r2
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	440b      	add	r3, r1
 8001e64:	334c      	adds	r3, #76	@ 0x4c
 8001e66:	2204      	movs	r2, #4
 8001e68:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8001e6a:	e022      	b.n	8001eb2 <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8001e6c:	78fa      	ldrb	r2, [r7, #3]
 8001e6e:	6879      	ldr	r1, [r7, #4]
 8001e70:	4613      	mov	r3, r2
 8001e72:	011b      	lsls	r3, r3, #4
 8001e74:	1a9b      	subs	r3, r3, r2
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	440b      	add	r3, r1
 8001e7a:	334c      	adds	r3, #76	@ 0x4c
 8001e7c:	2202      	movs	r2, #2
 8001e7e:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8001e80:	78fb      	ldrb	r3, [r7, #3]
 8001e82:	015a      	lsls	r2, r3, #5
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	4413      	add	r3, r2
 8001e88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8001e96:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001e9e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8001ea0:	78fb      	ldrb	r3, [r7, #3]
 8001ea2:	015a      	lsls	r2, r3, #5
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	4413      	add	r3, r2
 8001ea8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001eac:	461a      	mov	r2, r3
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8001eb2:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8001eb4:	78fa      	ldrb	r2, [r7, #3]
 8001eb6:	6879      	ldr	r1, [r7, #4]
 8001eb8:	4613      	mov	r3, r2
 8001eba:	011b      	lsls	r3, r3, #4
 8001ebc:	1a9b      	subs	r3, r3, r2
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	440b      	add	r3, r1
 8001ec2:	334c      	adds	r3, #76	@ 0x4c
 8001ec4:	781a      	ldrb	r2, [r3, #0]
 8001ec6:	78fb      	ldrb	r3, [r7, #3]
 8001ec8:	4619      	mov	r1, r3
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f000 fd3e 	bl	800294c <HAL_HCD_HC_NotifyURBChange_Callback>
 8001ed0:	e002      	b.n	8001ed8 <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8001ed2:	bf00      	nop
 8001ed4:	e000      	b.n	8001ed8 <HCD_HC_OUT_IRQHandler+0x944>
      return;
 8001ed6:	bf00      	nop
  }
}
 8001ed8:	3718      	adds	r7, #24
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}

08001ede <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001ede:	b580      	push	{r7, lr}
 8001ee0:	b08a      	sub	sp, #40	@ 0x28
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eee:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	6a1b      	ldr	r3, [r3, #32]
 8001ef6:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	f003 030f 	and.w	r3, r3, #15
 8001efe:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8001f00:	69fb      	ldr	r3, [r7, #28]
 8001f02:	0c5b      	lsrs	r3, r3, #17
 8001f04:	f003 030f 	and.w	r3, r3, #15
 8001f08:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	091b      	lsrs	r3, r3, #4
 8001f0e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f12:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	2b02      	cmp	r3, #2
 8001f18:	d004      	beq.n	8001f24 <HCD_RXQLVL_IRQHandler+0x46>
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	2b05      	cmp	r3, #5
 8001f1e:	f000 80b6 	beq.w	800208e <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8001f22:	e0b7      	b.n	8002094 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	f000 80b3 	beq.w	8002092 <HCD_RXQLVL_IRQHandler+0x1b4>
 8001f2c:	6879      	ldr	r1, [r7, #4]
 8001f2e:	69ba      	ldr	r2, [r7, #24]
 8001f30:	4613      	mov	r3, r2
 8001f32:	011b      	lsls	r3, r3, #4
 8001f34:	1a9b      	subs	r3, r3, r2
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	440b      	add	r3, r1
 8001f3a:	332c      	adds	r3, #44	@ 0x2c
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	f000 80a7 	beq.w	8002092 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8001f44:	6879      	ldr	r1, [r7, #4]
 8001f46:	69ba      	ldr	r2, [r7, #24]
 8001f48:	4613      	mov	r3, r2
 8001f4a:	011b      	lsls	r3, r3, #4
 8001f4c:	1a9b      	subs	r3, r3, r2
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	440b      	add	r3, r1
 8001f52:	3338      	adds	r3, #56	@ 0x38
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	18d1      	adds	r1, r2, r3
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	69ba      	ldr	r2, [r7, #24]
 8001f5e:	4613      	mov	r3, r2
 8001f60:	011b      	lsls	r3, r3, #4
 8001f62:	1a9b      	subs	r3, r3, r2
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	4403      	add	r3, r0
 8001f68:	3334      	adds	r3, #52	@ 0x34
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4299      	cmp	r1, r3
 8001f6e:	f200 8083 	bhi.w	8002078 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6818      	ldr	r0, [r3, #0]
 8001f76:	6879      	ldr	r1, [r7, #4]
 8001f78:	69ba      	ldr	r2, [r7, #24]
 8001f7a:	4613      	mov	r3, r2
 8001f7c:	011b      	lsls	r3, r3, #4
 8001f7e:	1a9b      	subs	r3, r3, r2
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	440b      	add	r3, r1
 8001f84:	332c      	adds	r3, #44	@ 0x2c
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	693a      	ldr	r2, [r7, #16]
 8001f8a:	b292      	uxth	r2, r2
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	f000 f97a 	bl	8002286 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8001f92:	6879      	ldr	r1, [r7, #4]
 8001f94:	69ba      	ldr	r2, [r7, #24]
 8001f96:	4613      	mov	r3, r2
 8001f98:	011b      	lsls	r3, r3, #4
 8001f9a:	1a9b      	subs	r3, r3, r2
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	440b      	add	r3, r1
 8001fa0:	332c      	adds	r3, #44	@ 0x2c
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	18d1      	adds	r1, r2, r3
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	69ba      	ldr	r2, [r7, #24]
 8001fac:	4613      	mov	r3, r2
 8001fae:	011b      	lsls	r3, r3, #4
 8001fb0:	1a9b      	subs	r3, r3, r2
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	4403      	add	r3, r0
 8001fb6:	332c      	adds	r3, #44	@ 0x2c
 8001fb8:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8001fba:	6879      	ldr	r1, [r7, #4]
 8001fbc:	69ba      	ldr	r2, [r7, #24]
 8001fbe:	4613      	mov	r3, r2
 8001fc0:	011b      	lsls	r3, r3, #4
 8001fc2:	1a9b      	subs	r3, r3, r2
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	440b      	add	r3, r1
 8001fc8:	3338      	adds	r3, #56	@ 0x38
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	18d1      	adds	r1, r2, r3
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	69ba      	ldr	r2, [r7, #24]
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	011b      	lsls	r3, r3, #4
 8001fd8:	1a9b      	subs	r3, r3, r2
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	4403      	add	r3, r0
 8001fde:	3338      	adds	r3, #56	@ 0x38
 8001fe0:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8001fe2:	69bb      	ldr	r3, [r7, #24]
 8001fe4:	015a      	lsls	r2, r3, #5
 8001fe6:	6a3b      	ldr	r3, [r7, #32]
 8001fe8:	4413      	add	r3, r2
 8001fea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001fee:	691b      	ldr	r3, [r3, #16]
 8001ff0:	0cdb      	lsrs	r3, r3, #19
 8001ff2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ff6:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8001ff8:	6879      	ldr	r1, [r7, #4]
 8001ffa:	69ba      	ldr	r2, [r7, #24]
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	011b      	lsls	r3, r3, #4
 8002000:	1a9b      	subs	r3, r3, r2
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	440b      	add	r3, r1
 8002006:	3328      	adds	r3, #40	@ 0x28
 8002008:	881b      	ldrh	r3, [r3, #0]
 800200a:	461a      	mov	r2, r3
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	4293      	cmp	r3, r2
 8002010:	d13f      	bne.n	8002092 <HCD_RXQLVL_IRQHandler+0x1b4>
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d03c      	beq.n	8002092 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8002018:	69bb      	ldr	r3, [r7, #24]
 800201a:	015a      	lsls	r2, r3, #5
 800201c:	6a3b      	ldr	r3, [r7, #32]
 800201e:	4413      	add	r3, r2
 8002020:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800202e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002036:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8002038:	69bb      	ldr	r3, [r7, #24]
 800203a:	015a      	lsls	r2, r3, #5
 800203c:	6a3b      	ldr	r3, [r7, #32]
 800203e:	4413      	add	r3, r2
 8002040:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002044:	461a      	mov	r2, r3
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 800204a:	6879      	ldr	r1, [r7, #4]
 800204c:	69ba      	ldr	r2, [r7, #24]
 800204e:	4613      	mov	r3, r2
 8002050:	011b      	lsls	r3, r3, #4
 8002052:	1a9b      	subs	r3, r3, r2
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	440b      	add	r3, r1
 8002058:	333c      	adds	r3, #60	@ 0x3c
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	f083 0301 	eor.w	r3, r3, #1
 8002060:	b2d8      	uxtb	r0, r3
 8002062:	6879      	ldr	r1, [r7, #4]
 8002064:	69ba      	ldr	r2, [r7, #24]
 8002066:	4613      	mov	r3, r2
 8002068:	011b      	lsls	r3, r3, #4
 800206a:	1a9b      	subs	r3, r3, r2
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	440b      	add	r3, r1
 8002070:	333c      	adds	r3, #60	@ 0x3c
 8002072:	4602      	mov	r2, r0
 8002074:	701a      	strb	r2, [r3, #0]
      break;
 8002076:	e00c      	b.n	8002092 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8002078:	6879      	ldr	r1, [r7, #4]
 800207a:	69ba      	ldr	r2, [r7, #24]
 800207c:	4613      	mov	r3, r2
 800207e:	011b      	lsls	r3, r3, #4
 8002080:	1a9b      	subs	r3, r3, r2
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	440b      	add	r3, r1
 8002086:	334c      	adds	r3, #76	@ 0x4c
 8002088:	2204      	movs	r2, #4
 800208a:	701a      	strb	r2, [r3, #0]
      break;
 800208c:	e001      	b.n	8002092 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 800208e:	bf00      	nop
 8002090:	e000      	b.n	8002094 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8002092:	bf00      	nop
  }
}
 8002094:	bf00      	nop
 8002096:	3728      	adds	r7, #40	@ 0x28
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}

0800209c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b086      	sub	sp, #24
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80020c8:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	f003 0302 	and.w	r3, r3, #2
 80020d0:	2b02      	cmp	r3, #2
 80020d2:	d10b      	bne.n	80020ec <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	f003 0301 	and.w	r3, r3, #1
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d102      	bne.n	80020e4 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f000 fc18 	bl	8002914 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	f043 0302 	orr.w	r3, r3, #2
 80020ea:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	f003 0308 	and.w	r3, r3, #8
 80020f2:	2b08      	cmp	r3, #8
 80020f4:	d132      	bne.n	800215c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	f043 0308 	orr.w	r3, r3, #8
 80020fc:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	f003 0304 	and.w	r3, r3, #4
 8002104:	2b04      	cmp	r3, #4
 8002106:	d126      	bne.n	8002156 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	7a5b      	ldrb	r3, [r3, #9]
 800210c:	2b02      	cmp	r3, #2
 800210e:	d113      	bne.n	8002138 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8002116:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800211a:	d106      	bne.n	800212a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2102      	movs	r1, #2
 8002122:	4618      	mov	r0, r3
 8002124:	f000 f949 	bl	80023ba <USB_InitFSLSPClkSel>
 8002128:	e011      	b.n	800214e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	2101      	movs	r1, #1
 8002130:	4618      	mov	r0, r3
 8002132:	f000 f942 	bl	80023ba <USB_InitFSLSPClkSel>
 8002136:	e00a      	b.n	800214e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	79db      	ldrb	r3, [r3, #7]
 800213c:	2b01      	cmp	r3, #1
 800213e:	d106      	bne.n	800214e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002146:	461a      	mov	r2, r3
 8002148:	f64e 2360 	movw	r3, #60000	@ 0xea60
 800214c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f000 fc0a 	bl	8002968 <HAL_HCD_PortEnabled_Callback>
 8002154:	e002      	b.n	800215c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f000 fc14 	bl	8002984 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	f003 0320 	and.w	r3, r3, #32
 8002162:	2b20      	cmp	r3, #32
 8002164:	d103      	bne.n	800216e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	f043 0320 	orr.w	r3, r3, #32
 800216c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8002174:	461a      	mov	r2, r3
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	6013      	str	r3, [r2, #0]
}
 800217a:	bf00      	nop
 800217c:	3718      	adds	r7, #24
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}

08002182 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002182:	b480      	push	{r7}
 8002184:	b083      	sub	sp, #12
 8002186:	af00      	add	r7, sp, #0
 8002188:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	f043 0201 	orr.w	r2, r3, #1
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002196:	2300      	movs	r3, #0
}
 8002198:	4618      	mov	r0, r3
 800219a:	370c      	adds	r7, #12
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr

080021a4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	f023 0201 	bic.w	r2, r3, #1
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80021b8:	2300      	movs	r3, #0
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	370c      	adds	r7, #12
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr

080021c6 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80021c6:	b480      	push	{r7}
 80021c8:	b085      	sub	sp, #20
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	6078      	str	r0, [r7, #4]
 80021ce:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80021d0:	2300      	movs	r3, #0
 80021d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	3301      	adds	r3, #1
 80021d8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80021e0:	d901      	bls.n	80021e6 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	e01b      	b.n	800221e <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	691b      	ldr	r3, [r3, #16]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	daf2      	bge.n	80021d4 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80021ee:	2300      	movs	r3, #0
 80021f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	019b      	lsls	r3, r3, #6
 80021f6:	f043 0220 	orr.w	r2, r3, #32
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	3301      	adds	r3, #1
 8002202:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800220a:	d901      	bls.n	8002210 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800220c:	2303      	movs	r3, #3
 800220e:	e006      	b.n	800221e <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	691b      	ldr	r3, [r3, #16]
 8002214:	f003 0320 	and.w	r3, r3, #32
 8002218:	2b20      	cmp	r3, #32
 800221a:	d0f0      	beq.n	80021fe <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800221c:	2300      	movs	r3, #0
}
 800221e:	4618      	mov	r0, r3
 8002220:	3714      	adds	r7, #20
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr

0800222a <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800222a:	b480      	push	{r7}
 800222c:	b085      	sub	sp, #20
 800222e:	af00      	add	r7, sp, #0
 8002230:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002232:	2300      	movs	r3, #0
 8002234:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	3301      	adds	r3, #1
 800223a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8002242:	d901      	bls.n	8002248 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8002244:	2303      	movs	r3, #3
 8002246:	e018      	b.n	800227a <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	691b      	ldr	r3, [r3, #16]
 800224c:	2b00      	cmp	r3, #0
 800224e:	daf2      	bge.n	8002236 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8002250:	2300      	movs	r3, #0
 8002252:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2210      	movs	r2, #16
 8002258:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	3301      	adds	r3, #1
 800225e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8002266:	d901      	bls.n	800226c <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8002268:	2303      	movs	r3, #3
 800226a:	e006      	b.n	800227a <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	691b      	ldr	r3, [r3, #16]
 8002270:	f003 0310 	and.w	r3, r3, #16
 8002274:	2b10      	cmp	r3, #16
 8002276:	d0f0      	beq.n	800225a <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8002278:	2300      	movs	r3, #0
}
 800227a:	4618      	mov	r0, r3
 800227c:	3714      	adds	r7, #20
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr

08002286 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8002286:	b480      	push	{r7}
 8002288:	b08b      	sub	sp, #44	@ 0x2c
 800228a:	af00      	add	r7, sp, #0
 800228c:	60f8      	str	r0, [r7, #12]
 800228e:	60b9      	str	r1, [r7, #8]
 8002290:	4613      	mov	r3, r2
 8002292:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800229c:	88fb      	ldrh	r3, [r7, #6]
 800229e:	089b      	lsrs	r3, r3, #2
 80022a0:	b29b      	uxth	r3, r3
 80022a2:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80022a4:	88fb      	ldrh	r3, [r7, #6]
 80022a6:	f003 0303 	and.w	r3, r3, #3
 80022aa:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80022ac:	2300      	movs	r3, #0
 80022ae:	623b      	str	r3, [r7, #32]
 80022b0:	e014      	b.n	80022dc <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80022b2:	69bb      	ldr	r3, [r7, #24]
 80022b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022bc:	601a      	str	r2, [r3, #0]
    pDest++;
 80022be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022c0:	3301      	adds	r3, #1
 80022c2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80022c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022c6:	3301      	adds	r3, #1
 80022c8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80022ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022cc:	3301      	adds	r3, #1
 80022ce:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80022d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022d2:	3301      	adds	r3, #1
 80022d4:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80022d6:	6a3b      	ldr	r3, [r7, #32]
 80022d8:	3301      	adds	r3, #1
 80022da:	623b      	str	r3, [r7, #32]
 80022dc:	6a3a      	ldr	r2, [r7, #32]
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d3e6      	bcc.n	80022b2 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80022e4:	8bfb      	ldrh	r3, [r7, #30]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d01e      	beq.n	8002328 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80022ea:	2300      	movs	r3, #0
 80022ec:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80022ee:	69bb      	ldr	r3, [r7, #24]
 80022f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80022f4:	461a      	mov	r2, r3
 80022f6:	f107 0310 	add.w	r3, r7, #16
 80022fa:	6812      	ldr	r2, [r2, #0]
 80022fc:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80022fe:	693a      	ldr	r2, [r7, #16]
 8002300:	6a3b      	ldr	r3, [r7, #32]
 8002302:	b2db      	uxtb	r3, r3
 8002304:	00db      	lsls	r3, r3, #3
 8002306:	fa22 f303 	lsr.w	r3, r2, r3
 800230a:	b2da      	uxtb	r2, r3
 800230c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800230e:	701a      	strb	r2, [r3, #0]
      i++;
 8002310:	6a3b      	ldr	r3, [r7, #32]
 8002312:	3301      	adds	r3, #1
 8002314:	623b      	str	r3, [r7, #32]
      pDest++;
 8002316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002318:	3301      	adds	r3, #1
 800231a:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800231c:	8bfb      	ldrh	r3, [r7, #30]
 800231e:	3b01      	subs	r3, #1
 8002320:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8002322:	8bfb      	ldrh	r3, [r7, #30]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d1ea      	bne.n	80022fe <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8002328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800232a:	4618      	mov	r0, r3
 800232c:	372c      	adds	r7, #44	@ 0x2c
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr

08002336 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8002336:	b480      	push	{r7}
 8002338:	b085      	sub	sp, #20
 800233a:	af00      	add	r7, sp, #0
 800233c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	695b      	ldr	r3, [r3, #20]
 8002342:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	699b      	ldr	r3, [r3, #24]
 8002348:	68fa      	ldr	r2, [r7, #12]
 800234a:	4013      	ands	r3, r2
 800234c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800234e:	68fb      	ldr	r3, [r7, #12]
}
 8002350:	4618      	mov	r0, r3
 8002352:	3714      	adds	r7, #20
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr

0800235c <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800235c:	b480      	push	{r7}
 800235e:	b085      	sub	sp, #20
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	460b      	mov	r3, r1
 8002366:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800236c:	78fb      	ldrb	r3, [r7, #3]
 800236e:	015a      	lsls	r2, r3, #5
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	4413      	add	r3, r2
 8002374:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800237c:	78fb      	ldrb	r3, [r7, #3]
 800237e:	015a      	lsls	r2, r3, #5
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	4413      	add	r3, r2
 8002384:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002388:	68db      	ldr	r3, [r3, #12]
 800238a:	68ba      	ldr	r2, [r7, #8]
 800238c:	4013      	ands	r3, r2
 800238e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8002390:	68bb      	ldr	r3, [r7, #8]
}
 8002392:	4618      	mov	r0, r3
 8002394:	3714      	adds	r7, #20
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr

0800239e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800239e:	b480      	push	{r7}
 80023a0:	b083      	sub	sp, #12
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	695b      	ldr	r3, [r3, #20]
 80023aa:	f003 0301 	and.w	r3, r3, #1
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	370c      	adds	r7, #12
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr

080023ba <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80023ba:	b480      	push	{r7}
 80023bc:	b085      	sub	sp, #20
 80023be:	af00      	add	r7, sp, #0
 80023c0:	6078      	str	r0, [r7, #4]
 80023c2:	460b      	mov	r3, r1
 80023c4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	68fa      	ldr	r2, [r7, #12]
 80023d4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80023d8:	f023 0303 	bic.w	r3, r3, #3
 80023dc:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	78fb      	ldrb	r3, [r7, #3]
 80023e8:	f003 0303 	and.w	r3, r3, #3
 80023ec:	68f9      	ldr	r1, [r7, #12]
 80023ee:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80023f2:	4313      	orrs	r3, r2
 80023f4:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80023f6:	78fb      	ldrb	r3, [r7, #3]
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d107      	bne.n	800240c <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002402:	461a      	mov	r2, r3
 8002404:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8002408:	6053      	str	r3, [r2, #4]
 800240a:	e00c      	b.n	8002426 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800240c:	78fb      	ldrb	r3, [r7, #3]
 800240e:	2b02      	cmp	r3, #2
 8002410:	d107      	bne.n	8002422 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002418:	461a      	mov	r2, r3
 800241a:	f241 7370 	movw	r3, #6000	@ 0x1770
 800241e:	6053      	str	r3, [r2, #4]
 8002420:	e001      	b.n	8002426 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e000      	b.n	8002428 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8002426:	2300      	movs	r3, #0
}
 8002428:	4618      	mov	r0, r3
 800242a:	3714      	adds	r7, #20
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr

08002434 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8002434:	b480      	push	{r7}
 8002436:	b085      	sub	sp, #20
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002446:	695b      	ldr	r3, [r3, #20]
 8002448:	b29b      	uxth	r3, r3
}
 800244a:	4618      	mov	r0, r3
 800244c:	3714      	adds	r7, #20
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr

08002456 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8002456:	b480      	push	{r7}
 8002458:	b089      	sub	sp, #36	@ 0x24
 800245a:	af00      	add	r7, sp, #0
 800245c:	6078      	str	r0, [r7, #4]
 800245e:	460b      	mov	r3, r1
 8002460:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8002466:	78fb      	ldrb	r3, [r7, #3]
 8002468:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800246a:	2300      	movs	r3, #0
 800246c:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800246e:	69bb      	ldr	r3, [r7, #24]
 8002470:	015a      	lsls	r2, r3, #5
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	4413      	add	r3, r2
 8002476:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	0c9b      	lsrs	r3, r3, #18
 800247e:	f003 0303 	and.w	r3, r3, #3
 8002482:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8002484:	69bb      	ldr	r3, [r7, #24]
 8002486:	015a      	lsls	r2, r3, #5
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	4413      	add	r3, r2
 800248c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	0fdb      	lsrs	r3, r3, #31
 8002494:	f003 0301 	and.w	r3, r3, #1
 8002498:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800249a:	69bb      	ldr	r3, [r7, #24]
 800249c:	015a      	lsls	r2, r3, #5
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	4413      	add	r3, r2
 80024a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	0fdb      	lsrs	r3, r3, #31
 80024aa:	f003 0301 	and.w	r3, r3, #1
 80024ae:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	f003 0320 	and.w	r3, r3, #32
 80024b8:	2b20      	cmp	r3, #32
 80024ba:	d10d      	bne.n	80024d8 <USB_HC_Halt+0x82>
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d10a      	bne.n	80024d8 <USB_HC_Halt+0x82>
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d005      	beq.n	80024d4 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d002      	beq.n	80024d4 <USB_HC_Halt+0x7e>
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	2b03      	cmp	r3, #3
 80024d2:	d101      	bne.n	80024d8 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 80024d4:	2300      	movs	r3, #0
 80024d6:	e0d8      	b.n	800268a <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d002      	beq.n	80024e4 <USB_HC_Halt+0x8e>
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	2b02      	cmp	r3, #2
 80024e2:	d173      	bne.n	80025cc <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80024e4:	69bb      	ldr	r3, [r7, #24]
 80024e6:	015a      	lsls	r2, r3, #5
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	4413      	add	r3, r2
 80024ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	69ba      	ldr	r2, [r7, #24]
 80024f4:	0151      	lsls	r1, r2, #5
 80024f6:	69fa      	ldr	r2, [r7, #28]
 80024f8:	440a      	add	r2, r1
 80024fa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80024fe:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002502:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	f003 0320 	and.w	r3, r3, #32
 800250c:	2b00      	cmp	r3, #0
 800250e:	d14a      	bne.n	80025a6 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002514:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8002518:	2b00      	cmp	r3, #0
 800251a:	d133      	bne.n	8002584 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800251c:	69bb      	ldr	r3, [r7, #24]
 800251e:	015a      	lsls	r2, r3, #5
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	4413      	add	r3, r2
 8002524:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	69ba      	ldr	r2, [r7, #24]
 800252c:	0151      	lsls	r1, r2, #5
 800252e:	69fa      	ldr	r2, [r7, #28]
 8002530:	440a      	add	r2, r1
 8002532:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002536:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800253a:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800253c:	69bb      	ldr	r3, [r7, #24]
 800253e:	015a      	lsls	r2, r3, #5
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	4413      	add	r3, r2
 8002544:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	69ba      	ldr	r2, [r7, #24]
 800254c:	0151      	lsls	r1, r2, #5
 800254e:	69fa      	ldr	r2, [r7, #28]
 8002550:	440a      	add	r2, r1
 8002552:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002556:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800255a:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	3301      	adds	r3, #1
 8002560:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002568:	d82e      	bhi.n	80025c8 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800256a:	69bb      	ldr	r3, [r7, #24]
 800256c:	015a      	lsls	r2, r3, #5
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	4413      	add	r3, r2
 8002572:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800257c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002580:	d0ec      	beq.n	800255c <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8002582:	e081      	b.n	8002688 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8002584:	69bb      	ldr	r3, [r7, #24]
 8002586:	015a      	lsls	r2, r3, #5
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	4413      	add	r3, r2
 800258c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	69ba      	ldr	r2, [r7, #24]
 8002594:	0151      	lsls	r1, r2, #5
 8002596:	69fa      	ldr	r2, [r7, #28]
 8002598:	440a      	add	r2, r1
 800259a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800259e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80025a2:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80025a4:	e070      	b.n	8002688 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80025a6:	69bb      	ldr	r3, [r7, #24]
 80025a8:	015a      	lsls	r2, r3, #5
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	4413      	add	r3, r2
 80025ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	69ba      	ldr	r2, [r7, #24]
 80025b6:	0151      	lsls	r1, r2, #5
 80025b8:	69fa      	ldr	r2, [r7, #28]
 80025ba:	440a      	add	r2, r1
 80025bc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80025c0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80025c4:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80025c6:	e05f      	b.n	8002688 <USB_HC_Halt+0x232>
            break;
 80025c8:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80025ca:	e05d      	b.n	8002688 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80025cc:	69bb      	ldr	r3, [r7, #24]
 80025ce:	015a      	lsls	r2, r3, #5
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	4413      	add	r3, r2
 80025d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	69ba      	ldr	r2, [r7, #24]
 80025dc:	0151      	lsls	r1, r2, #5
 80025de:	69fa      	ldr	r2, [r7, #28]
 80025e0:	440a      	add	r2, r1
 80025e2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80025e6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80025ea:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80025f2:	691b      	ldr	r3, [r3, #16]
 80025f4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d133      	bne.n	8002664 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80025fc:	69bb      	ldr	r3, [r7, #24]
 80025fe:	015a      	lsls	r2, r3, #5
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	4413      	add	r3, r2
 8002604:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	69ba      	ldr	r2, [r7, #24]
 800260c:	0151      	lsls	r1, r2, #5
 800260e:	69fa      	ldr	r2, [r7, #28]
 8002610:	440a      	add	r2, r1
 8002612:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002616:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800261a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800261c:	69bb      	ldr	r3, [r7, #24]
 800261e:	015a      	lsls	r2, r3, #5
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	4413      	add	r3, r2
 8002624:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	69ba      	ldr	r2, [r7, #24]
 800262c:	0151      	lsls	r1, r2, #5
 800262e:	69fa      	ldr	r2, [r7, #28]
 8002630:	440a      	add	r2, r1
 8002632:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002636:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800263a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	3301      	adds	r3, #1
 8002640:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002648:	d81d      	bhi.n	8002686 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800264a:	69bb      	ldr	r3, [r7, #24]
 800264c:	015a      	lsls	r2, r3, #5
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	4413      	add	r3, r2
 8002652:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800265c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002660:	d0ec      	beq.n	800263c <USB_HC_Halt+0x1e6>
 8002662:	e011      	b.n	8002688 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8002664:	69bb      	ldr	r3, [r7, #24]
 8002666:	015a      	lsls	r2, r3, #5
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	4413      	add	r3, r2
 800266c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	69ba      	ldr	r2, [r7, #24]
 8002674:	0151      	lsls	r1, r2, #5
 8002676:	69fa      	ldr	r2, [r7, #28]
 8002678:	440a      	add	r2, r1
 800267a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800267e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002682:	6013      	str	r3, [r2, #0]
 8002684:	e000      	b.n	8002688 <USB_HC_Halt+0x232>
          break;
 8002686:	bf00      	nop
    }
  }

  return HAL_OK;
 8002688:	2300      	movs	r3, #0
}
 800268a:	4618      	mov	r0, r3
 800268c:	3724      	adds	r7, #36	@ 0x24
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr

08002696 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8002696:	b580      	push	{r7, lr}
 8002698:	b088      	sub	sp, #32
 800269a:	af00      	add	r7, sp, #0
 800269c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800269e:	2300      	movs	r3, #0
 80026a0:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80026a6:	2300      	movs	r3, #0
 80026a8:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f7ff fd7a 	bl	80021a4 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80026b0:	2110      	movs	r1, #16
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f7ff fd87 	bl	80021c6 <USB_FlushTxFifo>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d001      	beq.n	80026c2 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f7ff fdb1 	bl	800222a <USB_FlushRxFifo>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d001      	beq.n	80026d2 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80026d2:	2300      	movs	r3, #0
 80026d4:	61bb      	str	r3, [r7, #24]
 80026d6:	e01f      	b.n	8002718 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80026d8:	69bb      	ldr	r3, [r7, #24]
 80026da:	015a      	lsls	r2, r3, #5
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	4413      	add	r3, r2
 80026e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80026ee:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80026f6:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80026fe:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8002700:	69bb      	ldr	r3, [r7, #24]
 8002702:	015a      	lsls	r2, r3, #5
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	4413      	add	r3, r2
 8002708:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800270c:	461a      	mov	r2, r3
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8002712:	69bb      	ldr	r3, [r7, #24]
 8002714:	3301      	adds	r3, #1
 8002716:	61bb      	str	r3, [r7, #24]
 8002718:	69bb      	ldr	r3, [r7, #24]
 800271a:	2b0f      	cmp	r3, #15
 800271c:	d9dc      	bls.n	80026d8 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800271e:	2300      	movs	r3, #0
 8002720:	61bb      	str	r3, [r7, #24]
 8002722:	e034      	b.n	800278e <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8002724:	69bb      	ldr	r3, [r7, #24]
 8002726:	015a      	lsls	r2, r3, #5
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	4413      	add	r3, r2
 800272c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800273a:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002742:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800274a:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800274c:	69bb      	ldr	r3, [r7, #24]
 800274e:	015a      	lsls	r2, r3, #5
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	4413      	add	r3, r2
 8002754:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002758:	461a      	mov	r2, r3
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	3301      	adds	r3, #1
 8002762:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800276a:	d80c      	bhi.n	8002786 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800276c:	69bb      	ldr	r3, [r7, #24]
 800276e:	015a      	lsls	r2, r3, #5
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	4413      	add	r3, r2
 8002774:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800277e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002782:	d0ec      	beq.n	800275e <USB_StopHost+0xc8>
 8002784:	e000      	b.n	8002788 <USB_StopHost+0xf2>
        break;
 8002786:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8002788:	69bb      	ldr	r3, [r7, #24]
 800278a:	3301      	adds	r3, #1
 800278c:	61bb      	str	r3, [r7, #24]
 800278e:	69bb      	ldr	r3, [r7, #24]
 8002790:	2b0f      	cmp	r3, #15
 8002792:	d9c7      	bls.n	8002724 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800279a:	461a      	mov	r2, r3
 800279c:	f04f 33ff 	mov.w	r3, #4294967295
 80027a0:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	f04f 32ff 	mov.w	r2, #4294967295
 80027a8:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f7ff fce9 	bl	8002182 <USB_EnableGlobalInt>

  return ret;
 80027b0:	7ffb      	ldrb	r3, [r7, #31]
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3720      	adds	r7, #32
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}

080027ba <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80027ba:	b580      	push	{r7, lr}
 80027bc:	b082      	sub	sp, #8
 80027be:	af00      	add	r7, sp, #0
 80027c0:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80027c8:	1c5a      	adds	r2, r3, #1
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	f000 f804 	bl	80027de <USBH_HandleSof>
}
 80027d6:	bf00      	nop
 80027d8:	3708      	adds	r7, #8
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}

080027de <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80027de:	b580      	push	{r7, lr}
 80027e0:	b082      	sub	sp, #8
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	2b0b      	cmp	r3, #11
 80027ee:	d10a      	bne.n	8002806 <USBH_HandleSof+0x28>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d005      	beq.n	8002806 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8002800:	699b      	ldr	r3, [r3, #24]
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	4798      	blx	r3
  }
}
 8002806:	bf00      	nop
 8002808:	3708      	adds	r7, #8
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}

0800280e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800280e:	b480      	push	{r7}
 8002810:	b083      	sub	sp, #12
 8002812:	af00      	add	r7, sp, #0
 8002814:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2201      	movs	r2, #1
 800281a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800281e:	bf00      	nop
}
 8002820:	370c      	adds	r7, #12
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr

0800282a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800282a:	b480      	push	{r7}
 800282c:	b083      	sub	sp, #12
 800282e:	af00      	add	r7, sp, #0
 8002830:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2200      	movs	r2, #0
 8002836:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 800283a:	bf00      	nop
}
 800283c:	370c      	adds	r7, #12
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr

08002846 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8002846:	b480      	push	{r7}
 8002848:	b083      	sub	sp, #12
 800284a:	af00      	add	r7, sp, #0
 800284c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2201      	movs	r2, #1
 8002852:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2200      	movs	r2, #0
 800285a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8002866:	2300      	movs	r3, #0
}
 8002868:	4618      	mov	r0, r3
 800286a:	370c      	adds	r7, #12
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr

08002874 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2201      	movs	r2, #1
 8002880:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2200      	movs	r2, #0
 8002888:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2200      	movs	r2, #0
 8002890:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	f000 f883 	bl	80029a0 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	791b      	ldrb	r3, [r3, #4]
 800289e:	4619      	mov	r1, r3
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	f000 f80b 	bl	80028bc <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	795b      	ldrb	r3, [r3, #5]
 80028aa:	4619      	mov	r1, r3
 80028ac:	6878      	ldr	r0, [r7, #4]
 80028ae:	f000 f805 	bl	80028bc <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80028b2:	2300      	movs	r3, #0
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3708      	adds	r7, #8
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}

080028bc <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	460b      	mov	r3, r1
 80028c6:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80028c8:	78fb      	ldrb	r3, [r7, #3]
 80028ca:	2b0f      	cmp	r3, #15
 80028cc:	d80d      	bhi.n	80028ea <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80028ce:	78fb      	ldrb	r3, [r7, #3]
 80028d0:	687a      	ldr	r2, [r7, #4]
 80028d2:	33e0      	adds	r3, #224	@ 0xe0
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	4413      	add	r3, r2
 80028d8:	685a      	ldr	r2, [r3, #4]
 80028da:	78fb      	ldrb	r3, [r7, #3]
 80028dc:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80028e0:	6879      	ldr	r1, [r7, #4]
 80028e2:	33e0      	adds	r3, #224	@ 0xe0
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	440b      	add	r3, r1
 80028e8:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80028ea:	2300      	movs	r3, #0
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	370c      	adds	r7, #12
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr

080028f8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8002906:	4618      	mov	r0, r3
 8002908:	f7ff ff57 	bl	80027ba <USBH_LL_IncTimer>
}
 800290c:	bf00      	nop
 800290e:	3708      	adds	r7, #8
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}

08002914 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b082      	sub	sp, #8
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8002922:	4618      	mov	r0, r3
 8002924:	f7ff ff8f 	bl	8002846 <USBH_LL_Connect>
}
 8002928:	bf00      	nop
 800292a:	3708      	adds	r7, #8
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}

08002930 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800293e:	4618      	mov	r0, r3
 8002940:	f7ff ff98 	bl	8002874 <USBH_LL_Disconnect>
}
 8002944:	bf00      	nop
 8002946:	3708      	adds	r7, #8
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}

0800294c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800294c:	b480      	push	{r7}
 800294e:	b083      	sub	sp, #12
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	460b      	mov	r3, r1
 8002956:	70fb      	strb	r3, [r7, #3]
 8002958:	4613      	mov	r3, r2
 800295a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800295c:	bf00      	nop
 800295e:	370c      	adds	r7, #12
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr

08002968 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b082      	sub	sp, #8
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8002976:	4618      	mov	r0, r3
 8002978:	f7ff ff49 	bl	800280e <USBH_LL_PortEnabled>
}
 800297c:	bf00      	nop
 800297e:	3708      	adds	r7, #8
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}

08002984 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b082      	sub	sp, #8
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8002992:	4618      	mov	r0, r3
 8002994:	f7ff ff49 	bl	800282a <USBH_LL_PortDisabled>
}
 8002998:	bf00      	nop
 800299a:	3708      	adds	r7, #8
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}

080029a0 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b084      	sub	sp, #16
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80029a8:	2300      	movs	r3, #0
 80029aa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80029ac:	2300      	movs	r3, #0
 80029ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80029b6:	4618      	mov	r0, r3
 80029b8:	f7fd ff66 	bl	8000888 <HAL_HCD_Stop>
 80029bc:	4603      	mov	r3, r0
 80029be:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80029c0:	7bfb      	ldrb	r3, [r7, #15]
 80029c2:	4618      	mov	r0, r3
 80029c4:	f000 f808 	bl	80029d8 <USBH_Get_USB_Status>
 80029c8:	4603      	mov	r3, r0
 80029ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80029cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3710      	adds	r7, #16
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
	...

080029d8 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80029d8:	b480      	push	{r7}
 80029da:	b085      	sub	sp, #20
 80029dc:	af00      	add	r7, sp, #0
 80029de:	4603      	mov	r3, r0
 80029e0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80029e2:	2300      	movs	r3, #0
 80029e4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80029e6:	79fb      	ldrb	r3, [r7, #7]
 80029e8:	2b03      	cmp	r3, #3
 80029ea:	d817      	bhi.n	8002a1c <USBH_Get_USB_Status+0x44>
 80029ec:	a201      	add	r2, pc, #4	@ (adr r2, 80029f4 <USBH_Get_USB_Status+0x1c>)
 80029ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029f2:	bf00      	nop
 80029f4:	08002a05 	.word	0x08002a05
 80029f8:	08002a0b 	.word	0x08002a0b
 80029fc:	08002a11 	.word	0x08002a11
 8002a00:	08002a17 	.word	0x08002a17
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8002a04:	2300      	movs	r3, #0
 8002a06:	73fb      	strb	r3, [r7, #15]
    break;
 8002a08:	e00b      	b.n	8002a22 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8002a0a:	2302      	movs	r3, #2
 8002a0c:	73fb      	strb	r3, [r7, #15]
    break;
 8002a0e:	e008      	b.n	8002a22 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8002a10:	2301      	movs	r3, #1
 8002a12:	73fb      	strb	r3, [r7, #15]
    break;
 8002a14:	e005      	b.n	8002a22 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8002a16:	2302      	movs	r3, #2
 8002a18:	73fb      	strb	r3, [r7, #15]
    break;
 8002a1a:	e002      	b.n	8002a22 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8002a1c:	2302      	movs	r3, #2
 8002a1e:	73fb      	strb	r3, [r7, #15]
    break;
 8002a20:	bf00      	nop
  }
  return usb_status;
 8002a22:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3714      	adds	r7, #20
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr

08002a30 <__libc_init_array>:
 8002a30:	b570      	push	{r4, r5, r6, lr}
 8002a32:	4d0d      	ldr	r5, [pc, #52]	@ (8002a68 <__libc_init_array+0x38>)
 8002a34:	4c0d      	ldr	r4, [pc, #52]	@ (8002a6c <__libc_init_array+0x3c>)
 8002a36:	1b64      	subs	r4, r4, r5
 8002a38:	10a4      	asrs	r4, r4, #2
 8002a3a:	2600      	movs	r6, #0
 8002a3c:	42a6      	cmp	r6, r4
 8002a3e:	d109      	bne.n	8002a54 <__libc_init_array+0x24>
 8002a40:	4d0b      	ldr	r5, [pc, #44]	@ (8002a70 <__libc_init_array+0x40>)
 8002a42:	4c0c      	ldr	r4, [pc, #48]	@ (8002a74 <__libc_init_array+0x44>)
 8002a44:	f000 f818 	bl	8002a78 <_init>
 8002a48:	1b64      	subs	r4, r4, r5
 8002a4a:	10a4      	asrs	r4, r4, #2
 8002a4c:	2600      	movs	r6, #0
 8002a4e:	42a6      	cmp	r6, r4
 8002a50:	d105      	bne.n	8002a5e <__libc_init_array+0x2e>
 8002a52:	bd70      	pop	{r4, r5, r6, pc}
 8002a54:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a58:	4798      	blx	r3
 8002a5a:	3601      	adds	r6, #1
 8002a5c:	e7ee      	b.n	8002a3c <__libc_init_array+0xc>
 8002a5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a62:	4798      	blx	r3
 8002a64:	3601      	adds	r6, #1
 8002a66:	e7f2      	b.n	8002a4e <__libc_init_array+0x1e>
 8002a68:	08002a90 	.word	0x08002a90
 8002a6c:	08002a90 	.word	0x08002a90
 8002a70:	08002a90 	.word	0x08002a90
 8002a74:	08002a94 	.word	0x08002a94

08002a78 <_init>:
 8002a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a7a:	bf00      	nop
 8002a7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a7e:	bc08      	pop	{r3}
 8002a80:	469e      	mov	lr, r3
 8002a82:	4770      	bx	lr

08002a84 <_fini>:
 8002a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a86:	bf00      	nop
 8002a88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a8a:	bc08      	pop	{r3}
 8002a8c:	469e      	mov	lr, r3
 8002a8e:	4770      	bx	lr
