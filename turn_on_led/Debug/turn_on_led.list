
turn_on_led.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001dc  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800030c  08000314  00010314  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800030c  0800030c  00010314  2**0
                  CONTENTS
  4 .ARM          00000000  0800030c  0800030c  00010314  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800030c  08000314  00010314  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800030c  0800030c  0001030c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000310  08000310  00010310  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010314  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000314  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000314  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010314  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000307  00000000  00000000  0001033d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000000e3  00000000  00000000  00010644  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000058  00000000  00000000  00010728  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000040  00000000  00000000  00010780  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00000fd5  00000000  00000000  000107c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00000476  00000000  00000000  00011795  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000040b5  00000000  00000000  00011c0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00015cc0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000a4  00000000  00000000  00015d3c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080002f4 	.word	0x080002f4

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080002f4 	.word	0x080002f4

08000170 <main>:

void delay_us(uint32_t us);
void delay_ms(uint32_t ms);

int main(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
    /* Enable clock for port C */
    RCC->APB2ENR |= RCC_APB2ENR_IOPCEN(1u);
 8000174:	4b21      	ldr	r3, [pc, #132]	; (80001fc <main+0x8c>)
 8000176:	699b      	ldr	r3, [r3, #24]
 8000178:	4a20      	ldr	r2, [pc, #128]	; (80001fc <main+0x8c>)
 800017a:	f043 0310 	orr.w	r3, r3, #16
 800017e:	6193      	str	r3, [r2, #24]

    GPIOC->CRH &= ~GPIO_CRH_MODE13_MASK;
 8000180:	4b1f      	ldr	r3, [pc, #124]	; (8000200 <main+0x90>)
 8000182:	685b      	ldr	r3, [r3, #4]
 8000184:	4a1e      	ldr	r2, [pc, #120]	; (8000200 <main+0x90>)
 8000186:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800018a:	6053      	str	r3, [r2, #4]
    GPIOC->CRH &= ~GPIO_CRH_CNF13_MASK;
 800018c:	4b1c      	ldr	r3, [pc, #112]	; (8000200 <main+0x90>)
 800018e:	685b      	ldr	r3, [r3, #4]
 8000190:	4a1b      	ldr	r2, [pc, #108]	; (8000200 <main+0x90>)
 8000192:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8000196:	6053      	str	r3, [r2, #4]
    /* Set PC13 to  GPIO output and push-pull mode */
    GPIOC->CRH |= (0x2 << GPIO_CRH_MODE13_SHIFT) | GPIO_CRH_CNF13(0);
 8000198:	4b19      	ldr	r3, [pc, #100]	; (8000200 <main+0x90>)
 800019a:	685b      	ldr	r3, [r3, #4]
 800019c:	4a18      	ldr	r2, [pc, #96]	; (8000200 <main+0x90>)
 800019e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80001a2:	6053      	str	r3, [r2, #4]

    /* Enable clock for TIM2 */
    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN(1u);
 80001a4:	4b15      	ldr	r3, [pc, #84]	; (80001fc <main+0x8c>)
 80001a6:	69db      	ldr	r3, [r3, #28]
 80001a8:	4a14      	ldr	r2, [pc, #80]	; (80001fc <main+0x8c>)
 80001aa:	f043 0301 	orr.w	r3, r3, #1
 80001ae:	61d3      	str	r3, [r2, #28]
     *      + PPRE1 = 0 -> HCLK not divided
     * Summary: PCLK1 = 8MHz
     */

    /* Set PSR = 7 -> Fclock = CK_PSC / (PSC[15:0] + 1) = 8 / (7 + 1) = 1MHz */
    TIM2->PSC = TIM_PSC_PSC(7u);
 80001b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80001b4:	2207      	movs	r2, #7
 80001b6:	629a      	str	r2, [r3, #40]	; 0x28
    TIM2->ARR = TIM_ARR_ARR(0xFFFFu);
 80001b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80001bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80001c0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable counter */
    TIM2->CR1 |= TIM_CR1_CEN(1u);
 80001c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80001c6:	681b      	ldr	r3, [r3, #0]
 80001c8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80001cc:	f043 0301 	orr.w	r3, r3, #1
 80001d0:	6013      	str	r3, [r2, #0]

    /* Loop forever */
    while (1)
    {
        /* Set 1 to OFF PC13 LED */
        GPIOC->BSRR |= GPIO_BSRR_BS13_MASK;
 80001d2:	4b0b      	ldr	r3, [pc, #44]	; (8000200 <main+0x90>)
 80001d4:	691b      	ldr	r3, [r3, #16]
 80001d6:	4a0a      	ldr	r2, [pc, #40]	; (8000200 <main+0x90>)
 80001d8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80001dc:	6113      	str	r3, [r2, #16]
        delay_ms(500);
 80001de:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80001e2:	f000 f823 	bl	800022c <delay_ms>

        /* Clear to ON PC13 LED */
        GPIOC->BSRR |= GPIO_BSRR_BR13_MASK;
 80001e6:	4b06      	ldr	r3, [pc, #24]	; (8000200 <main+0x90>)
 80001e8:	691b      	ldr	r3, [r3, #16]
 80001ea:	4a05      	ldr	r2, [pc, #20]	; (8000200 <main+0x90>)
 80001ec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80001f0:	6113      	str	r3, [r2, #16]
        delay_ms(500);
 80001f2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80001f6:	f000 f819 	bl	800022c <delay_ms>
        GPIOC->BSRR |= GPIO_BSRR_BS13_MASK;
 80001fa:	e7ea      	b.n	80001d2 <main+0x62>
 80001fc:	40021000 	.word	0x40021000
 8000200:	40011000 	.word	0x40011000

08000204 <delay_us>:
    }
}

void delay_us(uint32_t us)
{
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
    TIM2->CNT = 0;
 800020c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000210:	2200      	movs	r2, #0
 8000212:	625a      	str	r2, [r3, #36]	; 0x24
    while ((TIM2->CNT) < us);   /* delay 1 us */
 8000214:	bf00      	nop
 8000216:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800021a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800021c:	687a      	ldr	r2, [r7, #4]
 800021e:	429a      	cmp	r2, r3
 8000220:	d8f9      	bhi.n	8000216 <delay_us+0x12>
}
 8000222:	bf00      	nop
 8000224:	370c      	adds	r7, #12
 8000226:	46bd      	mov	sp, r7
 8000228:	bc80      	pop	{r7}
 800022a:	4770      	bx	lr

0800022c <delay_ms>:

void delay_ms(uint32_t ms)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	b084      	sub	sp, #16
 8000230:	af00      	add	r7, sp, #0
 8000232:	6078      	str	r0, [r7, #4]
    uint32_t count;

    for (count = 0; count < ms; count++)
 8000234:	2300      	movs	r3, #0
 8000236:	60fb      	str	r3, [r7, #12]
 8000238:	e006      	b.n	8000248 <delay_ms+0x1c>
    {
        delay_us(1000);         /* delay 1ms */
 800023a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800023e:	f7ff ffe1 	bl	8000204 <delay_us>
    for (count = 0; count < ms; count++)
 8000242:	68fb      	ldr	r3, [r7, #12]
 8000244:	3301      	adds	r3, #1
 8000246:	60fb      	str	r3, [r7, #12]
 8000248:	68fa      	ldr	r2, [r7, #12]
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	429a      	cmp	r2, r3
 800024e:	d3f4      	bcc.n	800023a <delay_ms+0xe>
    }
}
 8000250:	bf00      	nop
 8000252:	3710      	adds	r7, #16
 8000254:	46bd      	mov	sp, r7
 8000256:	bd80      	pop	{r7, pc}

08000258 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000258:	480d      	ldr	r0, [pc, #52]	; (8000290 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800025a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800025c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000260:	480c      	ldr	r0, [pc, #48]	; (8000294 <LoopForever+0x6>)
  ldr r1, =_edata
 8000262:	490d      	ldr	r1, [pc, #52]	; (8000298 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000264:	4a0d      	ldr	r2, [pc, #52]	; (800029c <LoopForever+0xe>)
  movs r3, #0
 8000266:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000268:	e002      	b.n	8000270 <LoopCopyDataInit>

0800026a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800026a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800026c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800026e:	3304      	adds	r3, #4

08000270 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000270:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000272:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000274:	d3f9      	bcc.n	800026a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000276:	4a0a      	ldr	r2, [pc, #40]	; (80002a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000278:	4c0a      	ldr	r4, [pc, #40]	; (80002a4 <LoopForever+0x16>)
  movs r3, #0
 800027a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800027c:	e001      	b.n	8000282 <LoopFillZerobss>

0800027e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800027e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000280:	3204      	adds	r2, #4

08000282 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000282:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000284:	d3fb      	bcc.n	800027e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000286:	f000 f811 	bl	80002ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800028a:	f7ff ff71 	bl	8000170 <main>

0800028e <LoopForever>:

LoopForever:
    b LoopForever
 800028e:	e7fe      	b.n	800028e <LoopForever>
  ldr   r0, =_estack
 8000290:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000294:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000298:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800029c:	08000314 	.word	0x08000314
  ldr r2, =_sbss
 80002a0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002a4:	2000001c 	.word	0x2000001c

080002a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002a8:	e7fe      	b.n	80002a8 <ADC1_2_IRQHandler>
	...

080002ac <__libc_init_array>:
 80002ac:	b570      	push	{r4, r5, r6, lr}
 80002ae:	2500      	movs	r5, #0
 80002b0:	4e0c      	ldr	r6, [pc, #48]	; (80002e4 <__libc_init_array+0x38>)
 80002b2:	4c0d      	ldr	r4, [pc, #52]	; (80002e8 <__libc_init_array+0x3c>)
 80002b4:	1ba4      	subs	r4, r4, r6
 80002b6:	10a4      	asrs	r4, r4, #2
 80002b8:	42a5      	cmp	r5, r4
 80002ba:	d109      	bne.n	80002d0 <__libc_init_array+0x24>
 80002bc:	f000 f81a 	bl	80002f4 <_init>
 80002c0:	2500      	movs	r5, #0
 80002c2:	4e0a      	ldr	r6, [pc, #40]	; (80002ec <__libc_init_array+0x40>)
 80002c4:	4c0a      	ldr	r4, [pc, #40]	; (80002f0 <__libc_init_array+0x44>)
 80002c6:	1ba4      	subs	r4, r4, r6
 80002c8:	10a4      	asrs	r4, r4, #2
 80002ca:	42a5      	cmp	r5, r4
 80002cc:	d105      	bne.n	80002da <__libc_init_array+0x2e>
 80002ce:	bd70      	pop	{r4, r5, r6, pc}
 80002d0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80002d4:	4798      	blx	r3
 80002d6:	3501      	adds	r5, #1
 80002d8:	e7ee      	b.n	80002b8 <__libc_init_array+0xc>
 80002da:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80002de:	4798      	blx	r3
 80002e0:	3501      	adds	r5, #1
 80002e2:	e7f2      	b.n	80002ca <__libc_init_array+0x1e>
 80002e4:	0800030c 	.word	0x0800030c
 80002e8:	0800030c 	.word	0x0800030c
 80002ec:	0800030c 	.word	0x0800030c
 80002f0:	08000310 	.word	0x08000310

080002f4 <_init>:
 80002f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002f6:	bf00      	nop
 80002f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002fa:	bc08      	pop	{r3}
 80002fc:	469e      	mov	lr, r3
 80002fe:	4770      	bx	lr

08000300 <_fini>:
 8000300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000302:	bf00      	nop
 8000304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000306:	bc08      	pop	{r3}
 8000308:	469e      	mov	lr, r3
 800030a:	4770      	bx	lr
